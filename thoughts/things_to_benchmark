"Things to benchmark". Also known as "Optimistic premature optimizations".

// vqro/base/worker.h
I originally wrote Worker::Do to be very simple, then I figured notify_all()
was stupid and even notify_one() would cause unnecessary contention because
the woken-up code wants the same lock we already have, so I changed it to
release the lock before waking a single waiter. I have no idea if it actually
is better, one of these days someone should measure it and revert it if its not
a decent improvement.

   std::future<void> Do(VoidFunc func) {
-    std::lock_guard<std::mutex> guard(tasks_mutex);
-    tasks.emplace_back(std::packaged_task<void()>(func));
-    tasks_available.notify_all();
-    return tasks.back().get_future();
+    std::future<void> done;
+    {
+      std::lock_guard<std::mutex> guard(tasks_mutex);
+      tasks.emplace_back(std::packaged_task<void()>(func));
+      done = std::move(tasks.back().get_future());
+    }
+    tasks_available.notify_one();
+    return done;
   }
