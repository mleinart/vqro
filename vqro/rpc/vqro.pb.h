// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vqro.proto

#ifndef PROTOBUF_vqro_2eproto__INCLUDED
#define PROTOBUF_vqro_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/map.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace vqro {
namespace rpc {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_vqro_2eproto();
void protobuf_AssignDesc_vqro_2eproto();
void protobuf_ShutdownFile_vqro_2eproto();

class Series;
class Datapoint;
class StatusMessage;
class WriteOperation;
class ReadOperation;
class ReadResult;
class SeriesQuery;
class LabelConstraint;
class SearchSeriesResult;
class LabelsQuery;
class SearchLabelsResult;

enum LabelConstraint_Operator {
  LabelConstraint_Operator_EQUALS = 0,
  LabelConstraint_Operator_REGEX_MATCHES = 1,
  LabelConstraint_Operator_LabelConstraint_Operator_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  LabelConstraint_Operator_LabelConstraint_Operator_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool LabelConstraint_Operator_IsValid(int value);
const LabelConstraint_Operator LabelConstraint_Operator_Operator_MIN = LabelConstraint_Operator_EQUALS;
const LabelConstraint_Operator LabelConstraint_Operator_Operator_MAX = LabelConstraint_Operator_REGEX_MATCHES;
const int LabelConstraint_Operator_Operator_ARRAYSIZE = LabelConstraint_Operator_Operator_MAX + 1;

const ::google::protobuf::EnumDescriptor* LabelConstraint_Operator_descriptor();
inline const ::std::string& LabelConstraint_Operator_Name(LabelConstraint_Operator value) {
  return ::google::protobuf::internal::NameOfEnum(
    LabelConstraint_Operator_descriptor(), value);
}
inline bool LabelConstraint_Operator_Parse(
    const ::std::string& name, LabelConstraint_Operator* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LabelConstraint_Operator>(
    LabelConstraint_Operator_descriptor(), name, value);
}
// ===================================================================

class Series : public ::google::protobuf::Message {
 public:
  Series();
  virtual ~Series();

  Series(const Series& from);

  inline Series& operator=(const Series& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const Series& default_instance();

  void UnsafeArenaSwap(Series* other);
  void Swap(Series* other);

  // implements Message ----------------------------------------------

  inline Series* New() const { return New(NULL); }

  Series* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Series& from);
  void MergeFrom(const Series& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Series* other);
  protected:
  explicit Series(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> labels = 1;
  int labels_size() const;
  void clear_labels();
  static const int kLabelsFieldNumber = 1;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      labels() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_labels();

  // @@protoc_insertion_point(class_scope:vqro.rpc.Series)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool _is_default_instance_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 >
      Series_LabelsEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > labels_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_vqro_2eproto();
  friend void protobuf_AssignDesc_vqro_2eproto();
  friend void protobuf_ShutdownFile_vqro_2eproto();

  void InitAsDefaultInstance();
  static Series* default_instance_;
};
// -------------------------------------------------------------------

class Datapoint : public ::google::protobuf::Message {
 public:
  Datapoint();
  virtual ~Datapoint();

  Datapoint(const Datapoint& from);

  inline Datapoint& operator=(const Datapoint& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const Datapoint& default_instance();

  void UnsafeArenaSwap(Datapoint* other);
  void Swap(Datapoint* other);

  // implements Message ----------------------------------------------

  inline Datapoint* New() const { return New(NULL); }

  Datapoint* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Datapoint& from);
  void MergeFrom(const Datapoint& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Datapoint* other);
  protected:
  explicit Datapoint(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 timestamp = 1;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // optional int64 duration = 2;
  void clear_duration();
  static const int kDurationFieldNumber = 2;
  ::google::protobuf::int64 duration() const;
  void set_duration(::google::protobuf::int64 value);

  // optional double value = 3;
  void clear_value();
  static const int kValueFieldNumber = 3;
  double value() const;
  void set_value(double value);

  // @@protoc_insertion_point(class_scope:vqro.rpc.Datapoint)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool _is_default_instance_;
  ::google::protobuf::int64 timestamp_;
  ::google::protobuf::int64 duration_;
  double value_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_vqro_2eproto();
  friend void protobuf_AssignDesc_vqro_2eproto();
  friend void protobuf_ShutdownFile_vqro_2eproto();

  void InitAsDefaultInstance();
  static Datapoint* default_instance_;
};
// -------------------------------------------------------------------

class StatusMessage : public ::google::protobuf::Message {
 public:
  StatusMessage();
  virtual ~StatusMessage();

  StatusMessage(const StatusMessage& from);

  inline StatusMessage& operator=(const StatusMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const StatusMessage& default_instance();

  void UnsafeArenaSwap(StatusMessage* other);
  void Swap(StatusMessage* other);

  // implements Message ----------------------------------------------

  inline StatusMessage* New() const { return New(NULL); }

  StatusMessage* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StatusMessage& from);
  void MergeFrom(const StatusMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StatusMessage* other);
  protected:
  explicit StatusMessage(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string text = 1;
  void clear_text();
  static const int kTextFieldNumber = 1;
  const ::std::string& text() const;
  void set_text(const ::std::string& value);
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  ::std::string* mutable_text();
  ::std::string* release_text();
  void set_allocated_text(::std::string* text);
  ::std::string* unsafe_arena_release_text();
  void unsafe_arena_set_allocated_text(
      ::std::string* text);

  // optional bool error = 2;
  void clear_error();
  static const int kErrorFieldNumber = 2;
  bool error() const;
  void set_error(bool value);

  // optional bool go_away = 3;
  void clear_go_away();
  static const int kGoAwayFieldNumber = 3;
  bool go_away() const;
  void set_go_away(bool value);

  // @@protoc_insertion_point(class_scope:vqro.rpc.StatusMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr text_;
  bool error_;
  bool go_away_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_vqro_2eproto();
  friend void protobuf_AssignDesc_vqro_2eproto();
  friend void protobuf_ShutdownFile_vqro_2eproto();

  void InitAsDefaultInstance();
  static StatusMessage* default_instance_;
};
// -------------------------------------------------------------------

class WriteOperation : public ::google::protobuf::Message {
 public:
  WriteOperation();
  virtual ~WriteOperation();

  WriteOperation(const WriteOperation& from);

  inline WriteOperation& operator=(const WriteOperation& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const WriteOperation& default_instance();

  void UnsafeArenaSwap(WriteOperation* other);
  void Swap(WriteOperation* other);

  // implements Message ----------------------------------------------

  inline WriteOperation* New() const { return New(NULL); }

  WriteOperation* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WriteOperation& from);
  void MergeFrom(const WriteOperation& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WriteOperation* other);
  protected:
  explicit WriteOperation(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .vqro.rpc.Series series = 1;
  bool has_series() const;
  void clear_series();
  static const int kSeriesFieldNumber = 1;
  private:
  void _slow_mutable_series();
  void _slow_set_allocated_series(
      ::google::protobuf::Arena* message_arena, ::vqro::rpc::Series** series);
  ::vqro::rpc::Series* _slow_release_series();
  public:
  const ::vqro::rpc::Series& series() const;
  ::vqro::rpc::Series* mutable_series();
  ::vqro::rpc::Series* release_series();
  void set_allocated_series(::vqro::rpc::Series* series);
  ::vqro::rpc::Series* unsafe_arena_release_series();
  void unsafe_arena_set_allocated_series(
      ::vqro::rpc::Series* series);

  // repeated .vqro.rpc.Datapoint datapoints = 2;
  int datapoints_size() const;
  void clear_datapoints();
  static const int kDatapointsFieldNumber = 2;
  const ::vqro::rpc::Datapoint& datapoints(int index) const;
  ::vqro::rpc::Datapoint* mutable_datapoints(int index);
  ::vqro::rpc::Datapoint* add_datapoints();
  const ::google::protobuf::RepeatedPtrField< ::vqro::rpc::Datapoint >&
      datapoints() const;
  ::google::protobuf::RepeatedPtrField< ::vqro::rpc::Datapoint >*
      mutable_datapoints();

  // @@protoc_insertion_point(class_scope:vqro.rpc.WriteOperation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool _is_default_instance_;
  ::vqro::rpc::Series* series_;
  ::google::protobuf::RepeatedPtrField< ::vqro::rpc::Datapoint > datapoints_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_vqro_2eproto();
  friend void protobuf_AssignDesc_vqro_2eproto();
  friend void protobuf_ShutdownFile_vqro_2eproto();

  void InitAsDefaultInstance();
  static WriteOperation* default_instance_;
};
// -------------------------------------------------------------------

class ReadOperation : public ::google::protobuf::Message {
 public:
  ReadOperation();
  virtual ~ReadOperation();

  ReadOperation(const ReadOperation& from);

  inline ReadOperation& operator=(const ReadOperation& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReadOperation& default_instance();

  void UnsafeArenaSwap(ReadOperation* other);
  void Swap(ReadOperation* other);

  // implements Message ----------------------------------------------

  inline ReadOperation* New() const { return New(NULL); }

  ReadOperation* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReadOperation& from);
  void MergeFrom(const ReadOperation& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReadOperation* other);
  protected:
  explicit ReadOperation(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .vqro.rpc.SeriesQuery query = 1;
  bool has_query() const;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  private:
  void _slow_mutable_query();
  void _slow_set_allocated_query(
      ::google::protobuf::Arena* message_arena, ::vqro::rpc::SeriesQuery** query);
  ::vqro::rpc::SeriesQuery* _slow_release_query();
  public:
  const ::vqro::rpc::SeriesQuery& query() const;
  ::vqro::rpc::SeriesQuery* mutable_query();
  ::vqro::rpc::SeriesQuery* release_query();
  void set_allocated_query(::vqro::rpc::SeriesQuery* query);
  ::vqro::rpc::SeriesQuery* unsafe_arena_release_query();
  void unsafe_arena_set_allocated_query(
      ::vqro::rpc::SeriesQuery* query);

  // optional int64 start_time = 2;
  void clear_start_time();
  static const int kStartTimeFieldNumber = 2;
  ::google::protobuf::int64 start_time() const;
  void set_start_time(::google::protobuf::int64 value);

  // optional int64 end_time = 3;
  void clear_end_time();
  static const int kEndTimeFieldNumber = 3;
  ::google::protobuf::int64 end_time() const;
  void set_end_time(::google::protobuf::int64 value);

  // optional int64 datapoint_limit = 4;
  void clear_datapoint_limit();
  static const int kDatapointLimitFieldNumber = 4;
  ::google::protobuf::int64 datapoint_limit() const;
  void set_datapoint_limit(::google::protobuf::int64 value);

  // optional bool prefer_latest = 5;
  void clear_prefer_latest();
  static const int kPreferLatestFieldNumber = 5;
  bool prefer_latest() const;
  void set_prefer_latest(bool value);

  // @@protoc_insertion_point(class_scope:vqro.rpc.ReadOperation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool _is_default_instance_;
  ::vqro::rpc::SeriesQuery* query_;
  ::google::protobuf::int64 start_time_;
  ::google::protobuf::int64 end_time_;
  ::google::protobuf::int64 datapoint_limit_;
  bool prefer_latest_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_vqro_2eproto();
  friend void protobuf_AssignDesc_vqro_2eproto();
  friend void protobuf_ShutdownFile_vqro_2eproto();

  void InitAsDefaultInstance();
  static ReadOperation* default_instance_;
};
// -------------------------------------------------------------------

class ReadResult : public ::google::protobuf::Message {
 public:
  ReadResult();
  virtual ~ReadResult();

  ReadResult(const ReadResult& from);

  inline ReadResult& operator=(const ReadResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReadResult& default_instance();

  void UnsafeArenaSwap(ReadResult* other);
  void Swap(ReadResult* other);

  // implements Message ----------------------------------------------

  inline ReadResult* New() const { return New(NULL); }

  ReadResult* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReadResult& from);
  void MergeFrom(const ReadResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReadResult* other);
  protected:
  explicit ReadResult(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .vqro.rpc.Series series = 1;
  bool has_series() const;
  void clear_series();
  static const int kSeriesFieldNumber = 1;
  private:
  void _slow_mutable_series();
  void _slow_set_allocated_series(
      ::google::protobuf::Arena* message_arena, ::vqro::rpc::Series** series);
  ::vqro::rpc::Series* _slow_release_series();
  public:
  const ::vqro::rpc::Series& series() const;
  ::vqro::rpc::Series* mutable_series();
  ::vqro::rpc::Series* release_series();
  void set_allocated_series(::vqro::rpc::Series* series);
  ::vqro::rpc::Series* unsafe_arena_release_series();
  void unsafe_arena_set_allocated_series(
      ::vqro::rpc::Series* series);

  // repeated .vqro.rpc.Datapoint datapoints = 2;
  int datapoints_size() const;
  void clear_datapoints();
  static const int kDatapointsFieldNumber = 2;
  const ::vqro::rpc::Datapoint& datapoints(int index) const;
  ::vqro::rpc::Datapoint* mutable_datapoints(int index);
  ::vqro::rpc::Datapoint* add_datapoints();
  const ::google::protobuf::RepeatedPtrField< ::vqro::rpc::Datapoint >&
      datapoints() const;
  ::google::protobuf::RepeatedPtrField< ::vqro::rpc::Datapoint >*
      mutable_datapoints();

  // optional .vqro.rpc.StatusMessage status = 3;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 3;
  private:
  void _slow_mutable_status();
  void _slow_set_allocated_status(
      ::google::protobuf::Arena* message_arena, ::vqro::rpc::StatusMessage** status);
  ::vqro::rpc::StatusMessage* _slow_release_status();
  public:
  const ::vqro::rpc::StatusMessage& status() const;
  ::vqro::rpc::StatusMessage* mutable_status();
  ::vqro::rpc::StatusMessage* release_status();
  void set_allocated_status(::vqro::rpc::StatusMessage* status);
  ::vqro::rpc::StatusMessage* unsafe_arena_release_status();
  void unsafe_arena_set_allocated_status(
      ::vqro::rpc::StatusMessage* status);

  // @@protoc_insertion_point(class_scope:vqro.rpc.ReadResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool _is_default_instance_;
  ::vqro::rpc::Series* series_;
  ::google::protobuf::RepeatedPtrField< ::vqro::rpc::Datapoint > datapoints_;
  ::vqro::rpc::StatusMessage* status_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_vqro_2eproto();
  friend void protobuf_AssignDesc_vqro_2eproto();
  friend void protobuf_ShutdownFile_vqro_2eproto();

  void InitAsDefaultInstance();
  static ReadResult* default_instance_;
};
// -------------------------------------------------------------------

class SeriesQuery : public ::google::protobuf::Message {
 public:
  SeriesQuery();
  virtual ~SeriesQuery();

  SeriesQuery(const SeriesQuery& from);

  inline SeriesQuery& operator=(const SeriesQuery& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const SeriesQuery& default_instance();

  void UnsafeArenaSwap(SeriesQuery* other);
  void Swap(SeriesQuery* other);

  // implements Message ----------------------------------------------

  inline SeriesQuery* New() const { return New(NULL); }

  SeriesQuery* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SeriesQuery& from);
  void MergeFrom(const SeriesQuery& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SeriesQuery* other);
  protected:
  explicit SeriesQuery(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .vqro.rpc.LabelConstraint constraints = 1;
  int constraints_size() const;
  void clear_constraints();
  static const int kConstraintsFieldNumber = 1;
  const ::vqro::rpc::LabelConstraint& constraints(int index) const;
  ::vqro::rpc::LabelConstraint* mutable_constraints(int index);
  ::vqro::rpc::LabelConstraint* add_constraints();
  const ::google::protobuf::RepeatedPtrField< ::vqro::rpc::LabelConstraint >&
      constraints() const;
  ::google::protobuf::RepeatedPtrField< ::vqro::rpc::LabelConstraint >*
      mutable_constraints();

  // optional int32 result_offset = 2;
  void clear_result_offset();
  static const int kResultOffsetFieldNumber = 2;
  ::google::protobuf::int32 result_offset() const;
  void set_result_offset(::google::protobuf::int32 value);

  // optional int32 result_limit = 3;
  void clear_result_limit();
  static const int kResultLimitFieldNumber = 3;
  ::google::protobuf::int32 result_limit() const;
  void set_result_limit(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:vqro.rpc.SeriesQuery)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::vqro::rpc::LabelConstraint > constraints_;
  ::google::protobuf::int32 result_offset_;
  ::google::protobuf::int32 result_limit_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_vqro_2eproto();
  friend void protobuf_AssignDesc_vqro_2eproto();
  friend void protobuf_ShutdownFile_vqro_2eproto();

  void InitAsDefaultInstance();
  static SeriesQuery* default_instance_;
};
// -------------------------------------------------------------------

class LabelConstraint : public ::google::protobuf::Message {
 public:
  LabelConstraint();
  virtual ~LabelConstraint();

  LabelConstraint(const LabelConstraint& from);

  inline LabelConstraint& operator=(const LabelConstraint& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const LabelConstraint& default_instance();

  void UnsafeArenaSwap(LabelConstraint* other);
  void Swap(LabelConstraint* other);

  // implements Message ----------------------------------------------

  inline LabelConstraint* New() const { return New(NULL); }

  LabelConstraint* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LabelConstraint& from);
  void MergeFrom(const LabelConstraint& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LabelConstraint* other);
  protected:
  explicit LabelConstraint(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef LabelConstraint_Operator Operator;
  static const Operator EQUALS = LabelConstraint_Operator_EQUALS;
  static const Operator REGEX_MATCHES = LabelConstraint_Operator_REGEX_MATCHES;
  static inline bool Operator_IsValid(int value) {
    return LabelConstraint_Operator_IsValid(value);
  }
  static const Operator Operator_MIN =
    LabelConstraint_Operator_Operator_MIN;
  static const Operator Operator_MAX =
    LabelConstraint_Operator_Operator_MAX;
  static const int Operator_ARRAYSIZE =
    LabelConstraint_Operator_Operator_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Operator_descriptor() {
    return LabelConstraint_Operator_descriptor();
  }
  static inline const ::std::string& Operator_Name(Operator value) {
    return LabelConstraint_Operator_Name(value);
  }
  static inline bool Operator_Parse(const ::std::string& name,
      Operator* value) {
    return LabelConstraint_Operator_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string label_name = 1;
  void clear_label_name();
  static const int kLabelNameFieldNumber = 1;
  const ::std::string& label_name() const;
  void set_label_name(const ::std::string& value);
  void set_label_name(const char* value);
  void set_label_name(const char* value, size_t size);
  ::std::string* mutable_label_name();
  ::std::string* release_label_name();
  void set_allocated_label_name(::std::string* label_name);
  ::std::string* unsafe_arena_release_label_name();
  void unsafe_arena_set_allocated_label_name(
      ::std::string* label_name);

  // optional .vqro.rpc.LabelConstraint.Operator constraint_op = 2;
  void clear_constraint_op();
  static const int kConstraintOpFieldNumber = 2;
  ::vqro::rpc::LabelConstraint_Operator constraint_op() const;
  void set_constraint_op(::vqro::rpc::LabelConstraint_Operator value);

  // optional string operand = 3;
  void clear_operand();
  static const int kOperandFieldNumber = 3;
  const ::std::string& operand() const;
  void set_operand(const ::std::string& value);
  void set_operand(const char* value);
  void set_operand(const char* value, size_t size);
  ::std::string* mutable_operand();
  ::std::string* release_operand();
  void set_allocated_operand(::std::string* operand);
  ::std::string* unsafe_arena_release_operand();
  void unsafe_arena_set_allocated_operand(
      ::std::string* operand);

  // @@protoc_insertion_point(class_scope:vqro.rpc.LabelConstraint)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr label_name_;
  ::google::protobuf::internal::ArenaStringPtr operand_;
  int constraint_op_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_vqro_2eproto();
  friend void protobuf_AssignDesc_vqro_2eproto();
  friend void protobuf_ShutdownFile_vqro_2eproto();

  void InitAsDefaultInstance();
  static LabelConstraint* default_instance_;
};
// -------------------------------------------------------------------

class SearchSeriesResult : public ::google::protobuf::Message {
 public:
  SearchSeriesResult();
  virtual ~SearchSeriesResult();

  SearchSeriesResult(const SearchSeriesResult& from);

  inline SearchSeriesResult& operator=(const SearchSeriesResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const SearchSeriesResult& default_instance();

  void UnsafeArenaSwap(SearchSeriesResult* other);
  void Swap(SearchSeriesResult* other);

  // implements Message ----------------------------------------------

  inline SearchSeriesResult* New() const { return New(NULL); }

  SearchSeriesResult* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SearchSeriesResult& from);
  void MergeFrom(const SearchSeriesResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SearchSeriesResult* other);
  protected:
  explicit SearchSeriesResult(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .vqro.rpc.Series matching_series = 1;
  int matching_series_size() const;
  void clear_matching_series();
  static const int kMatchingSeriesFieldNumber = 1;
  const ::vqro::rpc::Series& matching_series(int index) const;
  ::vqro::rpc::Series* mutable_matching_series(int index);
  ::vqro::rpc::Series* add_matching_series();
  const ::google::protobuf::RepeatedPtrField< ::vqro::rpc::Series >&
      matching_series() const;
  ::google::protobuf::RepeatedPtrField< ::vqro::rpc::Series >*
      mutable_matching_series();

  // optional .vqro.rpc.StatusMessage status = 2;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 2;
  private:
  void _slow_mutable_status();
  void _slow_set_allocated_status(
      ::google::protobuf::Arena* message_arena, ::vqro::rpc::StatusMessage** status);
  ::vqro::rpc::StatusMessage* _slow_release_status();
  public:
  const ::vqro::rpc::StatusMessage& status() const;
  ::vqro::rpc::StatusMessage* mutable_status();
  ::vqro::rpc::StatusMessage* release_status();
  void set_allocated_status(::vqro::rpc::StatusMessage* status);
  ::vqro::rpc::StatusMessage* unsafe_arena_release_status();
  void unsafe_arena_set_allocated_status(
      ::vqro::rpc::StatusMessage* status);

  // @@protoc_insertion_point(class_scope:vqro.rpc.SearchSeriesResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::vqro::rpc::Series > matching_series_;
  ::vqro::rpc::StatusMessage* status_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_vqro_2eproto();
  friend void protobuf_AssignDesc_vqro_2eproto();
  friend void protobuf_ShutdownFile_vqro_2eproto();

  void InitAsDefaultInstance();
  static SearchSeriesResult* default_instance_;
};
// -------------------------------------------------------------------

class LabelsQuery : public ::google::protobuf::Message {
 public:
  LabelsQuery();
  virtual ~LabelsQuery();

  LabelsQuery(const LabelsQuery& from);

  inline LabelsQuery& operator=(const LabelsQuery& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const LabelsQuery& default_instance();

  void UnsafeArenaSwap(LabelsQuery* other);
  void Swap(LabelsQuery* other);

  // implements Message ----------------------------------------------

  inline LabelsQuery* New() const { return New(NULL); }

  LabelsQuery* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LabelsQuery& from);
  void MergeFrom(const LabelsQuery& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LabelsQuery* other);
  protected:
  explicit LabelsQuery(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string regex = 1;
  void clear_regex();
  static const int kRegexFieldNumber = 1;
  const ::std::string& regex() const;
  void set_regex(const ::std::string& value);
  void set_regex(const char* value);
  void set_regex(const char* value, size_t size);
  ::std::string* mutable_regex();
  ::std::string* release_regex();
  void set_allocated_regex(::std::string* regex);
  ::std::string* unsafe_arena_release_regex();
  void unsafe_arena_set_allocated_regex(
      ::std::string* regex);

  // optional int32 result_offset = 2;
  void clear_result_offset();
  static const int kResultOffsetFieldNumber = 2;
  ::google::protobuf::int32 result_offset() const;
  void set_result_offset(::google::protobuf::int32 value);

  // optional int32 result_limit = 3;
  void clear_result_limit();
  static const int kResultLimitFieldNumber = 3;
  ::google::protobuf::int32 result_limit() const;
  void set_result_limit(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:vqro.rpc.LabelsQuery)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr regex_;
  ::google::protobuf::int32 result_offset_;
  ::google::protobuf::int32 result_limit_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_vqro_2eproto();
  friend void protobuf_AssignDesc_vqro_2eproto();
  friend void protobuf_ShutdownFile_vqro_2eproto();

  void InitAsDefaultInstance();
  static LabelsQuery* default_instance_;
};
// -------------------------------------------------------------------

class SearchLabelsResult : public ::google::protobuf::Message {
 public:
  SearchLabelsResult();
  virtual ~SearchLabelsResult();

  SearchLabelsResult(const SearchLabelsResult& from);

  inline SearchLabelsResult& operator=(const SearchLabelsResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const SearchLabelsResult& default_instance();

  void UnsafeArenaSwap(SearchLabelsResult* other);
  void Swap(SearchLabelsResult* other);

  // implements Message ----------------------------------------------

  inline SearchLabelsResult* New() const { return New(NULL); }

  SearchLabelsResult* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SearchLabelsResult& from);
  void MergeFrom(const SearchLabelsResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SearchLabelsResult* other);
  protected:
  explicit SearchLabelsResult(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string labels = 1;
  int labels_size() const;
  void clear_labels();
  static const int kLabelsFieldNumber = 1;
  const ::std::string& labels(int index) const;
  ::std::string* mutable_labels(int index);
  void set_labels(int index, const ::std::string& value);
  void set_labels(int index, const char* value);
  void set_labels(int index, const char* value, size_t size);
  ::std::string* add_labels();
  void add_labels(const ::std::string& value);
  void add_labels(const char* value);
  void add_labels(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& labels() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_labels();

  // optional .vqro.rpc.StatusMessage status = 2;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 2;
  private:
  void _slow_mutable_status();
  void _slow_set_allocated_status(
      ::google::protobuf::Arena* message_arena, ::vqro::rpc::StatusMessage** status);
  ::vqro::rpc::StatusMessage* _slow_release_status();
  public:
  const ::vqro::rpc::StatusMessage& status() const;
  ::vqro::rpc::StatusMessage* mutable_status();
  ::vqro::rpc::StatusMessage* release_status();
  void set_allocated_status(::vqro::rpc::StatusMessage* status);
  ::vqro::rpc::StatusMessage* unsafe_arena_release_status();
  void unsafe_arena_set_allocated_status(
      ::vqro::rpc::StatusMessage* status);

  // @@protoc_insertion_point(class_scope:vqro.rpc.SearchLabelsResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::std::string> labels_;
  ::vqro::rpc::StatusMessage* status_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_vqro_2eproto();
  friend void protobuf_AssignDesc_vqro_2eproto();
  friend void protobuf_ShutdownFile_vqro_2eproto();

  void InitAsDefaultInstance();
  static SearchLabelsResult* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Series

// map<string, string> labels = 1;
inline int Series::labels_size() const {
  return labels_.size();
}
inline void Series::clear_labels() {
  labels_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
Series::labels() const {
  // @@protoc_insertion_point(field_map:vqro.rpc.Series.labels)
  return labels_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
Series::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_map:vqro.rpc.Series.labels)
  return labels_.MutableMap();
}

// -------------------------------------------------------------------

// Datapoint

// optional int64 timestamp = 1;
inline void Datapoint::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Datapoint::timestamp() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.Datapoint.timestamp)
  return timestamp_;
}
inline void Datapoint::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:vqro.rpc.Datapoint.timestamp)
}

// optional int64 duration = 2;
inline void Datapoint::clear_duration() {
  duration_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Datapoint::duration() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.Datapoint.duration)
  return duration_;
}
inline void Datapoint::set_duration(::google::protobuf::int64 value) {
  
  duration_ = value;
  // @@protoc_insertion_point(field_set:vqro.rpc.Datapoint.duration)
}

// optional double value = 3;
inline void Datapoint::clear_value() {
  value_ = 0;
}
inline double Datapoint::value() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.Datapoint.value)
  return value_;
}
inline void Datapoint::set_value(double value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:vqro.rpc.Datapoint.value)
}

// -------------------------------------------------------------------

// StatusMessage

// optional string text = 1;
inline void StatusMessage::clear_text() {
  text_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& StatusMessage::text() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.StatusMessage.text)
  return text_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StatusMessage::set_text(const ::std::string& value) {
  
  text_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:vqro.rpc.StatusMessage.text)
}
inline void StatusMessage::set_text(const char* value) {
  
  text_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:vqro.rpc.StatusMessage.text)
}
inline void StatusMessage::set_text(const char* value,
    size_t size) {
  
  text_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:vqro.rpc.StatusMessage.text)
}
inline ::std::string* StatusMessage::mutable_text() {
  
  // @@protoc_insertion_point(field_mutable:vqro.rpc.StatusMessage.text)
  return text_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* StatusMessage::release_text() {
  
  return text_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* StatusMessage::unsafe_arena_release_text() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return text_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void StatusMessage::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    
  } else {
    
  }
  text_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:vqro.rpc.StatusMessage.text)
}
inline void StatusMessage::unsafe_arena_set_allocated_text(
    ::std::string* text) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (text != NULL) {
    
  } else {
    
  }
  
  text_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      text, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:vqro.rpc.StatusMessage.text)
}

// optional bool error = 2;
inline void StatusMessage::clear_error() {
  error_ = false;
}
inline bool StatusMessage::error() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.StatusMessage.error)
  return error_;
}
inline void StatusMessage::set_error(bool value) {
  
  error_ = value;
  // @@protoc_insertion_point(field_set:vqro.rpc.StatusMessage.error)
}

// optional bool go_away = 3;
inline void StatusMessage::clear_go_away() {
  go_away_ = false;
}
inline bool StatusMessage::go_away() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.StatusMessage.go_away)
  return go_away_;
}
inline void StatusMessage::set_go_away(bool value) {
  
  go_away_ = value;
  // @@protoc_insertion_point(field_set:vqro.rpc.StatusMessage.go_away)
}

// -------------------------------------------------------------------

// WriteOperation

// optional .vqro.rpc.Series series = 1;
inline bool WriteOperation::has_series() const {
  return !_is_default_instance_ && series_ != NULL;
}
inline void WriteOperation::clear_series() {
  if (series_ != NULL) delete series_;
  series_ = NULL;
}
inline const ::vqro::rpc::Series& WriteOperation::series() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.WriteOperation.series)
  return series_ != NULL ? *series_ : *default_instance_->series_;
}
inline ::vqro::rpc::Series* WriteOperation::mutable_series() {
  
  if (series_ == NULL) {
    _slow_mutable_series();  }
  // @@protoc_insertion_point(field_mutable:vqro.rpc.WriteOperation.series)
  return series_;
}
inline ::vqro::rpc::Series* WriteOperation::release_series() {
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_series();
  } else {
    ::vqro::rpc::Series* temp = series_;
    series_ = NULL;
    return temp;
  }
}
inline void WriteOperation::set_allocated_series(::vqro::rpc::Series* series) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete series_;
  }
  if (series != NULL) {
    _slow_set_allocated_series(message_arena, &series);
  }
  series_ = series;
  if (series) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:vqro.rpc.WriteOperation.series)
}

// repeated .vqro.rpc.Datapoint datapoints = 2;
inline int WriteOperation::datapoints_size() const {
  return datapoints_.size();
}
inline void WriteOperation::clear_datapoints() {
  datapoints_.Clear();
}
inline const ::vqro::rpc::Datapoint& WriteOperation::datapoints(int index) const {
  // @@protoc_insertion_point(field_get:vqro.rpc.WriteOperation.datapoints)
  return datapoints_.Get(index);
}
inline ::vqro::rpc::Datapoint* WriteOperation::mutable_datapoints(int index) {
  // @@protoc_insertion_point(field_mutable:vqro.rpc.WriteOperation.datapoints)
  return datapoints_.Mutable(index);
}
inline ::vqro::rpc::Datapoint* WriteOperation::add_datapoints() {
  // @@protoc_insertion_point(field_add:vqro.rpc.WriteOperation.datapoints)
  return datapoints_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::vqro::rpc::Datapoint >&
WriteOperation::datapoints() const {
  // @@protoc_insertion_point(field_list:vqro.rpc.WriteOperation.datapoints)
  return datapoints_;
}
inline ::google::protobuf::RepeatedPtrField< ::vqro::rpc::Datapoint >*
WriteOperation::mutable_datapoints() {
  // @@protoc_insertion_point(field_mutable_list:vqro.rpc.WriteOperation.datapoints)
  return &datapoints_;
}

// -------------------------------------------------------------------

// ReadOperation

// optional .vqro.rpc.SeriesQuery query = 1;
inline bool ReadOperation::has_query() const {
  return !_is_default_instance_ && query_ != NULL;
}
inline void ReadOperation::clear_query() {
  if (query_ != NULL) delete query_;
  query_ = NULL;
}
inline const ::vqro::rpc::SeriesQuery& ReadOperation::query() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.ReadOperation.query)
  return query_ != NULL ? *query_ : *default_instance_->query_;
}
inline ::vqro::rpc::SeriesQuery* ReadOperation::mutable_query() {
  
  if (query_ == NULL) {
    _slow_mutable_query();  }
  // @@protoc_insertion_point(field_mutable:vqro.rpc.ReadOperation.query)
  return query_;
}
inline ::vqro::rpc::SeriesQuery* ReadOperation::release_query() {
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_query();
  } else {
    ::vqro::rpc::SeriesQuery* temp = query_;
    query_ = NULL;
    return temp;
  }
}
inline void ReadOperation::set_allocated_query(::vqro::rpc::SeriesQuery* query) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete query_;
  }
  if (query != NULL) {
    _slow_set_allocated_query(message_arena, &query);
  }
  query_ = query;
  if (query) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:vqro.rpc.ReadOperation.query)
}

// optional int64 start_time = 2;
inline void ReadOperation::clear_start_time() {
  start_time_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ReadOperation::start_time() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.ReadOperation.start_time)
  return start_time_;
}
inline void ReadOperation::set_start_time(::google::protobuf::int64 value) {
  
  start_time_ = value;
  // @@protoc_insertion_point(field_set:vqro.rpc.ReadOperation.start_time)
}

// optional int64 end_time = 3;
inline void ReadOperation::clear_end_time() {
  end_time_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ReadOperation::end_time() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.ReadOperation.end_time)
  return end_time_;
}
inline void ReadOperation::set_end_time(::google::protobuf::int64 value) {
  
  end_time_ = value;
  // @@protoc_insertion_point(field_set:vqro.rpc.ReadOperation.end_time)
}

// optional int64 datapoint_limit = 4;
inline void ReadOperation::clear_datapoint_limit() {
  datapoint_limit_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ReadOperation::datapoint_limit() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.ReadOperation.datapoint_limit)
  return datapoint_limit_;
}
inline void ReadOperation::set_datapoint_limit(::google::protobuf::int64 value) {
  
  datapoint_limit_ = value;
  // @@protoc_insertion_point(field_set:vqro.rpc.ReadOperation.datapoint_limit)
}

// optional bool prefer_latest = 5;
inline void ReadOperation::clear_prefer_latest() {
  prefer_latest_ = false;
}
inline bool ReadOperation::prefer_latest() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.ReadOperation.prefer_latest)
  return prefer_latest_;
}
inline void ReadOperation::set_prefer_latest(bool value) {
  
  prefer_latest_ = value;
  // @@protoc_insertion_point(field_set:vqro.rpc.ReadOperation.prefer_latest)
}

// -------------------------------------------------------------------

// ReadResult

// optional .vqro.rpc.Series series = 1;
inline bool ReadResult::has_series() const {
  return !_is_default_instance_ && series_ != NULL;
}
inline void ReadResult::clear_series() {
  if (series_ != NULL) delete series_;
  series_ = NULL;
}
inline const ::vqro::rpc::Series& ReadResult::series() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.ReadResult.series)
  return series_ != NULL ? *series_ : *default_instance_->series_;
}
inline ::vqro::rpc::Series* ReadResult::mutable_series() {
  
  if (series_ == NULL) {
    _slow_mutable_series();  }
  // @@protoc_insertion_point(field_mutable:vqro.rpc.ReadResult.series)
  return series_;
}
inline ::vqro::rpc::Series* ReadResult::release_series() {
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_series();
  } else {
    ::vqro::rpc::Series* temp = series_;
    series_ = NULL;
    return temp;
  }
}
inline void ReadResult::set_allocated_series(::vqro::rpc::Series* series) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete series_;
  }
  if (series != NULL) {
    _slow_set_allocated_series(message_arena, &series);
  }
  series_ = series;
  if (series) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:vqro.rpc.ReadResult.series)
}

// repeated .vqro.rpc.Datapoint datapoints = 2;
inline int ReadResult::datapoints_size() const {
  return datapoints_.size();
}
inline void ReadResult::clear_datapoints() {
  datapoints_.Clear();
}
inline const ::vqro::rpc::Datapoint& ReadResult::datapoints(int index) const {
  // @@protoc_insertion_point(field_get:vqro.rpc.ReadResult.datapoints)
  return datapoints_.Get(index);
}
inline ::vqro::rpc::Datapoint* ReadResult::mutable_datapoints(int index) {
  // @@protoc_insertion_point(field_mutable:vqro.rpc.ReadResult.datapoints)
  return datapoints_.Mutable(index);
}
inline ::vqro::rpc::Datapoint* ReadResult::add_datapoints() {
  // @@protoc_insertion_point(field_add:vqro.rpc.ReadResult.datapoints)
  return datapoints_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::vqro::rpc::Datapoint >&
ReadResult::datapoints() const {
  // @@protoc_insertion_point(field_list:vqro.rpc.ReadResult.datapoints)
  return datapoints_;
}
inline ::google::protobuf::RepeatedPtrField< ::vqro::rpc::Datapoint >*
ReadResult::mutable_datapoints() {
  // @@protoc_insertion_point(field_mutable_list:vqro.rpc.ReadResult.datapoints)
  return &datapoints_;
}

// optional .vqro.rpc.StatusMessage status = 3;
inline bool ReadResult::has_status() const {
  return !_is_default_instance_ && status_ != NULL;
}
inline void ReadResult::clear_status() {
  if (status_ != NULL) delete status_;
  status_ = NULL;
}
inline const ::vqro::rpc::StatusMessage& ReadResult::status() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.ReadResult.status)
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
inline ::vqro::rpc::StatusMessage* ReadResult::mutable_status() {
  
  if (status_ == NULL) {
    _slow_mutable_status();  }
  // @@protoc_insertion_point(field_mutable:vqro.rpc.ReadResult.status)
  return status_;
}
inline ::vqro::rpc::StatusMessage* ReadResult::release_status() {
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_status();
  } else {
    ::vqro::rpc::StatusMessage* temp = status_;
    status_ = NULL;
    return temp;
  }
}
inline void ReadResult::set_allocated_status(::vqro::rpc::StatusMessage* status) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete status_;
  }
  if (status != NULL) {
    _slow_set_allocated_status(message_arena, &status);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:vqro.rpc.ReadResult.status)
}

// -------------------------------------------------------------------

// SeriesQuery

// repeated .vqro.rpc.LabelConstraint constraints = 1;
inline int SeriesQuery::constraints_size() const {
  return constraints_.size();
}
inline void SeriesQuery::clear_constraints() {
  constraints_.Clear();
}
inline const ::vqro::rpc::LabelConstraint& SeriesQuery::constraints(int index) const {
  // @@protoc_insertion_point(field_get:vqro.rpc.SeriesQuery.constraints)
  return constraints_.Get(index);
}
inline ::vqro::rpc::LabelConstraint* SeriesQuery::mutable_constraints(int index) {
  // @@protoc_insertion_point(field_mutable:vqro.rpc.SeriesQuery.constraints)
  return constraints_.Mutable(index);
}
inline ::vqro::rpc::LabelConstraint* SeriesQuery::add_constraints() {
  // @@protoc_insertion_point(field_add:vqro.rpc.SeriesQuery.constraints)
  return constraints_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::vqro::rpc::LabelConstraint >&
SeriesQuery::constraints() const {
  // @@protoc_insertion_point(field_list:vqro.rpc.SeriesQuery.constraints)
  return constraints_;
}
inline ::google::protobuf::RepeatedPtrField< ::vqro::rpc::LabelConstraint >*
SeriesQuery::mutable_constraints() {
  // @@protoc_insertion_point(field_mutable_list:vqro.rpc.SeriesQuery.constraints)
  return &constraints_;
}

// optional int32 result_offset = 2;
inline void SeriesQuery::clear_result_offset() {
  result_offset_ = 0;
}
inline ::google::protobuf::int32 SeriesQuery::result_offset() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.SeriesQuery.result_offset)
  return result_offset_;
}
inline void SeriesQuery::set_result_offset(::google::protobuf::int32 value) {
  
  result_offset_ = value;
  // @@protoc_insertion_point(field_set:vqro.rpc.SeriesQuery.result_offset)
}

// optional int32 result_limit = 3;
inline void SeriesQuery::clear_result_limit() {
  result_limit_ = 0;
}
inline ::google::protobuf::int32 SeriesQuery::result_limit() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.SeriesQuery.result_limit)
  return result_limit_;
}
inline void SeriesQuery::set_result_limit(::google::protobuf::int32 value) {
  
  result_limit_ = value;
  // @@protoc_insertion_point(field_set:vqro.rpc.SeriesQuery.result_limit)
}

// -------------------------------------------------------------------

// LabelConstraint

// optional string label_name = 1;
inline void LabelConstraint::clear_label_name() {
  label_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& LabelConstraint::label_name() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.LabelConstraint.label_name)
  return label_name_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LabelConstraint::set_label_name(const ::std::string& value) {
  
  label_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:vqro.rpc.LabelConstraint.label_name)
}
inline void LabelConstraint::set_label_name(const char* value) {
  
  label_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:vqro.rpc.LabelConstraint.label_name)
}
inline void LabelConstraint::set_label_name(const char* value,
    size_t size) {
  
  label_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:vqro.rpc.LabelConstraint.label_name)
}
inline ::std::string* LabelConstraint::mutable_label_name() {
  
  // @@protoc_insertion_point(field_mutable:vqro.rpc.LabelConstraint.label_name)
  return label_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* LabelConstraint::release_label_name() {
  
  return label_name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* LabelConstraint::unsafe_arena_release_label_name() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return label_name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void LabelConstraint::set_allocated_label_name(::std::string* label_name) {
  if (label_name != NULL) {
    
  } else {
    
  }
  label_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), label_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:vqro.rpc.LabelConstraint.label_name)
}
inline void LabelConstraint::unsafe_arena_set_allocated_label_name(
    ::std::string* label_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (label_name != NULL) {
    
  } else {
    
  }
  
  label_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      label_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:vqro.rpc.LabelConstraint.label_name)
}

// optional .vqro.rpc.LabelConstraint.Operator constraint_op = 2;
inline void LabelConstraint::clear_constraint_op() {
  constraint_op_ = 0;
}
inline ::vqro::rpc::LabelConstraint_Operator LabelConstraint::constraint_op() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.LabelConstraint.constraint_op)
  return static_cast< ::vqro::rpc::LabelConstraint_Operator >(constraint_op_);
}
inline void LabelConstraint::set_constraint_op(::vqro::rpc::LabelConstraint_Operator value) {
  
  constraint_op_ = value;
  // @@protoc_insertion_point(field_set:vqro.rpc.LabelConstraint.constraint_op)
}

// optional string operand = 3;
inline void LabelConstraint::clear_operand() {
  operand_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& LabelConstraint::operand() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.LabelConstraint.operand)
  return operand_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LabelConstraint::set_operand(const ::std::string& value) {
  
  operand_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:vqro.rpc.LabelConstraint.operand)
}
inline void LabelConstraint::set_operand(const char* value) {
  
  operand_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:vqro.rpc.LabelConstraint.operand)
}
inline void LabelConstraint::set_operand(const char* value,
    size_t size) {
  
  operand_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:vqro.rpc.LabelConstraint.operand)
}
inline ::std::string* LabelConstraint::mutable_operand() {
  
  // @@protoc_insertion_point(field_mutable:vqro.rpc.LabelConstraint.operand)
  return operand_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* LabelConstraint::release_operand() {
  
  return operand_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* LabelConstraint::unsafe_arena_release_operand() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return operand_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void LabelConstraint::set_allocated_operand(::std::string* operand) {
  if (operand != NULL) {
    
  } else {
    
  }
  operand_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), operand,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:vqro.rpc.LabelConstraint.operand)
}
inline void LabelConstraint::unsafe_arena_set_allocated_operand(
    ::std::string* operand) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (operand != NULL) {
    
  } else {
    
  }
  
  operand_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      operand, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:vqro.rpc.LabelConstraint.operand)
}

// -------------------------------------------------------------------

// SearchSeriesResult

// repeated .vqro.rpc.Series matching_series = 1;
inline int SearchSeriesResult::matching_series_size() const {
  return matching_series_.size();
}
inline void SearchSeriesResult::clear_matching_series() {
  matching_series_.Clear();
}
inline const ::vqro::rpc::Series& SearchSeriesResult::matching_series(int index) const {
  // @@protoc_insertion_point(field_get:vqro.rpc.SearchSeriesResult.matching_series)
  return matching_series_.Get(index);
}
inline ::vqro::rpc::Series* SearchSeriesResult::mutable_matching_series(int index) {
  // @@protoc_insertion_point(field_mutable:vqro.rpc.SearchSeriesResult.matching_series)
  return matching_series_.Mutable(index);
}
inline ::vqro::rpc::Series* SearchSeriesResult::add_matching_series() {
  // @@protoc_insertion_point(field_add:vqro.rpc.SearchSeriesResult.matching_series)
  return matching_series_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::vqro::rpc::Series >&
SearchSeriesResult::matching_series() const {
  // @@protoc_insertion_point(field_list:vqro.rpc.SearchSeriesResult.matching_series)
  return matching_series_;
}
inline ::google::protobuf::RepeatedPtrField< ::vqro::rpc::Series >*
SearchSeriesResult::mutable_matching_series() {
  // @@protoc_insertion_point(field_mutable_list:vqro.rpc.SearchSeriesResult.matching_series)
  return &matching_series_;
}

// optional .vqro.rpc.StatusMessage status = 2;
inline bool SearchSeriesResult::has_status() const {
  return !_is_default_instance_ && status_ != NULL;
}
inline void SearchSeriesResult::clear_status() {
  if (status_ != NULL) delete status_;
  status_ = NULL;
}
inline const ::vqro::rpc::StatusMessage& SearchSeriesResult::status() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.SearchSeriesResult.status)
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
inline ::vqro::rpc::StatusMessage* SearchSeriesResult::mutable_status() {
  
  if (status_ == NULL) {
    _slow_mutable_status();  }
  // @@protoc_insertion_point(field_mutable:vqro.rpc.SearchSeriesResult.status)
  return status_;
}
inline ::vqro::rpc::StatusMessage* SearchSeriesResult::release_status() {
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_status();
  } else {
    ::vqro::rpc::StatusMessage* temp = status_;
    status_ = NULL;
    return temp;
  }
}
inline void SearchSeriesResult::set_allocated_status(::vqro::rpc::StatusMessage* status) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete status_;
  }
  if (status != NULL) {
    _slow_set_allocated_status(message_arena, &status);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:vqro.rpc.SearchSeriesResult.status)
}

// -------------------------------------------------------------------

// LabelsQuery

// optional string regex = 1;
inline void LabelsQuery::clear_regex() {
  regex_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& LabelsQuery::regex() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.LabelsQuery.regex)
  return regex_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LabelsQuery::set_regex(const ::std::string& value) {
  
  regex_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:vqro.rpc.LabelsQuery.regex)
}
inline void LabelsQuery::set_regex(const char* value) {
  
  regex_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:vqro.rpc.LabelsQuery.regex)
}
inline void LabelsQuery::set_regex(const char* value,
    size_t size) {
  
  regex_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:vqro.rpc.LabelsQuery.regex)
}
inline ::std::string* LabelsQuery::mutable_regex() {
  
  // @@protoc_insertion_point(field_mutable:vqro.rpc.LabelsQuery.regex)
  return regex_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* LabelsQuery::release_regex() {
  
  return regex_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* LabelsQuery::unsafe_arena_release_regex() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return regex_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void LabelsQuery::set_allocated_regex(::std::string* regex) {
  if (regex != NULL) {
    
  } else {
    
  }
  regex_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), regex,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:vqro.rpc.LabelsQuery.regex)
}
inline void LabelsQuery::unsafe_arena_set_allocated_regex(
    ::std::string* regex) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (regex != NULL) {
    
  } else {
    
  }
  
  regex_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      regex, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:vqro.rpc.LabelsQuery.regex)
}

// optional int32 result_offset = 2;
inline void LabelsQuery::clear_result_offset() {
  result_offset_ = 0;
}
inline ::google::protobuf::int32 LabelsQuery::result_offset() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.LabelsQuery.result_offset)
  return result_offset_;
}
inline void LabelsQuery::set_result_offset(::google::protobuf::int32 value) {
  
  result_offset_ = value;
  // @@protoc_insertion_point(field_set:vqro.rpc.LabelsQuery.result_offset)
}

// optional int32 result_limit = 3;
inline void LabelsQuery::clear_result_limit() {
  result_limit_ = 0;
}
inline ::google::protobuf::int32 LabelsQuery::result_limit() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.LabelsQuery.result_limit)
  return result_limit_;
}
inline void LabelsQuery::set_result_limit(::google::protobuf::int32 value) {
  
  result_limit_ = value;
  // @@protoc_insertion_point(field_set:vqro.rpc.LabelsQuery.result_limit)
}

// -------------------------------------------------------------------

// SearchLabelsResult

// repeated string labels = 1;
inline int SearchLabelsResult::labels_size() const {
  return labels_.size();
}
inline void SearchLabelsResult::clear_labels() {
  labels_.Clear();
}
inline const ::std::string& SearchLabelsResult::labels(int index) const {
  // @@protoc_insertion_point(field_get:vqro.rpc.SearchLabelsResult.labels)
  return labels_.Get(index);
}
inline ::std::string* SearchLabelsResult::mutable_labels(int index) {
  // @@protoc_insertion_point(field_mutable:vqro.rpc.SearchLabelsResult.labels)
  return labels_.Mutable(index);
}
inline void SearchLabelsResult::set_labels(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:vqro.rpc.SearchLabelsResult.labels)
  labels_.Mutable(index)->assign(value);
}
inline void SearchLabelsResult::set_labels(int index, const char* value) {
  labels_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:vqro.rpc.SearchLabelsResult.labels)
}
inline void SearchLabelsResult::set_labels(int index, const char* value, size_t size) {
  labels_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:vqro.rpc.SearchLabelsResult.labels)
}
inline ::std::string* SearchLabelsResult::add_labels() {
  return labels_.Add();
}
inline void SearchLabelsResult::add_labels(const ::std::string& value) {
  labels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:vqro.rpc.SearchLabelsResult.labels)
}
inline void SearchLabelsResult::add_labels(const char* value) {
  labels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:vqro.rpc.SearchLabelsResult.labels)
}
inline void SearchLabelsResult::add_labels(const char* value, size_t size) {
  labels_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:vqro.rpc.SearchLabelsResult.labels)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SearchLabelsResult::labels() const {
  // @@protoc_insertion_point(field_list:vqro.rpc.SearchLabelsResult.labels)
  return labels_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SearchLabelsResult::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_list:vqro.rpc.SearchLabelsResult.labels)
  return &labels_;
}

// optional .vqro.rpc.StatusMessage status = 2;
inline bool SearchLabelsResult::has_status() const {
  return !_is_default_instance_ && status_ != NULL;
}
inline void SearchLabelsResult::clear_status() {
  if (status_ != NULL) delete status_;
  status_ = NULL;
}
inline const ::vqro::rpc::StatusMessage& SearchLabelsResult::status() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.SearchLabelsResult.status)
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
inline ::vqro::rpc::StatusMessage* SearchLabelsResult::mutable_status() {
  
  if (status_ == NULL) {
    _slow_mutable_status();  }
  // @@protoc_insertion_point(field_mutable:vqro.rpc.SearchLabelsResult.status)
  return status_;
}
inline ::vqro::rpc::StatusMessage* SearchLabelsResult::release_status() {
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_status();
  } else {
    ::vqro::rpc::StatusMessage* temp = status_;
    status_ = NULL;
    return temp;
  }
}
inline void SearchLabelsResult::set_allocated_status(::vqro::rpc::StatusMessage* status) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete status_;
  }
  if (status != NULL) {
    _slow_set_allocated_status(message_arena, &status);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:vqro.rpc.SearchLabelsResult.status)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace rpc
}  // namespace vqro

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::vqro::rpc::LabelConstraint_Operator> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::vqro::rpc::LabelConstraint_Operator>() {
  return ::vqro::rpc::LabelConstraint_Operator_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_vqro_2eproto__INCLUDED
