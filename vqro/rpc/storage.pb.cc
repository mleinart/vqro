// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: storage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "storage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace vqro {
namespace rpc {

namespace {

const ::google::protobuf::Descriptor* WriteOperation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WriteOperation_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReadOperation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReadOperation_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReadResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReadResult_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_storage_2eproto() {
  protobuf_AddDesc_storage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "storage.proto");
  GOOGLE_CHECK(file != NULL);
  WriteOperation_descriptor_ = file->message_type(0);
  static const int WriteOperation_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteOperation, series_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteOperation, datapoints_),
  };
  WriteOperation_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      WriteOperation_descriptor_,
      WriteOperation::default_instance_,
      WriteOperation_offsets_,
      -1,
      -1,
      -1,
      sizeof(WriteOperation),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteOperation, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteOperation, _is_default_instance_));
  ReadOperation_descriptor_ = file->message_type(1);
  static const int ReadOperation_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadOperation, query_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadOperation, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadOperation, end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadOperation, datapoint_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadOperation, prefer_latest_),
  };
  ReadOperation_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReadOperation_descriptor_,
      ReadOperation::default_instance_,
      ReadOperation_offsets_,
      -1,
      -1,
      -1,
      sizeof(ReadOperation),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadOperation, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadOperation, _is_default_instance_));
  ReadResult_descriptor_ = file->message_type(2);
  static const int ReadResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadResult, series_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadResult, datapoints_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadResult, status_),
  };
  ReadResult_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReadResult_descriptor_,
      ReadResult::default_instance_,
      ReadResult_offsets_,
      -1,
      -1,
      -1,
      sizeof(ReadResult),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadResult, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadResult, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_storage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      WriteOperation_descriptor_, &WriteOperation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReadOperation_descriptor_, &ReadOperation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReadResult_descriptor_, &ReadResult::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_storage_2eproto() {
  delete WriteOperation::default_instance_;
  delete WriteOperation_reflection_;
  delete ReadOperation::default_instance_;
  delete ReadOperation_reflection_;
  delete ReadResult::default_instance_;
  delete ReadResult_reflection_;
}

void protobuf_AddDesc_storage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::vqro::rpc::protobuf_AddDesc_core_2eproto();
  ::vqro::rpc::protobuf_AddDesc_search_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rstorage.proto\022\010vqro.rpc\032\ncore.proto\032\014s"
    "earch.proto\"[\n\016WriteOperation\022 \n\006series\030"
    "\001 \001(\0132\020.vqro.rpc.Series\022\'\n\ndatapoints\030\002 "
    "\003(\0132\023.vqro.rpc.Datapoint\"\213\001\n\rReadOperati"
    "on\022$\n\005query\030\001 \001(\0132\025.vqro.rpc.SeriesQuery"
    "\022\022\n\nstart_time\030\002 \001(\003\022\020\n\010end_time\030\003 \001(\003\022\027"
    "\n\017datapoint_limit\030\004 \001(\003\022\025\n\rprefer_latest"
    "\030\005 \001(\010\"\200\001\n\nReadResult\022 \n\006series\030\001 \001(\0132\020."
    "vqro.rpc.Series\022\'\n\ndatapoints\030\002 \003(\0132\023.vq"
    "ro.rpc.Datapoint\022\'\n\006status\030\003 \001(\0132\027.vqro."
    "rpc.StatusMessage2\235\001\n\016VaqueroStorage\022H\n\017"
    "WriteDatapoints\022\030.vqro.rpc.WriteOperatio"
    "n\032\027.vqro.rpc.StatusMessage(\0010\001\022A\n\016ReadDa"
    "tapoints\022\027.vqro.rpc.ReadOperation\032\024.vqro"
    ".rpc.ReadResult0\001B\003\370\001\001b\006proto3", 590);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "storage.proto", &protobuf_RegisterTypes);
  WriteOperation::default_instance_ = new WriteOperation();
  ReadOperation::default_instance_ = new ReadOperation();
  ReadResult::default_instance_ = new ReadResult();
  WriteOperation::default_instance_->InitAsDefaultInstance();
  ReadOperation::default_instance_->InitAsDefaultInstance();
  ReadResult::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_storage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_storage_2eproto {
  StaticDescriptorInitializer_storage_2eproto() {
    protobuf_AddDesc_storage_2eproto();
  }
} static_descriptor_initializer_storage_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

void WriteOperation::_slow_mutable_series() {
  series_ = ::google::protobuf::Arena::CreateMessage< ::vqro::rpc::Series >(
      GetArenaNoVirtual());
}
::vqro::rpc::Series* WriteOperation::_slow_release_series() {
  if (series_ == NULL) {
    return NULL;
  } else {
    ::vqro::rpc::Series* temp = new ::vqro::rpc::Series;
    temp->MergeFrom(*series_);
    series_ = NULL;
    return temp;
  }
}
::vqro::rpc::Series* WriteOperation::unsafe_arena_release_series() {
  
  ::vqro::rpc::Series* temp = series_;
  series_ = NULL;
  return temp;
}
void WriteOperation::_slow_set_allocated_series(
    ::google::protobuf::Arena* message_arena, ::vqro::rpc::Series** series) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*series) == NULL) {
      message_arena->Own(*series);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*series)) {
      ::vqro::rpc::Series* new_series = 
            ::google::protobuf::Arena::CreateMessage< ::vqro::rpc::Series >(
            message_arena);
      new_series->CopyFrom(**series);
      *series = new_series;
    }
}
void WriteOperation::unsafe_arena_set_allocated_series(
    ::vqro::rpc::Series* series) {
  if (GetArenaNoVirtual() == NULL) {
    delete series_;
  }
  series_ = series;
  if (series) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vqro.rpc.WriteOperation.series)
}
#ifndef _MSC_VER
const int WriteOperation::kSeriesFieldNumber;
const int WriteOperation::kDatapointsFieldNumber;
#endif  // !_MSC_VER

WriteOperation::WriteOperation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vqro.rpc.WriteOperation)
}

WriteOperation::WriteOperation(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  datapoints_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vqro.rpc.WriteOperation)
}

void WriteOperation::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  series_ = const_cast< ::vqro::rpc::Series*>(&::vqro::rpc::Series::default_instance());
}

WriteOperation::WriteOperation(const WriteOperation& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vqro.rpc.WriteOperation)
}

void WriteOperation::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  series_ = NULL;
}

WriteOperation::~WriteOperation() {
  // @@protoc_insertion_point(destructor:vqro.rpc.WriteOperation)
  SharedDtor();
}

void WriteOperation::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  if (this != default_instance_) {
    delete series_;
  }
}

void WriteOperation::ArenaDtor(void* object) {
  WriteOperation* _this = reinterpret_cast< WriteOperation* >(object);
  (void)_this;
}
void WriteOperation::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void WriteOperation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WriteOperation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WriteOperation_descriptor_;
}

const WriteOperation& WriteOperation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_storage_2eproto();
  return *default_instance_;
}

WriteOperation* WriteOperation::default_instance_ = NULL;

WriteOperation* WriteOperation::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<WriteOperation>(arena);
}

void WriteOperation::Clear() {
  if (GetArenaNoVirtual() == NULL && series_ != NULL) delete series_;
  series_ = NULL;
  datapoints_.Clear();
}

bool WriteOperation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vqro.rpc.WriteOperation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .vqro.rpc.Series series = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_series()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_datapoints;
        break;
      }

      // repeated .vqro.rpc.Datapoint datapoints = 2;
      case 2: {
        if (tag == 18) {
         parse_datapoints:
          DO_(input->IncrementRecursionDepth());
         parse_loop_datapoints:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_datapoints()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_datapoints;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vqro.rpc.WriteOperation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vqro.rpc.WriteOperation)
  return false;
#undef DO_
}

void WriteOperation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vqro.rpc.WriteOperation)
  // optional .vqro.rpc.Series series = 1;
  if (this->has_series()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->series_, output);
  }

  // repeated .vqro.rpc.Datapoint datapoints = 2;
  for (unsigned int i = 0, n = this->datapoints_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->datapoints(i), output);
  }

  // @@protoc_insertion_point(serialize_end:vqro.rpc.WriteOperation)
}

::google::protobuf::uint8* WriteOperation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vqro.rpc.WriteOperation)
  // optional .vqro.rpc.Series series = 1;
  if (this->has_series()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->series_, target);
  }

  // repeated .vqro.rpc.Datapoint datapoints = 2;
  for (unsigned int i = 0, n = this->datapoints_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->datapoints(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:vqro.rpc.WriteOperation)
  return target;
}

int WriteOperation::ByteSize() const {
  int total_size = 0;

  // optional .vqro.rpc.Series series = 1;
  if (this->has_series()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->series_);
  }

  // repeated .vqro.rpc.Datapoint datapoints = 2;
  total_size += 1 * this->datapoints_size();
  for (int i = 0; i < this->datapoints_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->datapoints(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WriteOperation::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const WriteOperation* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const WriteOperation>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WriteOperation::MergeFrom(const WriteOperation& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  datapoints_.MergeFrom(from.datapoints_);
  if (from.has_series()) {
    mutable_series()->::vqro::rpc::Series::MergeFrom(from.series());
  }
}

void WriteOperation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WriteOperation::CopyFrom(const WriteOperation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteOperation::IsInitialized() const {

  return true;
}

void WriteOperation::Swap(WriteOperation* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    WriteOperation temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void WriteOperation::UnsafeArenaSwap(WriteOperation* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void WriteOperation::InternalSwap(WriteOperation* other) {
  std::swap(series_, other->series_);
  datapoints_.UnsafeArenaSwap(&other->datapoints_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WriteOperation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WriteOperation_descriptor_;
  metadata.reflection = WriteOperation_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WriteOperation

// optional .vqro.rpc.Series series = 1;
bool WriteOperation::has_series() const {
  return !_is_default_instance_ && series_ != NULL;
}
void WriteOperation::clear_series() {
  if (GetArenaNoVirtual() == NULL && series_ != NULL) delete series_;
  series_ = NULL;
}
const ::vqro::rpc::Series& WriteOperation::series() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.WriteOperation.series)
  return series_ != NULL ? *series_ : *default_instance_->series_;
}
::vqro::rpc::Series* WriteOperation::mutable_series() {
  
  if (series_ == NULL) {
    _slow_mutable_series();
  }
  // @@protoc_insertion_point(field_mutable:vqro.rpc.WriteOperation.series)
  return series_;
}
::vqro::rpc::Series* WriteOperation::release_series() {
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_series();
  } else {
    ::vqro::rpc::Series* temp = series_;
    series_ = NULL;
    return temp;
  }
}
 void WriteOperation::set_allocated_series(::vqro::rpc::Series* series) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete series_;
  }
  if (series != NULL) {
    _slow_set_allocated_series(message_arena, &series);
  }
  series_ = series;
  if (series) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:vqro.rpc.WriteOperation.series)
}

// repeated .vqro.rpc.Datapoint datapoints = 2;
int WriteOperation::datapoints_size() const {
  return datapoints_.size();
}
void WriteOperation::clear_datapoints() {
  datapoints_.Clear();
}
const ::vqro::rpc::Datapoint& WriteOperation::datapoints(int index) const {
  // @@protoc_insertion_point(field_get:vqro.rpc.WriteOperation.datapoints)
  return datapoints_.Get(index);
}
::vqro::rpc::Datapoint* WriteOperation::mutable_datapoints(int index) {
  // @@protoc_insertion_point(field_mutable:vqro.rpc.WriteOperation.datapoints)
  return datapoints_.Mutable(index);
}
::vqro::rpc::Datapoint* WriteOperation::add_datapoints() {
  // @@protoc_insertion_point(field_add:vqro.rpc.WriteOperation.datapoints)
  return datapoints_.Add();
}
::google::protobuf::RepeatedPtrField< ::vqro::rpc::Datapoint >*
WriteOperation::mutable_datapoints() {
  // @@protoc_insertion_point(field_mutable_list:vqro.rpc.WriteOperation.datapoints)
  return &datapoints_;
}
const ::google::protobuf::RepeatedPtrField< ::vqro::rpc::Datapoint >&
WriteOperation::datapoints() const {
  // @@protoc_insertion_point(field_list:vqro.rpc.WriteOperation.datapoints)
  return datapoints_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void ReadOperation::_slow_mutable_query() {
  query_ = ::google::protobuf::Arena::CreateMessage< ::vqro::rpc::SeriesQuery >(
      GetArenaNoVirtual());
}
::vqro::rpc::SeriesQuery* ReadOperation::_slow_release_query() {
  if (query_ == NULL) {
    return NULL;
  } else {
    ::vqro::rpc::SeriesQuery* temp = new ::vqro::rpc::SeriesQuery;
    temp->MergeFrom(*query_);
    query_ = NULL;
    return temp;
  }
}
::vqro::rpc::SeriesQuery* ReadOperation::unsafe_arena_release_query() {
  
  ::vqro::rpc::SeriesQuery* temp = query_;
  query_ = NULL;
  return temp;
}
void ReadOperation::_slow_set_allocated_query(
    ::google::protobuf::Arena* message_arena, ::vqro::rpc::SeriesQuery** query) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*query) == NULL) {
      message_arena->Own(*query);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*query)) {
      ::vqro::rpc::SeriesQuery* new_query = 
            ::google::protobuf::Arena::CreateMessage< ::vqro::rpc::SeriesQuery >(
            message_arena);
      new_query->CopyFrom(**query);
      *query = new_query;
    }
}
void ReadOperation::unsafe_arena_set_allocated_query(
    ::vqro::rpc::SeriesQuery* query) {
  if (GetArenaNoVirtual() == NULL) {
    delete query_;
  }
  query_ = query;
  if (query) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vqro.rpc.ReadOperation.query)
}
#ifndef _MSC_VER
const int ReadOperation::kQueryFieldNumber;
const int ReadOperation::kStartTimeFieldNumber;
const int ReadOperation::kEndTimeFieldNumber;
const int ReadOperation::kDatapointLimitFieldNumber;
const int ReadOperation::kPreferLatestFieldNumber;
#endif  // !_MSC_VER

ReadOperation::ReadOperation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vqro.rpc.ReadOperation)
}

ReadOperation::ReadOperation(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vqro.rpc.ReadOperation)
}

void ReadOperation::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  query_ = const_cast< ::vqro::rpc::SeriesQuery*>(&::vqro::rpc::SeriesQuery::default_instance());
}

ReadOperation::ReadOperation(const ReadOperation& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vqro.rpc.ReadOperation)
}

void ReadOperation::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  query_ = NULL;
  start_time_ = GOOGLE_LONGLONG(0);
  end_time_ = GOOGLE_LONGLONG(0);
  datapoint_limit_ = GOOGLE_LONGLONG(0);
  prefer_latest_ = false;
}

ReadOperation::~ReadOperation() {
  // @@protoc_insertion_point(destructor:vqro.rpc.ReadOperation)
  SharedDtor();
}

void ReadOperation::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  if (this != default_instance_) {
    delete query_;
  }
}

void ReadOperation::ArenaDtor(void* object) {
  ReadOperation* _this = reinterpret_cast< ReadOperation* >(object);
  (void)_this;
}
void ReadOperation::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ReadOperation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReadOperation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReadOperation_descriptor_;
}

const ReadOperation& ReadOperation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_storage_2eproto();
  return *default_instance_;
}

ReadOperation* ReadOperation::default_instance_ = NULL;

ReadOperation* ReadOperation::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ReadOperation>(arena);
}

void ReadOperation::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ReadOperation*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(start_time_, prefer_latest_);
  if (GetArenaNoVirtual() == NULL && query_ != NULL) delete query_;
  query_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool ReadOperation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vqro.rpc.ReadOperation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .vqro.rpc.SeriesQuery query = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_query()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_start_time;
        break;
      }

      // optional int64 start_time = 2;
      case 2: {
        if (tag == 16) {
         parse_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_time_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_end_time;
        break;
      }

      // optional int64 end_time = 3;
      case 3: {
        if (tag == 24) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_time_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_datapoint_limit;
        break;
      }

      // optional int64 datapoint_limit = 4;
      case 4: {
        if (tag == 32) {
         parse_datapoint_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &datapoint_limit_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_prefer_latest;
        break;
      }

      // optional bool prefer_latest = 5;
      case 5: {
        if (tag == 40) {
         parse_prefer_latest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &prefer_latest_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vqro.rpc.ReadOperation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vqro.rpc.ReadOperation)
  return false;
#undef DO_
}

void ReadOperation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vqro.rpc.ReadOperation)
  // optional .vqro.rpc.SeriesQuery query = 1;
  if (this->has_query()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->query_, output);
  }

  // optional int64 start_time = 2;
  if (this->start_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->start_time(), output);
  }

  // optional int64 end_time = 3;
  if (this->end_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->end_time(), output);
  }

  // optional int64 datapoint_limit = 4;
  if (this->datapoint_limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->datapoint_limit(), output);
  }

  // optional bool prefer_latest = 5;
  if (this->prefer_latest() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->prefer_latest(), output);
  }

  // @@protoc_insertion_point(serialize_end:vqro.rpc.ReadOperation)
}

::google::protobuf::uint8* ReadOperation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vqro.rpc.ReadOperation)
  // optional .vqro.rpc.SeriesQuery query = 1;
  if (this->has_query()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->query_, target);
  }

  // optional int64 start_time = 2;
  if (this->start_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->start_time(), target);
  }

  // optional int64 end_time = 3;
  if (this->end_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->end_time(), target);
  }

  // optional int64 datapoint_limit = 4;
  if (this->datapoint_limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->datapoint_limit(), target);
  }

  // optional bool prefer_latest = 5;
  if (this->prefer_latest() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->prefer_latest(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:vqro.rpc.ReadOperation)
  return target;
}

int ReadOperation::ByteSize() const {
  int total_size = 0;

  // optional .vqro.rpc.SeriesQuery query = 1;
  if (this->has_query()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->query_);
  }

  // optional int64 start_time = 2;
  if (this->start_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->start_time());
  }

  // optional int64 end_time = 3;
  if (this->end_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->end_time());
  }

  // optional int64 datapoint_limit = 4;
  if (this->datapoint_limit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->datapoint_limit());
  }

  // optional bool prefer_latest = 5;
  if (this->prefer_latest() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReadOperation::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ReadOperation* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ReadOperation>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReadOperation::MergeFrom(const ReadOperation& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_query()) {
    mutable_query()->::vqro::rpc::SeriesQuery::MergeFrom(from.query());
  }
  if (from.start_time() != 0) {
    set_start_time(from.start_time());
  }
  if (from.end_time() != 0) {
    set_end_time(from.end_time());
  }
  if (from.datapoint_limit() != 0) {
    set_datapoint_limit(from.datapoint_limit());
  }
  if (from.prefer_latest() != 0) {
    set_prefer_latest(from.prefer_latest());
  }
}

void ReadOperation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadOperation::CopyFrom(const ReadOperation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadOperation::IsInitialized() const {

  return true;
}

void ReadOperation::Swap(ReadOperation* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ReadOperation temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void ReadOperation::UnsafeArenaSwap(ReadOperation* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ReadOperation::InternalSwap(ReadOperation* other) {
  std::swap(query_, other->query_);
  std::swap(start_time_, other->start_time_);
  std::swap(end_time_, other->end_time_);
  std::swap(datapoint_limit_, other->datapoint_limit_);
  std::swap(prefer_latest_, other->prefer_latest_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReadOperation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReadOperation_descriptor_;
  metadata.reflection = ReadOperation_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReadOperation

// optional .vqro.rpc.SeriesQuery query = 1;
bool ReadOperation::has_query() const {
  return !_is_default_instance_ && query_ != NULL;
}
void ReadOperation::clear_query() {
  if (GetArenaNoVirtual() == NULL && query_ != NULL) delete query_;
  query_ = NULL;
}
const ::vqro::rpc::SeriesQuery& ReadOperation::query() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.ReadOperation.query)
  return query_ != NULL ? *query_ : *default_instance_->query_;
}
::vqro::rpc::SeriesQuery* ReadOperation::mutable_query() {
  
  if (query_ == NULL) {
    _slow_mutable_query();
  }
  // @@protoc_insertion_point(field_mutable:vqro.rpc.ReadOperation.query)
  return query_;
}
::vqro::rpc::SeriesQuery* ReadOperation::release_query() {
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_query();
  } else {
    ::vqro::rpc::SeriesQuery* temp = query_;
    query_ = NULL;
    return temp;
  }
}
 void ReadOperation::set_allocated_query(::vqro::rpc::SeriesQuery* query) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete query_;
  }
  if (query != NULL) {
    _slow_set_allocated_query(message_arena, &query);
  }
  query_ = query;
  if (query) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:vqro.rpc.ReadOperation.query)
}

// optional int64 start_time = 2;
void ReadOperation::clear_start_time() {
  start_time_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 ReadOperation::start_time() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.ReadOperation.start_time)
  return start_time_;
}
 void ReadOperation::set_start_time(::google::protobuf::int64 value) {
  
  start_time_ = value;
  // @@protoc_insertion_point(field_set:vqro.rpc.ReadOperation.start_time)
}

// optional int64 end_time = 3;
void ReadOperation::clear_end_time() {
  end_time_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 ReadOperation::end_time() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.ReadOperation.end_time)
  return end_time_;
}
 void ReadOperation::set_end_time(::google::protobuf::int64 value) {
  
  end_time_ = value;
  // @@protoc_insertion_point(field_set:vqro.rpc.ReadOperation.end_time)
}

// optional int64 datapoint_limit = 4;
void ReadOperation::clear_datapoint_limit() {
  datapoint_limit_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 ReadOperation::datapoint_limit() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.ReadOperation.datapoint_limit)
  return datapoint_limit_;
}
 void ReadOperation::set_datapoint_limit(::google::protobuf::int64 value) {
  
  datapoint_limit_ = value;
  // @@protoc_insertion_point(field_set:vqro.rpc.ReadOperation.datapoint_limit)
}

// optional bool prefer_latest = 5;
void ReadOperation::clear_prefer_latest() {
  prefer_latest_ = false;
}
 bool ReadOperation::prefer_latest() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.ReadOperation.prefer_latest)
  return prefer_latest_;
}
 void ReadOperation::set_prefer_latest(bool value) {
  
  prefer_latest_ = value;
  // @@protoc_insertion_point(field_set:vqro.rpc.ReadOperation.prefer_latest)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void ReadResult::_slow_mutable_series() {
  series_ = ::google::protobuf::Arena::CreateMessage< ::vqro::rpc::Series >(
      GetArenaNoVirtual());
}
::vqro::rpc::Series* ReadResult::_slow_release_series() {
  if (series_ == NULL) {
    return NULL;
  } else {
    ::vqro::rpc::Series* temp = new ::vqro::rpc::Series;
    temp->MergeFrom(*series_);
    series_ = NULL;
    return temp;
  }
}
::vqro::rpc::Series* ReadResult::unsafe_arena_release_series() {
  
  ::vqro::rpc::Series* temp = series_;
  series_ = NULL;
  return temp;
}
void ReadResult::_slow_set_allocated_series(
    ::google::protobuf::Arena* message_arena, ::vqro::rpc::Series** series) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*series) == NULL) {
      message_arena->Own(*series);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*series)) {
      ::vqro::rpc::Series* new_series = 
            ::google::protobuf::Arena::CreateMessage< ::vqro::rpc::Series >(
            message_arena);
      new_series->CopyFrom(**series);
      *series = new_series;
    }
}
void ReadResult::unsafe_arena_set_allocated_series(
    ::vqro::rpc::Series* series) {
  if (GetArenaNoVirtual() == NULL) {
    delete series_;
  }
  series_ = series;
  if (series) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vqro.rpc.ReadResult.series)
}
void ReadResult::_slow_mutable_status() {
  status_ = ::google::protobuf::Arena::CreateMessage< ::vqro::rpc::StatusMessage >(
      GetArenaNoVirtual());
}
::vqro::rpc::StatusMessage* ReadResult::_slow_release_status() {
  if (status_ == NULL) {
    return NULL;
  } else {
    ::vqro::rpc::StatusMessage* temp = new ::vqro::rpc::StatusMessage;
    temp->MergeFrom(*status_);
    status_ = NULL;
    return temp;
  }
}
::vqro::rpc::StatusMessage* ReadResult::unsafe_arena_release_status() {
  
  ::vqro::rpc::StatusMessage* temp = status_;
  status_ = NULL;
  return temp;
}
void ReadResult::_slow_set_allocated_status(
    ::google::protobuf::Arena* message_arena, ::vqro::rpc::StatusMessage** status) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*status) == NULL) {
      message_arena->Own(*status);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*status)) {
      ::vqro::rpc::StatusMessage* new_status = 
            ::google::protobuf::Arena::CreateMessage< ::vqro::rpc::StatusMessage >(
            message_arena);
      new_status->CopyFrom(**status);
      *status = new_status;
    }
}
void ReadResult::unsafe_arena_set_allocated_status(
    ::vqro::rpc::StatusMessage* status) {
  if (GetArenaNoVirtual() == NULL) {
    delete status_;
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vqro.rpc.ReadResult.status)
}
#ifndef _MSC_VER
const int ReadResult::kSeriesFieldNumber;
const int ReadResult::kDatapointsFieldNumber;
const int ReadResult::kStatusFieldNumber;
#endif  // !_MSC_VER

ReadResult::ReadResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vqro.rpc.ReadResult)
}

ReadResult::ReadResult(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  datapoints_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vqro.rpc.ReadResult)
}

void ReadResult::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  series_ = const_cast< ::vqro::rpc::Series*>(&::vqro::rpc::Series::default_instance());
  status_ = const_cast< ::vqro::rpc::StatusMessage*>(&::vqro::rpc::StatusMessage::default_instance());
}

ReadResult::ReadResult(const ReadResult& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vqro.rpc.ReadResult)
}

void ReadResult::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  series_ = NULL;
  status_ = NULL;
}

ReadResult::~ReadResult() {
  // @@protoc_insertion_point(destructor:vqro.rpc.ReadResult)
  SharedDtor();
}

void ReadResult::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  if (this != default_instance_) {
    delete series_;
    delete status_;
  }
}

void ReadResult::ArenaDtor(void* object) {
  ReadResult* _this = reinterpret_cast< ReadResult* >(object);
  (void)_this;
}
void ReadResult::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ReadResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReadResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReadResult_descriptor_;
}

const ReadResult& ReadResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_storage_2eproto();
  return *default_instance_;
}

ReadResult* ReadResult::default_instance_ = NULL;

ReadResult* ReadResult::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ReadResult>(arena);
}

void ReadResult::Clear() {
  if (GetArenaNoVirtual() == NULL && series_ != NULL) delete series_;
  series_ = NULL;
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
  datapoints_.Clear();
}

bool ReadResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vqro.rpc.ReadResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .vqro.rpc.Series series = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_series()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_datapoints;
        break;
      }

      // repeated .vqro.rpc.Datapoint datapoints = 2;
      case 2: {
        if (tag == 18) {
         parse_datapoints:
          DO_(input->IncrementRecursionDepth());
         parse_loop_datapoints:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_datapoints()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_datapoints;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(26)) goto parse_status;
        break;
      }

      // optional .vqro.rpc.StatusMessage status = 3;
      case 3: {
        if (tag == 26) {
         parse_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vqro.rpc.ReadResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vqro.rpc.ReadResult)
  return false;
#undef DO_
}

void ReadResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vqro.rpc.ReadResult)
  // optional .vqro.rpc.Series series = 1;
  if (this->has_series()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->series_, output);
  }

  // repeated .vqro.rpc.Datapoint datapoints = 2;
  for (unsigned int i = 0, n = this->datapoints_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->datapoints(i), output);
  }

  // optional .vqro.rpc.StatusMessage status = 3;
  if (this->has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->status_, output);
  }

  // @@protoc_insertion_point(serialize_end:vqro.rpc.ReadResult)
}

::google::protobuf::uint8* ReadResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vqro.rpc.ReadResult)
  // optional .vqro.rpc.Series series = 1;
  if (this->has_series()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->series_, target);
  }

  // repeated .vqro.rpc.Datapoint datapoints = 2;
  for (unsigned int i = 0, n = this->datapoints_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->datapoints(i), target);
  }

  // optional .vqro.rpc.StatusMessage status = 3;
  if (this->has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->status_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:vqro.rpc.ReadResult)
  return target;
}

int ReadResult::ByteSize() const {
  int total_size = 0;

  // optional .vqro.rpc.Series series = 1;
  if (this->has_series()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->series_);
  }

  // optional .vqro.rpc.StatusMessage status = 3;
  if (this->has_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->status_);
  }

  // repeated .vqro.rpc.Datapoint datapoints = 2;
  total_size += 1 * this->datapoints_size();
  for (int i = 0; i < this->datapoints_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->datapoints(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReadResult::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ReadResult* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ReadResult>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReadResult::MergeFrom(const ReadResult& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  datapoints_.MergeFrom(from.datapoints_);
  if (from.has_series()) {
    mutable_series()->::vqro::rpc::Series::MergeFrom(from.series());
  }
  if (from.has_status()) {
    mutable_status()->::vqro::rpc::StatusMessage::MergeFrom(from.status());
  }
}

void ReadResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadResult::CopyFrom(const ReadResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadResult::IsInitialized() const {

  return true;
}

void ReadResult::Swap(ReadResult* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ReadResult temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void ReadResult::UnsafeArenaSwap(ReadResult* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ReadResult::InternalSwap(ReadResult* other) {
  std::swap(series_, other->series_);
  datapoints_.UnsafeArenaSwap(&other->datapoints_);
  std::swap(status_, other->status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReadResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReadResult_descriptor_;
  metadata.reflection = ReadResult_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReadResult

// optional .vqro.rpc.Series series = 1;
bool ReadResult::has_series() const {
  return !_is_default_instance_ && series_ != NULL;
}
void ReadResult::clear_series() {
  if (GetArenaNoVirtual() == NULL && series_ != NULL) delete series_;
  series_ = NULL;
}
const ::vqro::rpc::Series& ReadResult::series() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.ReadResult.series)
  return series_ != NULL ? *series_ : *default_instance_->series_;
}
::vqro::rpc::Series* ReadResult::mutable_series() {
  
  if (series_ == NULL) {
    _slow_mutable_series();
  }
  // @@protoc_insertion_point(field_mutable:vqro.rpc.ReadResult.series)
  return series_;
}
::vqro::rpc::Series* ReadResult::release_series() {
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_series();
  } else {
    ::vqro::rpc::Series* temp = series_;
    series_ = NULL;
    return temp;
  }
}
 void ReadResult::set_allocated_series(::vqro::rpc::Series* series) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete series_;
  }
  if (series != NULL) {
    _slow_set_allocated_series(message_arena, &series);
  }
  series_ = series;
  if (series) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:vqro.rpc.ReadResult.series)
}

// repeated .vqro.rpc.Datapoint datapoints = 2;
int ReadResult::datapoints_size() const {
  return datapoints_.size();
}
void ReadResult::clear_datapoints() {
  datapoints_.Clear();
}
const ::vqro::rpc::Datapoint& ReadResult::datapoints(int index) const {
  // @@protoc_insertion_point(field_get:vqro.rpc.ReadResult.datapoints)
  return datapoints_.Get(index);
}
::vqro::rpc::Datapoint* ReadResult::mutable_datapoints(int index) {
  // @@protoc_insertion_point(field_mutable:vqro.rpc.ReadResult.datapoints)
  return datapoints_.Mutable(index);
}
::vqro::rpc::Datapoint* ReadResult::add_datapoints() {
  // @@protoc_insertion_point(field_add:vqro.rpc.ReadResult.datapoints)
  return datapoints_.Add();
}
::google::protobuf::RepeatedPtrField< ::vqro::rpc::Datapoint >*
ReadResult::mutable_datapoints() {
  // @@protoc_insertion_point(field_mutable_list:vqro.rpc.ReadResult.datapoints)
  return &datapoints_;
}
const ::google::protobuf::RepeatedPtrField< ::vqro::rpc::Datapoint >&
ReadResult::datapoints() const {
  // @@protoc_insertion_point(field_list:vqro.rpc.ReadResult.datapoints)
  return datapoints_;
}

// optional .vqro.rpc.StatusMessage status = 3;
bool ReadResult::has_status() const {
  return !_is_default_instance_ && status_ != NULL;
}
void ReadResult::clear_status() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
}
const ::vqro::rpc::StatusMessage& ReadResult::status() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.ReadResult.status)
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
::vqro::rpc::StatusMessage* ReadResult::mutable_status() {
  
  if (status_ == NULL) {
    _slow_mutable_status();
  }
  // @@protoc_insertion_point(field_mutable:vqro.rpc.ReadResult.status)
  return status_;
}
::vqro::rpc::StatusMessage* ReadResult::release_status() {
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_status();
  } else {
    ::vqro::rpc::StatusMessage* temp = status_;
    status_ = NULL;
    return temp;
  }
}
 void ReadResult::set_allocated_status(::vqro::rpc::StatusMessage* status) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete status_;
  }
  if (status != NULL) {
    _slow_set_allocated_status(message_arena, &status);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:vqro.rpc.ReadResult.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace rpc
}  // namespace vqro

// @@protoc_insertion_point(global_scope)
