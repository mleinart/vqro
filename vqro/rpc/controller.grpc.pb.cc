// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: controller.proto

#include "controller.pb.h"
#include "controller.grpc.pb.h"

#include <grpc++/channel.h>
#include <grpc++/impl/client_unary_call.h>
#include <grpc++/impl/rpc_service_method.h>
#include <grpc++/impl/service_type.h>
#include <grpc++/support/async_unary_call.h>
#include <grpc++/support/async_stream.h>
#include <grpc++/support/sync_stream.h>
namespace vqro {
namespace rpc {

static const char* VaqueroController_method_names[] = {
  "/vqro.rpc.VaqueroController/LocateSeries",
  "/vqro.rpc.VaqueroController/ExchangeState",
};

std::unique_ptr< VaqueroController::Stub> VaqueroController::NewStub(const std::shared_ptr< ::grpc::Channel>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< VaqueroController::Stub> stub(new VaqueroController::Stub(channel));
  return stub;
}

VaqueroController::Stub::Stub(const std::shared_ptr< ::grpc::Channel>& channel)
  : channel_(channel), rpcmethod_LocateSeries_(VaqueroController_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ExchangeState_(VaqueroController_method_names[1], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status VaqueroController::Stub::LocateSeries(::grpc::ClientContext* context, const ::vqro::rpc::SeriesQuery& request, ::vqro::rpc::LocateSeriesResults* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_LocateSeries_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::vqro::rpc::LocateSeriesResults>* VaqueroController::Stub::AsyncLocateSeriesRaw(::grpc::ClientContext* context, const ::vqro::rpc::SeriesQuery& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::vqro::rpc::LocateSeriesResults>(channel_.get(), cq, rpcmethod_LocateSeries_, context, request);
}

::grpc::Status VaqueroController::Stub::ExchangeState(::grpc::ClientContext* context, const ::vqro::rpc::ExchangeStateRequest& request, ::vqro::rpc::ExchangeStateResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_ExchangeState_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::vqro::rpc::ExchangeStateResponse>* VaqueroController::Stub::AsyncExchangeStateRaw(::grpc::ClientContext* context, const ::vqro::rpc::ExchangeStateRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::vqro::rpc::ExchangeStateResponse>(channel_.get(), cq, rpcmethod_ExchangeState_, context, request);
}

VaqueroController::AsyncService::AsyncService() : ::grpc::AsynchronousService(VaqueroController_method_names, 2) {}

VaqueroController::Service::~Service() {
  delete service_;
}

::grpc::Status VaqueroController::Service::LocateSeries(::grpc::ServerContext* context, const ::vqro::rpc::SeriesQuery* request, ::vqro::rpc::LocateSeriesResults* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

void VaqueroController::AsyncService::RequestLocateSeries(::grpc::ServerContext* context, ::vqro::rpc::SeriesQuery* request, ::grpc::ServerAsyncResponseWriter< ::vqro::rpc::LocateSeriesResults>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
  AsynchronousService::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
}

::grpc::Status VaqueroController::Service::ExchangeState(::grpc::ServerContext* context, const ::vqro::rpc::ExchangeStateRequest* request, ::vqro::rpc::ExchangeStateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

void VaqueroController::AsyncService::RequestExchangeState(::grpc::ServerContext* context, ::vqro::rpc::ExchangeStateRequest* request, ::grpc::ServerAsyncResponseWriter< ::vqro::rpc::ExchangeStateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
  AsynchronousService::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
}

::grpc::RpcService* VaqueroController::Service::service() {
  if (service_ != nullptr) {
    return service_;
  }
  service_ = new ::grpc::RpcService();
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      VaqueroController_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< VaqueroController::Service, ::vqro::rpc::SeriesQuery, ::vqro::rpc::LocateSeriesResults>(
          std::mem_fn(&VaqueroController::Service::LocateSeries), this)));
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      VaqueroController_method_names[1],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< VaqueroController::Service, ::vqro::rpc::ExchangeStateRequest, ::vqro::rpc::ExchangeStateResponse>(
          std::mem_fn(&VaqueroController::Service::ExchangeState), this)));
  return service_;
}


}  // namespace vqro
}  // namespace rpc

