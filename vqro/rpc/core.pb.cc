// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: core.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "core.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace vqro {
namespace rpc {

namespace {

const ::google::protobuf::Descriptor* Series_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Series_reflection_ = NULL;
const ::google::protobuf::Descriptor* Series_LabelsEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Datapoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Datapoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* StatusMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StatusMessage_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_core_2eproto() {
  protobuf_AddDesc_core_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "core.proto");
  GOOGLE_CHECK(file != NULL);
  Series_descriptor_ = file->message_type(0);
  static const int Series_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Series, labels_),
  };
  Series_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Series_descriptor_,
      Series::default_instance_,
      Series_offsets_,
      -1,
      -1,
      -1,
      sizeof(Series),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Series, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Series, _is_default_instance_));
  Series_LabelsEntry_descriptor_ = Series_descriptor_->nested_type(0);
  Datapoint_descriptor_ = file->message_type(1);
  static const int Datapoint_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Datapoint, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Datapoint, duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Datapoint, value_),
  };
  Datapoint_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Datapoint_descriptor_,
      Datapoint::default_instance_,
      Datapoint_offsets_,
      -1,
      -1,
      -1,
      sizeof(Datapoint),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Datapoint, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Datapoint, _is_default_instance_));
  StatusMessage_descriptor_ = file->message_type(2);
  static const int StatusMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusMessage, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusMessage, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusMessage, go_away_),
  };
  StatusMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StatusMessage_descriptor_,
      StatusMessage::default_instance_,
      StatusMessage_offsets_,
      -1,
      -1,
      -1,
      sizeof(StatusMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusMessage, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusMessage, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_core_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Series_descriptor_, &Series::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        Series_LabelsEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::std::string,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            0>::CreateDefaultInstance(
                Series_LabelsEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Datapoint_descriptor_, &Datapoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StatusMessage_descriptor_, &StatusMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_core_2eproto() {
  delete Series::default_instance_;
  delete Series_reflection_;
  delete Datapoint::default_instance_;
  delete Datapoint_reflection_;
  delete StatusMessage::default_instance_;
  delete StatusMessage_reflection_;
}

void protobuf_AddDesc_core_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\ncore.proto\022\010vqro.rpc\"e\n\006Series\022,\n\006labe"
    "ls\030\001 \003(\0132\034.vqro.rpc.Series.LabelsEntry\032-"
    "\n\013LabelsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001("
    "\t:\0028\001\"\?\n\tDatapoint\022\021\n\ttimestamp\030\001 \001(\003\022\020\n"
    "\010duration\030\002 \001(\003\022\r\n\005value\030\003 \001(\001\"=\n\rStatus"
    "Message\022\014\n\004text\030\001 \001(\t\022\r\n\005error\030\002 \001(\010\022\017\n\007"
    "go_away\030\003 \001(\010B\003\370\001\001b\006proto3", 266);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "core.proto", &protobuf_RegisterTypes);
  Series::default_instance_ = new Series();
  Datapoint::default_instance_ = new Datapoint();
  StatusMessage::default_instance_ = new StatusMessage();
  Series::default_instance_->InitAsDefaultInstance();
  Datapoint::default_instance_->InitAsDefaultInstance();
  StatusMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_core_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_core_2eproto {
  StaticDescriptorInitializer_core_2eproto() {
    protobuf_AddDesc_core_2eproto();
  }
} static_descriptor_initializer_core_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int Series::kLabelsFieldNumber;
#endif  // !_MSC_VER

Series::Series()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vqro.rpc.Series)
}

Series::Series(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  labels_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vqro.rpc.Series)
}

void Series::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Series::Series(const Series& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vqro.rpc.Series)
}

void Series::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  labels_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  labels_.SetEntryDescriptor(
      &::vqro::rpc::Series_LabelsEntry_descriptor_);
}

Series::~Series() {
  // @@protoc_insertion_point(destructor:vqro.rpc.Series)
  SharedDtor();
}

void Series::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  if (this != default_instance_) {
  }
}

void Series::ArenaDtor(void* object) {
  Series* _this = reinterpret_cast< Series* >(object);
  (void)_this;
}
void Series::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Series::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Series::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Series_descriptor_;
}

const Series& Series::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_core_2eproto();
  return *default_instance_;
}

Series* Series::default_instance_ = NULL;

Series* Series::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<Series>(arena);
}

void Series::Clear() {
  labels_.Clear();
}

bool Series::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vqro.rpc.Series)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, string> labels = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_labels:
          ::google::protobuf::scoped_ptr<Series_LabelsEntry> entry(labels_.NewEntry());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, entry.get()));
          (*mutable_labels())[entry->key()] = *entry->mutable_value();
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry->key().data(), entry->key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vqro.rpc.Series.LabelsEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry->mutable_value()->data(),
            entry->mutable_value()->length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vqro.rpc.Series.LabelsEntry.value"));
          if (entry->GetArena() != NULL) entry.release();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_labels;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vqro.rpc.Series)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vqro.rpc.Series)
  return false;
#undef DO_
}

void Series::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vqro.rpc.Series)
  // map<string, string> labels = 1;
  {
    ::google::protobuf::scoped_ptr<Series_LabelsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->labels().begin();
        it != this->labels().end(); ++it) {
      if (entry.get() != NULL && entry->GetArena() != NULL) {
        entry.release();
      }
      entry.reset(labels_.NewEntryWrapper(it->first, it->second));
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
          1, *entry, output);
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        it->first.data(), it->first.length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "vqro.rpc.Series.LabelsEntry.key");
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        it->second.data(), it->second.length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "vqro.rpc.Series.LabelsEntry.value");
    }
    if (entry.get() != NULL && entry->GetArena() != NULL) {
      entry.release();
    }
  }

  // @@protoc_insertion_point(serialize_end:vqro.rpc.Series)
}

::google::protobuf::uint8* Series::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vqro.rpc.Series)
  // map<string, string> labels = 1;
  {
    ::google::protobuf::scoped_ptr<Series_LabelsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->labels().begin();
        it != this->labels().end(); ++it) {
      if (entry.get() != NULL && entry->GetArena() != NULL) {
        entry.release();
      }
      entry.reset(labels_.NewEntryWrapper(it->first, it->second));
      target = ::google::protobuf::internal::WireFormatLite::
          WriteMessageNoVirtualToArray(
              1, *entry, target);
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        it->first.data(), it->first.length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "vqro.rpc.Series.LabelsEntry.key");
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        it->second.data(), it->second.length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "vqro.rpc.Series.LabelsEntry.value");
    }
    if (entry.get() != NULL && entry->GetArena() != NULL) {
      entry.release();
    }
  }

  // @@protoc_insertion_point(serialize_to_array_end:vqro.rpc.Series)
  return target;
}

int Series::ByteSize() const {
  int total_size = 0;

  // map<string, string> labels = 1;
  total_size += 1 * this->labels_size();
  {
    ::google::protobuf::scoped_ptr<Series_LabelsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->labels().begin();
        it != this->labels().end(); ++it) {
      if (entry.get() != NULL && entry->GetArena() != NULL) {
        entry.release();
      }
      entry.reset(labels_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
    if (entry.get() != NULL && entry->GetArena() != NULL) {
      entry.release();
    }
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Series::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Series* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Series>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Series::MergeFrom(const Series& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  labels_.MergeFrom(from.labels_);
}

void Series::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Series::CopyFrom(const Series& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Series::IsInitialized() const {

  return true;
}

void Series::Swap(Series* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Series temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void Series::UnsafeArenaSwap(Series* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Series::InternalSwap(Series* other) {
  labels_.Swap(&other->labels_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Series::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Series_descriptor_;
  metadata.reflection = Series_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Series

// map<string, string> labels = 1;
int Series::labels_size() const {
  return labels_.size();
}
void Series::clear_labels() {
  labels_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::std::string >&
Series::labels() const {
  // @@protoc_insertion_point(field_map:vqro.rpc.Series.labels)
  return labels_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::std::string >*
Series::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_map:vqro.rpc.Series.labels)
  return labels_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Datapoint::kTimestampFieldNumber;
const int Datapoint::kDurationFieldNumber;
const int Datapoint::kValueFieldNumber;
#endif  // !_MSC_VER

Datapoint::Datapoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vqro.rpc.Datapoint)
}

Datapoint::Datapoint(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vqro.rpc.Datapoint)
}

void Datapoint::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Datapoint::Datapoint(const Datapoint& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vqro.rpc.Datapoint)
}

void Datapoint::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  timestamp_ = GOOGLE_LONGLONG(0);
  duration_ = GOOGLE_LONGLONG(0);
  value_ = 0;
}

Datapoint::~Datapoint() {
  // @@protoc_insertion_point(destructor:vqro.rpc.Datapoint)
  SharedDtor();
}

void Datapoint::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  if (this != default_instance_) {
  }
}

void Datapoint::ArenaDtor(void* object) {
  Datapoint* _this = reinterpret_cast< Datapoint* >(object);
  (void)_this;
}
void Datapoint::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Datapoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Datapoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Datapoint_descriptor_;
}

const Datapoint& Datapoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_core_2eproto();
  return *default_instance_;
}

Datapoint* Datapoint::default_instance_ = NULL;

Datapoint* Datapoint::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<Datapoint>(arena);
}

void Datapoint::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Datapoint*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(timestamp_, value_);

#undef ZR_HELPER_
#undef ZR_

}

bool Datapoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vqro.rpc.Datapoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_duration;
        break;
      }

      // optional int64 duration = 2;
      case 2: {
        if (tag == 16) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &duration_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_value;
        break;
      }

      // optional double value = 3;
      case 3: {
        if (tag == 25) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vqro.rpc.Datapoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vqro.rpc.Datapoint)
  return false;
#undef DO_
}

void Datapoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vqro.rpc.Datapoint)
  // optional int64 timestamp = 1;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }

  // optional int64 duration = 2;
  if (this->duration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->duration(), output);
  }

  // optional double value = 3;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->value(), output);
  }

  // @@protoc_insertion_point(serialize_end:vqro.rpc.Datapoint)
}

::google::protobuf::uint8* Datapoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vqro.rpc.Datapoint)
  // optional int64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp(), target);
  }

  // optional int64 duration = 2;
  if (this->duration() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->duration(), target);
  }

  // optional double value = 3;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:vqro.rpc.Datapoint)
  return target;
}

int Datapoint::ByteSize() const {
  int total_size = 0;

  // optional int64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // optional int64 duration = 2;
  if (this->duration() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->duration());
  }

  // optional double value = 3;
  if (this->value() != 0) {
    total_size += 1 + 8;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Datapoint::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Datapoint* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Datapoint>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Datapoint::MergeFrom(const Datapoint& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.duration() != 0) {
    set_duration(from.duration());
  }
  if (from.value() != 0) {
    set_value(from.value());
  }
}

void Datapoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Datapoint::CopyFrom(const Datapoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Datapoint::IsInitialized() const {

  return true;
}

void Datapoint::Swap(Datapoint* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Datapoint temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void Datapoint::UnsafeArenaSwap(Datapoint* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Datapoint::InternalSwap(Datapoint* other) {
  std::swap(timestamp_, other->timestamp_);
  std::swap(duration_, other->duration_);
  std::swap(value_, other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Datapoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Datapoint_descriptor_;
  metadata.reflection = Datapoint_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Datapoint

// optional int64 timestamp = 1;
void Datapoint::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Datapoint::timestamp() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.Datapoint.timestamp)
  return timestamp_;
}
 void Datapoint::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:vqro.rpc.Datapoint.timestamp)
}

// optional int64 duration = 2;
void Datapoint::clear_duration() {
  duration_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Datapoint::duration() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.Datapoint.duration)
  return duration_;
}
 void Datapoint::set_duration(::google::protobuf::int64 value) {
  
  duration_ = value;
  // @@protoc_insertion_point(field_set:vqro.rpc.Datapoint.duration)
}

// optional double value = 3;
void Datapoint::clear_value() {
  value_ = 0;
}
 double Datapoint::value() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.Datapoint.value)
  return value_;
}
 void Datapoint::set_value(double value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:vqro.rpc.Datapoint.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int StatusMessage::kTextFieldNumber;
const int StatusMessage::kErrorFieldNumber;
const int StatusMessage::kGoAwayFieldNumber;
#endif  // !_MSC_VER

StatusMessage::StatusMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vqro.rpc.StatusMessage)
}

StatusMessage::StatusMessage(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vqro.rpc.StatusMessage)
}

void StatusMessage::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

StatusMessage::StatusMessage(const StatusMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vqro.rpc.StatusMessage)
}

void StatusMessage::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_ = false;
  go_away_ = false;
}

StatusMessage::~StatusMessage() {
  // @@protoc_insertion_point(destructor:vqro.rpc.StatusMessage)
  SharedDtor();
}

void StatusMessage::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  text_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (this != default_instance_) {
  }
}

void StatusMessage::ArenaDtor(void* object) {
  StatusMessage* _this = reinterpret_cast< StatusMessage* >(object);
  (void)_this;
}
void StatusMessage::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void StatusMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StatusMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatusMessage_descriptor_;
}

const StatusMessage& StatusMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_core_2eproto();
  return *default_instance_;
}

StatusMessage* StatusMessage::default_instance_ = NULL;

StatusMessage* StatusMessage::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<StatusMessage>(arena);
}

void StatusMessage::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<StatusMessage*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(error_, go_away_);
  text_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());

#undef ZR_HELPER_
#undef ZR_

}

bool StatusMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vqro.rpc.StatusMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string text = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vqro.rpc.StatusMessage.text"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_error;
        break;
      }

      // optional bool error = 2;
      case 2: {
        if (tag == 16) {
         parse_error:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &error_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_go_away;
        break;
      }

      // optional bool go_away = 3;
      case 3: {
        if (tag == 24) {
         parse_go_away:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &go_away_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vqro.rpc.StatusMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vqro.rpc.StatusMessage)
  return false;
#undef DO_
}

void StatusMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vqro.rpc.StatusMessage)
  // optional string text = 1;
  if (this->text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vqro.rpc.StatusMessage.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->text(), output);
  }

  // optional bool error = 2;
  if (this->error() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->error(), output);
  }

  // optional bool go_away = 3;
  if (this->go_away() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->go_away(), output);
  }

  // @@protoc_insertion_point(serialize_end:vqro.rpc.StatusMessage)
}

::google::protobuf::uint8* StatusMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vqro.rpc.StatusMessage)
  // optional string text = 1;
  if (this->text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vqro.rpc.StatusMessage.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->text(), target);
  }

  // optional bool error = 2;
  if (this->error() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->error(), target);
  }

  // optional bool go_away = 3;
  if (this->go_away() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->go_away(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:vqro.rpc.StatusMessage)
  return target;
}

int StatusMessage::ByteSize() const {
  int total_size = 0;

  // optional string text = 1;
  if (this->text().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->text());
  }

  // optional bool error = 2;
  if (this->error() != 0) {
    total_size += 1 + 1;
  }

  // optional bool go_away = 3;
  if (this->go_away() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatusMessage::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const StatusMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StatusMessage>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StatusMessage::MergeFrom(const StatusMessage& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.text().size() > 0) {
    set_text(from.text());
  }
  if (from.error() != 0) {
    set_error(from.error());
  }
  if (from.go_away() != 0) {
    set_go_away(from.go_away());
  }
}

void StatusMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatusMessage::CopyFrom(const StatusMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusMessage::IsInitialized() const {

  return true;
}

void StatusMessage::Swap(StatusMessage* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    StatusMessage temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void StatusMessage::UnsafeArenaSwap(StatusMessage* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void StatusMessage::InternalSwap(StatusMessage* other) {
  text_.Swap(&other->text_);
  std::swap(error_, other->error_);
  std::swap(go_away_, other->go_away_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StatusMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StatusMessage_descriptor_;
  metadata.reflection = StatusMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StatusMessage

// optional string text = 1;
void StatusMessage::clear_text() {
  text_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& StatusMessage::text() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.StatusMessage.text)
  return text_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StatusMessage::set_text(const ::std::string& value) {
  
  text_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:vqro.rpc.StatusMessage.text)
}
 void StatusMessage::set_text(const char* value) {
  
  text_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:vqro.rpc.StatusMessage.text)
}
 void StatusMessage::set_text(const char* value,
    size_t size) {
  
  text_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:vqro.rpc.StatusMessage.text)
}
 ::std::string* StatusMessage::mutable_text() {
  
  // @@protoc_insertion_point(field_mutable:vqro.rpc.StatusMessage.text)
  return text_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* StatusMessage::release_text() {
  
  return text_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* StatusMessage::unsafe_arena_release_text() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return text_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void StatusMessage::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    
  } else {
    
  }
  text_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:vqro.rpc.StatusMessage.text)
}
 void StatusMessage::unsafe_arena_set_allocated_text(
    ::std::string* text) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (text != NULL) {
    
  } else {
    
  }
  text_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      text, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:vqro.rpc.StatusMessage.text)
}

// optional bool error = 2;
void StatusMessage::clear_error() {
  error_ = false;
}
 bool StatusMessage::error() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.StatusMessage.error)
  return error_;
}
 void StatusMessage::set_error(bool value) {
  
  error_ = value;
  // @@protoc_insertion_point(field_set:vqro.rpc.StatusMessage.error)
}

// optional bool go_away = 3;
void StatusMessage::clear_go_away() {
  go_away_ = false;
}
 bool StatusMessage::go_away() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.StatusMessage.go_away)
  return go_away_;
}
 void StatusMessage::set_go_away(bool value) {
  
  go_away_ = value;
  // @@protoc_insertion_point(field_set:vqro.rpc.StatusMessage.go_away)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace rpc
}  // namespace vqro

// @@protoc_insertion_point(global_scope)
