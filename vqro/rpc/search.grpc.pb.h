// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: search.proto
#ifndef GRPC_search_2eproto__INCLUDED
#define GRPC_search_2eproto__INCLUDED

#include "search.pb.h"

#include <grpc++/support/async_stream.h>
#include <grpc++/impl/rpc_method.h>
#include <grpc++/impl/proto_utils.h>
#include <grpc++/impl/service_type.h>
#include <grpc++/support/async_unary_call.h>
#include <grpc++/support/status.h>
#include <grpc++/support/stub_options.h>
#include <grpc++/support/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class RpcService;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace vqro {
namespace rpc {

class VaqueroSearch GRPC_FINAL {
 public:
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    std::unique_ptr< ::grpc::ClientReaderInterface< ::vqro::rpc::SearchSeriesResults>> SearchSeries(::grpc::ClientContext* context, const ::vqro::rpc::SeriesQuery& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::vqro::rpc::SearchSeriesResults>>(SearchSeriesRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::vqro::rpc::SearchSeriesResults>> AsyncSearchSeries(::grpc::ClientContext* context, const ::vqro::rpc::SeriesQuery& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::vqro::rpc::SearchSeriesResults>>(AsyncSearchSeriesRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::vqro::rpc::SearchLabelsResults>> SearchLabels(::grpc::ClientContext* context, const ::vqro::rpc::LabelsQuery& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::vqro::rpc::SearchLabelsResults>>(SearchLabelsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::vqro::rpc::SearchLabelsResults>> AsyncSearchLabels(::grpc::ClientContext* context, const ::vqro::rpc::LabelsQuery& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::vqro::rpc::SearchLabelsResults>>(AsyncSearchLabelsRaw(context, request, cq, tag));
    }
  private:
    virtual ::grpc::ClientReaderInterface< ::vqro::rpc::SearchSeriesResults>* SearchSeriesRaw(::grpc::ClientContext* context, const ::vqro::rpc::SeriesQuery& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::vqro::rpc::SearchSeriesResults>* AsyncSearchSeriesRaw(::grpc::ClientContext* context, const ::vqro::rpc::SeriesQuery& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientReaderInterface< ::vqro::rpc::SearchLabelsResults>* SearchLabelsRaw(::grpc::ClientContext* context, const ::vqro::rpc::LabelsQuery& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::vqro::rpc::SearchLabelsResults>* AsyncSearchLabelsRaw(::grpc::ClientContext* context, const ::vqro::rpc::LabelsQuery& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
  };
  class Stub GRPC_FINAL : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::Channel>& channel);
    std::unique_ptr< ::grpc::ClientReader< ::vqro::rpc::SearchSeriesResults>> SearchSeries(::grpc::ClientContext* context, const ::vqro::rpc::SeriesQuery& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::vqro::rpc::SearchSeriesResults>>(SearchSeriesRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::vqro::rpc::SearchSeriesResults>> AsyncSearchSeries(::grpc::ClientContext* context, const ::vqro::rpc::SeriesQuery& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::vqro::rpc::SearchSeriesResults>>(AsyncSearchSeriesRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientReader< ::vqro::rpc::SearchLabelsResults>> SearchLabels(::grpc::ClientContext* context, const ::vqro::rpc::LabelsQuery& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::vqro::rpc::SearchLabelsResults>>(SearchLabelsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::vqro::rpc::SearchLabelsResults>> AsyncSearchLabels(::grpc::ClientContext* context, const ::vqro::rpc::LabelsQuery& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::vqro::rpc::SearchLabelsResults>>(AsyncSearchLabelsRaw(context, request, cq, tag));
    }

   private:
    std::shared_ptr< ::grpc::Channel> channel_;
    ::grpc::ClientReader< ::vqro::rpc::SearchSeriesResults>* SearchSeriesRaw(::grpc::ClientContext* context, const ::vqro::rpc::SeriesQuery& request) GRPC_OVERRIDE;
    ::grpc::ClientAsyncReader< ::vqro::rpc::SearchSeriesResults>* AsyncSearchSeriesRaw(::grpc::ClientContext* context, const ::vqro::rpc::SeriesQuery& request, ::grpc::CompletionQueue* cq, void* tag) GRPC_OVERRIDE;
    ::grpc::ClientReader< ::vqro::rpc::SearchLabelsResults>* SearchLabelsRaw(::grpc::ClientContext* context, const ::vqro::rpc::LabelsQuery& request) GRPC_OVERRIDE;
    ::grpc::ClientAsyncReader< ::vqro::rpc::SearchLabelsResults>* AsyncSearchLabelsRaw(::grpc::ClientContext* context, const ::vqro::rpc::LabelsQuery& request, ::grpc::CompletionQueue* cq, void* tag) GRPC_OVERRIDE;
    const ::grpc::RpcMethod rpcmethod_SearchSeries_;
    const ::grpc::RpcMethod rpcmethod_SearchLabels_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::Channel>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::SynchronousService {
   public:
    Service() : service_(nullptr) {}
    virtual ~Service();
    virtual ::grpc::Status SearchSeries(::grpc::ServerContext* context, const ::vqro::rpc::SeriesQuery* request, ::grpc::ServerWriter< ::vqro::rpc::SearchSeriesResults>* writer);
    virtual ::grpc::Status SearchLabels(::grpc::ServerContext* context, const ::vqro::rpc::LabelsQuery* request, ::grpc::ServerWriter< ::vqro::rpc::SearchLabelsResults>* writer);
    ::grpc::RpcService* service() GRPC_OVERRIDE GRPC_FINAL;
   private:
    ::grpc::RpcService* service_;
  };
  class AsyncService GRPC_FINAL : public ::grpc::AsynchronousService {
   public:
    explicit AsyncService();
    ~AsyncService() {};
    void RequestSearchSeries(::grpc::ServerContext* context, ::vqro::rpc::SeriesQuery* request, ::grpc::ServerAsyncWriter< ::vqro::rpc::SearchSeriesResults>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
    void RequestSearchLabels(::grpc::ServerContext* context, ::vqro::rpc::LabelsQuery* request, ::grpc::ServerAsyncWriter< ::vqro::rpc::SearchLabelsResults>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
  };
};

}  // namespace rpc
}  // namespace vqro


#endif  // GRPC_search_2eproto__INCLUDED
