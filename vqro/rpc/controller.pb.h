// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: controller.proto

#ifndef PROTOBUF_controller_2eproto__INCLUDED
#define PROTOBUF_controller_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "core.pb.h"
#include "search.pb.h"
// @@protoc_insertion_point(includes)

namespace vqro {
namespace rpc {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_controller_2eproto();
void protobuf_AssignDesc_controller_2eproto();
void protobuf_ShutdownFile_controller_2eproto();

class CellGlobalState;
class CellGlobalStateDiff;
class CellLocalState;
class ExchangeStateRequest;
class ExchangeStateResponse;
class LocateSeriesResults;
class Range;
class Server;
class ServerRanges;
class VaqueroMetrics;
class VaqueroState;

enum Server_AF {
  Server_AF_IPV4 = 0,
  Server_AF_IPV6 = 1,
  Server_AF_Server_AF_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Server_AF_Server_AF_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Server_AF_IsValid(int value);
const Server_AF Server_AF_AF_MIN = Server_AF_IPV4;
const Server_AF Server_AF_AF_MAX = Server_AF_IPV6;
const int Server_AF_AF_ARRAYSIZE = Server_AF_AF_MAX + 1;

const ::google::protobuf::EnumDescriptor* Server_AF_descriptor();
inline const ::std::string& Server_AF_Name(Server_AF value) {
  return ::google::protobuf::internal::NameOfEnum(
    Server_AF_descriptor(), value);
}
inline bool Server_AF_Parse(
    const ::std::string& name, Server_AF* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Server_AF>(
    Server_AF_descriptor(), name, value);
}
// ===================================================================

class LocateSeriesResults : public ::google::protobuf::Message {
 public:
  LocateSeriesResults();
  virtual ~LocateSeriesResults();

  LocateSeriesResults(const LocateSeriesResults& from);

  inline LocateSeriesResults& operator=(const LocateSeriesResults& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const LocateSeriesResults& default_instance();

  void UnsafeArenaSwap(LocateSeriesResults* other);
  void Swap(LocateSeriesResults* other);

  // implements Message ----------------------------------------------

  inline LocateSeriesResults* New() const { return New(NULL); }

  LocateSeriesResults* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LocateSeriesResults& from);
  void MergeFrom(const LocateSeriesResults& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LocateSeriesResults* other);
  protected:
  explicit LocateSeriesResults(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .vqro.rpc.Server servers = 1;
  int servers_size() const;
  void clear_servers();
  static const int kServersFieldNumber = 1;
  const ::vqro::rpc::Server& servers(int index) const;
  ::vqro::rpc::Server* mutable_servers(int index);
  ::vqro::rpc::Server* add_servers();
  ::google::protobuf::RepeatedPtrField< ::vqro::rpc::Server >*
      mutable_servers();
  const ::google::protobuf::RepeatedPtrField< ::vqro::rpc::Server >&
      servers() const;

  // optional .vqro.rpc.StatusMessage status = 2;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 2;
  private:
  void _slow_mutable_status();
  void _slow_set_allocated_status(
      ::google::protobuf::Arena* message_arena, ::vqro::rpc::StatusMessage** status);
  ::vqro::rpc::StatusMessage* _slow_release_status();
  public:
  const ::vqro::rpc::StatusMessage& status() const;
  ::vqro::rpc::StatusMessage* mutable_status();
  ::vqro::rpc::StatusMessage* release_status();
  void set_allocated_status(::vqro::rpc::StatusMessage* status);
  ::vqro::rpc::StatusMessage* unsafe_arena_release_status();
  void unsafe_arena_set_allocated_status(
      ::vqro::rpc::StatusMessage* status);

  // @@protoc_insertion_point(class_scope:vqro.rpc.LocateSeriesResults)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::vqro::rpc::Server > servers_;
  ::vqro::rpc::StatusMessage* status_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_controller_2eproto();
  friend void protobuf_AssignDesc_controller_2eproto();
  friend void protobuf_ShutdownFile_controller_2eproto();

  void InitAsDefaultInstance();
  static LocateSeriesResults* default_instance_;
};
// -------------------------------------------------------------------

class Server : public ::google::protobuf::Message {
 public:
  Server();
  virtual ~Server();

  Server(const Server& from);

  inline Server& operator=(const Server& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const Server& default_instance();

  void UnsafeArenaSwap(Server* other);
  void Swap(Server* other);

  // implements Message ----------------------------------------------

  inline Server* New() const { return New(NULL); }

  Server* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Server& from);
  void MergeFrom(const Server& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Server* other);
  protected:
  explicit Server(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Server_AF AF;
  static const AF IPV4 = Server_AF_IPV4;
  static const AF IPV6 = Server_AF_IPV6;
  static inline bool AF_IsValid(int value) {
    return Server_AF_IsValid(value);
  }
  static const AF AF_MIN =
    Server_AF_AF_MIN;
  static const AF AF_MAX =
    Server_AF_AF_MAX;
  static const int AF_ARRAYSIZE =
    Server_AF_AF_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  AF_descriptor() {
    return Server_AF_descriptor();
  }
  static inline const ::std::string& AF_Name(AF value) {
    return Server_AF_Name(value);
  }
  static inline bool AF_Parse(const ::std::string& name,
      AF* value) {
    return Server_AF_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);
  ::std::string* unsafe_arena_release_name();
  void unsafe_arena_set_allocated_name(
      ::std::string* name);

  // optional string address = 2;
  void clear_address();
  static const int kAddressFieldNumber = 2;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);
  ::std::string* unsafe_arena_release_address();
  void unsafe_arena_set_allocated_address(
      ::std::string* address);

  // optional .vqro.rpc.Server.AF address_family = 3;
  void clear_address_family();
  static const int kAddressFamilyFieldNumber = 3;
  ::vqro::rpc::Server_AF address_family() const;
  void set_address_family(::vqro::rpc::Server_AF value);

  // optional int32 port = 4;
  void clear_port();
  static const int kPortFieldNumber = 4;
  ::google::protobuf::int32 port() const;
  void set_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:vqro.rpc.Server)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  int address_family_;
  ::google::protobuf::int32 port_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_controller_2eproto();
  friend void protobuf_AssignDesc_controller_2eproto();
  friend void protobuf_ShutdownFile_controller_2eproto();

  void InitAsDefaultInstance();
  static Server* default_instance_;
};
// -------------------------------------------------------------------

class Range : public ::google::protobuf::Message {
 public:
  Range();
  virtual ~Range();

  Range(const Range& from);

  inline Range& operator=(const Range& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const Range& default_instance();

  void UnsafeArenaSwap(Range* other);
  void Swap(Range* other);

  // implements Message ----------------------------------------------

  inline Range* New() const { return New(NULL); }

  Range* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Range& from);
  void MergeFrom(const Range& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Range* other);
  protected:
  explicit Range(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 lower_bound = 1;
  void clear_lower_bound();
  static const int kLowerBoundFieldNumber = 1;
  ::google::protobuf::int32 lower_bound() const;
  void set_lower_bound(::google::protobuf::int32 value);

  // optional int32 upper_bound = 2;
  void clear_upper_bound();
  static const int kUpperBoundFieldNumber = 2;
  ::google::protobuf::int32 upper_bound() const;
  void set_upper_bound(::google::protobuf::int32 value);

  // optional bool not_synced = 3;
  void clear_not_synced();
  static const int kNotSyncedFieldNumber = 3;
  bool not_synced() const;
  void set_not_synced(bool value);

  // @@protoc_insertion_point(class_scope:vqro.rpc.Range)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool _is_default_instance_;
  ::google::protobuf::int32 lower_bound_;
  ::google::protobuf::int32 upper_bound_;
  bool not_synced_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_controller_2eproto();
  friend void protobuf_AssignDesc_controller_2eproto();
  friend void protobuf_ShutdownFile_controller_2eproto();

  void InitAsDefaultInstance();
  static Range* default_instance_;
};
// -------------------------------------------------------------------

class ServerRanges : public ::google::protobuf::Message {
 public:
  ServerRanges();
  virtual ~ServerRanges();

  ServerRanges(const ServerRanges& from);

  inline ServerRanges& operator=(const ServerRanges& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerRanges& default_instance();

  void UnsafeArenaSwap(ServerRanges* other);
  void Swap(ServerRanges* other);

  // implements Message ----------------------------------------------

  inline ServerRanges* New() const { return New(NULL); }

  ServerRanges* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServerRanges& from);
  void MergeFrom(const ServerRanges& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ServerRanges* other);
  protected:
  explicit ServerRanges(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .vqro.rpc.Server server = 1;
  bool has_server() const;
  void clear_server();
  static const int kServerFieldNumber = 1;
  private:
  void _slow_mutable_server();
  void _slow_set_allocated_server(
      ::google::protobuf::Arena* message_arena, ::vqro::rpc::Server** server);
  ::vqro::rpc::Server* _slow_release_server();
  public:
  const ::vqro::rpc::Server& server() const;
  ::vqro::rpc::Server* mutable_server();
  ::vqro::rpc::Server* release_server();
  void set_allocated_server(::vqro::rpc::Server* server);
  ::vqro::rpc::Server* unsafe_arena_release_server();
  void unsafe_arena_set_allocated_server(
      ::vqro::rpc::Server* server);

  // repeated .vqro.rpc.Range range = 2;
  int range_size() const;
  void clear_range();
  static const int kRangeFieldNumber = 2;
  const ::vqro::rpc::Range& range(int index) const;
  ::vqro::rpc::Range* mutable_range(int index);
  ::vqro::rpc::Range* add_range();
  ::google::protobuf::RepeatedPtrField< ::vqro::rpc::Range >*
      mutable_range();
  const ::google::protobuf::RepeatedPtrField< ::vqro::rpc::Range >&
      range() const;

  // @@protoc_insertion_point(class_scope:vqro.rpc.ServerRanges)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool _is_default_instance_;
  ::vqro::rpc::Server* server_;
  ::google::protobuf::RepeatedPtrField< ::vqro::rpc::Range > range_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_controller_2eproto();
  friend void protobuf_AssignDesc_controller_2eproto();
  friend void protobuf_ShutdownFile_controller_2eproto();

  void InitAsDefaultInstance();
  static ServerRanges* default_instance_;
};
// -------------------------------------------------------------------

class ExchangeStateRequest : public ::google::protobuf::Message {
 public:
  ExchangeStateRequest();
  virtual ~ExchangeStateRequest();

  ExchangeStateRequest(const ExchangeStateRequest& from);

  inline ExchangeStateRequest& operator=(const ExchangeStateRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ExchangeStateRequest& default_instance();

  void UnsafeArenaSwap(ExchangeStateRequest* other);
  void Swap(ExchangeStateRequest* other);

  // implements Message ----------------------------------------------

  inline ExchangeStateRequest* New() const { return New(NULL); }

  ExchangeStateRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ExchangeStateRequest& from);
  void MergeFrom(const ExchangeStateRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ExchangeStateRequest* other);
  protected:
  explicit ExchangeStateRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .vqro.rpc.CellLocalState local_state = 1;
  bool has_local_state() const;
  void clear_local_state();
  static const int kLocalStateFieldNumber = 1;
  private:
  void _slow_mutable_local_state();
  void _slow_set_allocated_local_state(
      ::google::protobuf::Arena* message_arena, ::vqro::rpc::CellLocalState** local_state);
  ::vqro::rpc::CellLocalState* _slow_release_local_state();
  public:
  const ::vqro::rpc::CellLocalState& local_state() const;
  ::vqro::rpc::CellLocalState* mutable_local_state();
  ::vqro::rpc::CellLocalState* release_local_state();
  void set_allocated_local_state(::vqro::rpc::CellLocalState* local_state);
  ::vqro::rpc::CellLocalState* unsafe_arena_release_local_state();
  void unsafe_arena_set_allocated_local_state(
      ::vqro::rpc::CellLocalState* local_state);

  // optional int64 only_diff_since_revision = 2;
  void clear_only_diff_since_revision();
  static const int kOnlyDiffSinceRevisionFieldNumber = 2;
  ::google::protobuf::int64 only_diff_since_revision() const;
  void set_only_diff_since_revision(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:vqro.rpc.ExchangeStateRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool _is_default_instance_;
  ::vqro::rpc::CellLocalState* local_state_;
  ::google::protobuf::int64 only_diff_since_revision_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_controller_2eproto();
  friend void protobuf_AssignDesc_controller_2eproto();
  friend void protobuf_ShutdownFile_controller_2eproto();

  void InitAsDefaultInstance();
  static ExchangeStateRequest* default_instance_;
};
// -------------------------------------------------------------------

class ExchangeStateResponse : public ::google::protobuf::Message {
 public:
  ExchangeStateResponse();
  virtual ~ExchangeStateResponse();

  ExchangeStateResponse(const ExchangeStateResponse& from);

  inline ExchangeStateResponse& operator=(const ExchangeStateResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ExchangeStateResponse& default_instance();

  enum StateCase {
    kFull = 1,
    kDiff = 2,
    STATE_NOT_SET = 0,
  };

  void UnsafeArenaSwap(ExchangeStateResponse* other);
  void Swap(ExchangeStateResponse* other);

  // implements Message ----------------------------------------------

  inline ExchangeStateResponse* New() const { return New(NULL); }

  ExchangeStateResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ExchangeStateResponse& from);
  void MergeFrom(const ExchangeStateResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ExchangeStateResponse* other);
  protected:
  explicit ExchangeStateResponse(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .vqro.rpc.CellGlobalState full = 1;
  bool has_full() const;
  void clear_full();
  static const int kFullFieldNumber = 1;
  private:
  void _slow_mutable_full();
  void _slow_set_allocated_full(
      ::google::protobuf::Arena* message_arena, ::vqro::rpc::CellGlobalState** full);
  ::vqro::rpc::CellGlobalState* _slow_release_full();
  public:
  const ::vqro::rpc::CellGlobalState& full() const;
  ::vqro::rpc::CellGlobalState* mutable_full();
  ::vqro::rpc::CellGlobalState* release_full();
  void set_allocated_full(::vqro::rpc::CellGlobalState* full);
  ::vqro::rpc::CellGlobalState* unsafe_arena_release_full();
  void unsafe_arena_set_allocated_full(
      ::vqro::rpc::CellGlobalState* full);

  // optional .vqro.rpc.CellGlobalStateDiff diff = 2;
  bool has_diff() const;
  void clear_diff();
  static const int kDiffFieldNumber = 2;
  private:
  void _slow_mutable_diff();
  void _slow_set_allocated_diff(
      ::google::protobuf::Arena* message_arena, ::vqro::rpc::CellGlobalStateDiff** diff);
  ::vqro::rpc::CellGlobalStateDiff* _slow_release_diff();
  public:
  const ::vqro::rpc::CellGlobalStateDiff& diff() const;
  ::vqro::rpc::CellGlobalStateDiff* mutable_diff();
  ::vqro::rpc::CellGlobalStateDiff* release_diff();
  void set_allocated_diff(::vqro::rpc::CellGlobalStateDiff* diff);
  ::vqro::rpc::CellGlobalStateDiff* unsafe_arena_release_diff();
  void unsafe_arena_set_allocated_diff(
      ::vqro::rpc::CellGlobalStateDiff* diff);

  StateCase state_case() const;
  // @@protoc_insertion_point(class_scope:vqro.rpc.ExchangeStateResponse)
 private:
  inline void set_has_full();
  inline void set_has_diff();

  inline bool has_state() const;
  void clear_state();
  inline void clear_has_state();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool _is_default_instance_;
  union StateUnion {
    StateUnion() {}
    ::vqro::rpc::CellGlobalState* full_;
    ::vqro::rpc::CellGlobalStateDiff* diff_;
  } state_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_controller_2eproto();
  friend void protobuf_AssignDesc_controller_2eproto();
  friend void protobuf_ShutdownFile_controller_2eproto();

  void InitAsDefaultInstance();
  static ExchangeStateResponse* default_instance_;
};
// -------------------------------------------------------------------

class CellGlobalState : public ::google::protobuf::Message {
 public:
  CellGlobalState();
  virtual ~CellGlobalState();

  CellGlobalState(const CellGlobalState& from);

  inline CellGlobalState& operator=(const CellGlobalState& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const CellGlobalState& default_instance();

  void UnsafeArenaSwap(CellGlobalState* other);
  void Swap(CellGlobalState* other);

  // implements Message ----------------------------------------------

  inline CellGlobalState* New() const { return New(NULL); }

  CellGlobalState* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CellGlobalState& from);
  void MergeFrom(const CellGlobalState& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CellGlobalState* other);
  protected:
  explicit CellGlobalState(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 revision = 1;
  void clear_revision();
  static const int kRevisionFieldNumber = 1;
  ::google::protobuf::int64 revision() const;
  void set_revision(::google::protobuf::int64 value);

  // repeated .vqro.rpc.Server controllers = 2;
  int controllers_size() const;
  void clear_controllers();
  static const int kControllersFieldNumber = 2;
  const ::vqro::rpc::Server& controllers(int index) const;
  ::vqro::rpc::Server* mutable_controllers(int index);
  ::vqro::rpc::Server* add_controllers();
  ::google::protobuf::RepeatedPtrField< ::vqro::rpc::Server >*
      mutable_controllers();
  const ::google::protobuf::RepeatedPtrField< ::vqro::rpc::Server >&
      controllers() const;

  // repeated .vqro.rpc.ServerRanges range_assignments = 3;
  int range_assignments_size() const;
  void clear_range_assignments();
  static const int kRangeAssignmentsFieldNumber = 3;
  const ::vqro::rpc::ServerRanges& range_assignments(int index) const;
  ::vqro::rpc::ServerRanges* mutable_range_assignments(int index);
  ::vqro::rpc::ServerRanges* add_range_assignments();
  ::google::protobuf::RepeatedPtrField< ::vqro::rpc::ServerRanges >*
      mutable_range_assignments();
  const ::google::protobuf::RepeatedPtrField< ::vqro::rpc::ServerRanges >&
      range_assignments() const;

  // @@protoc_insertion_point(class_scope:vqro.rpc.CellGlobalState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool _is_default_instance_;
  ::google::protobuf::int64 revision_;
  ::google::protobuf::RepeatedPtrField< ::vqro::rpc::Server > controllers_;
  ::google::protobuf::RepeatedPtrField< ::vqro::rpc::ServerRanges > range_assignments_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_controller_2eproto();
  friend void protobuf_AssignDesc_controller_2eproto();
  friend void protobuf_ShutdownFile_controller_2eproto();

  void InitAsDefaultInstance();
  static CellGlobalState* default_instance_;
};
// -------------------------------------------------------------------

class CellGlobalStateDiff : public ::google::protobuf::Message {
 public:
  CellGlobalStateDiff();
  virtual ~CellGlobalStateDiff();

  CellGlobalStateDiff(const CellGlobalStateDiff& from);

  inline CellGlobalStateDiff& operator=(const CellGlobalStateDiff& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const CellGlobalStateDiff& default_instance();

  void UnsafeArenaSwap(CellGlobalStateDiff* other);
  void Swap(CellGlobalStateDiff* other);

  // implements Message ----------------------------------------------

  inline CellGlobalStateDiff* New() const { return New(NULL); }

  CellGlobalStateDiff* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CellGlobalStateDiff& from);
  void MergeFrom(const CellGlobalStateDiff& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CellGlobalStateDiff* other);
  protected:
  explicit CellGlobalStateDiff(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 from_revision = 1;
  void clear_from_revision();
  static const int kFromRevisionFieldNumber = 1;
  ::google::protobuf::int64 from_revision() const;
  void set_from_revision(::google::protobuf::int64 value);

  // optional int64 to_revision = 2;
  void clear_to_revision();
  static const int kToRevisionFieldNumber = 2;
  ::google::protobuf::int64 to_revision() const;
  void set_to_revision(::google::protobuf::int64 value);

  // repeated .vqro.rpc.ServerRanges additions = 3;
  int additions_size() const;
  void clear_additions();
  static const int kAdditionsFieldNumber = 3;
  const ::vqro::rpc::ServerRanges& additions(int index) const;
  ::vqro::rpc::ServerRanges* mutable_additions(int index);
  ::vqro::rpc::ServerRanges* add_additions();
  ::google::protobuf::RepeatedPtrField< ::vqro::rpc::ServerRanges >*
      mutable_additions();
  const ::google::protobuf::RepeatedPtrField< ::vqro::rpc::ServerRanges >&
      additions() const;

  // repeated .vqro.rpc.ServerRanges removals = 4;
  int removals_size() const;
  void clear_removals();
  static const int kRemovalsFieldNumber = 4;
  const ::vqro::rpc::ServerRanges& removals(int index) const;
  ::vqro::rpc::ServerRanges* mutable_removals(int index);
  ::vqro::rpc::ServerRanges* add_removals();
  ::google::protobuf::RepeatedPtrField< ::vqro::rpc::ServerRanges >*
      mutable_removals();
  const ::google::protobuf::RepeatedPtrField< ::vqro::rpc::ServerRanges >&
      removals() const;

  // @@protoc_insertion_point(class_scope:vqro.rpc.CellGlobalStateDiff)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool _is_default_instance_;
  ::google::protobuf::int64 from_revision_;
  ::google::protobuf::int64 to_revision_;
  ::google::protobuf::RepeatedPtrField< ::vqro::rpc::ServerRanges > additions_;
  ::google::protobuf::RepeatedPtrField< ::vqro::rpc::ServerRanges > removals_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_controller_2eproto();
  friend void protobuf_AssignDesc_controller_2eproto();
  friend void protobuf_ShutdownFile_controller_2eproto();

  void InitAsDefaultInstance();
  static CellGlobalStateDiff* default_instance_;
};
// -------------------------------------------------------------------

class CellLocalState : public ::google::protobuf::Message {
 public:
  CellLocalState();
  virtual ~CellLocalState();

  CellLocalState(const CellLocalState& from);

  inline CellLocalState& operator=(const CellLocalState& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const CellLocalState& default_instance();

  void UnsafeArenaSwap(CellLocalState* other);
  void Swap(CellLocalState* other);

  // implements Message ----------------------------------------------

  inline CellLocalState* New() const { return New(NULL); }

  CellLocalState* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CellLocalState& from);
  void MergeFrom(const CellLocalState& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CellLocalState* other);
  protected:
  explicit CellLocalState(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .vqro.rpc.VaqueroState vaqueros = 1;
  int vaqueros_size() const;
  void clear_vaqueros();
  static const int kVaquerosFieldNumber = 1;
  const ::vqro::rpc::VaqueroState& vaqueros(int index) const;
  ::vqro::rpc::VaqueroState* mutable_vaqueros(int index);
  ::vqro::rpc::VaqueroState* add_vaqueros();
  ::google::protobuf::RepeatedPtrField< ::vqro::rpc::VaqueroState >*
      mutable_vaqueros();
  const ::google::protobuf::RepeatedPtrField< ::vqro::rpc::VaqueroState >&
      vaqueros() const;

  // @@protoc_insertion_point(class_scope:vqro.rpc.CellLocalState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::vqro::rpc::VaqueroState > vaqueros_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_controller_2eproto();
  friend void protobuf_AssignDesc_controller_2eproto();
  friend void protobuf_ShutdownFile_controller_2eproto();

  void InitAsDefaultInstance();
  static CellLocalState* default_instance_;
};
// -------------------------------------------------------------------

class VaqueroState : public ::google::protobuf::Message {
 public:
  VaqueroState();
  virtual ~VaqueroState();

  VaqueroState(const VaqueroState& from);

  inline VaqueroState& operator=(const VaqueroState& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const VaqueroState& default_instance();

  void UnsafeArenaSwap(VaqueroState* other);
  void Swap(VaqueroState* other);

  // implements Message ----------------------------------------------

  inline VaqueroState* New() const { return New(NULL); }

  VaqueroState* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VaqueroState& from);
  void MergeFrom(const VaqueroState& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VaqueroState* other);
  protected:
  explicit VaqueroState(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .vqro.rpc.Server server = 1;
  bool has_server() const;
  void clear_server();
  static const int kServerFieldNumber = 1;
  private:
  void _slow_mutable_server();
  void _slow_set_allocated_server(
      ::google::protobuf::Arena* message_arena, ::vqro::rpc::Server** server);
  ::vqro::rpc::Server* _slow_release_server();
  public:
  const ::vqro::rpc::Server& server() const;
  ::vqro::rpc::Server* mutable_server();
  ::vqro::rpc::Server* release_server();
  void set_allocated_server(::vqro::rpc::Server* server);
  ::vqro::rpc::Server* unsafe_arena_release_server();
  void unsafe_arena_set_allocated_server(
      ::vqro::rpc::Server* server);

  // optional .vqro.rpc.VaqueroMetrics metrics = 2;
  bool has_metrics() const;
  void clear_metrics();
  static const int kMetricsFieldNumber = 2;
  private:
  void _slow_mutable_metrics();
  void _slow_set_allocated_metrics(
      ::google::protobuf::Arena* message_arena, ::vqro::rpc::VaqueroMetrics** metrics);
  ::vqro::rpc::VaqueroMetrics* _slow_release_metrics();
  public:
  const ::vqro::rpc::VaqueroMetrics& metrics() const;
  ::vqro::rpc::VaqueroMetrics* mutable_metrics();
  ::vqro::rpc::VaqueroMetrics* release_metrics();
  void set_allocated_metrics(::vqro::rpc::VaqueroMetrics* metrics);
  ::vqro::rpc::VaqueroMetrics* unsafe_arena_release_metrics();
  void unsafe_arena_set_allocated_metrics(
      ::vqro::rpc::VaqueroMetrics* metrics);

  // repeated .vqro.rpc.Series new_series = 3;
  int new_series_size() const;
  void clear_new_series();
  static const int kNewSeriesFieldNumber = 3;
  const ::vqro::rpc::Series& new_series(int index) const;
  ::vqro::rpc::Series* mutable_new_series(int index);
  ::vqro::rpc::Series* add_new_series();
  ::google::protobuf::RepeatedPtrField< ::vqro::rpc::Series >*
      mutable_new_series();
  const ::google::protobuf::RepeatedPtrField< ::vqro::rpc::Series >&
      new_series() const;

  // repeated .vqro.rpc.Series expired_series = 4;
  int expired_series_size() const;
  void clear_expired_series();
  static const int kExpiredSeriesFieldNumber = 4;
  const ::vqro::rpc::Series& expired_series(int index) const;
  ::vqro::rpc::Series* mutable_expired_series(int index);
  ::vqro::rpc::Series* add_expired_series();
  ::google::protobuf::RepeatedPtrField< ::vqro::rpc::Series >*
      mutable_expired_series();
  const ::google::protobuf::RepeatedPtrField< ::vqro::rpc::Series >&
      expired_series() const;

  // @@protoc_insertion_point(class_scope:vqro.rpc.VaqueroState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool _is_default_instance_;
  ::vqro::rpc::Server* server_;
  ::vqro::rpc::VaqueroMetrics* metrics_;
  ::google::protobuf::RepeatedPtrField< ::vqro::rpc::Series > new_series_;
  ::google::protobuf::RepeatedPtrField< ::vqro::rpc::Series > expired_series_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_controller_2eproto();
  friend void protobuf_AssignDesc_controller_2eproto();
  friend void protobuf_ShutdownFile_controller_2eproto();

  void InitAsDefaultInstance();
  static VaqueroState* default_instance_;
};
// -------------------------------------------------------------------

class VaqueroMetrics : public ::google::protobuf::Message {
 public:
  VaqueroMetrics();
  virtual ~VaqueroMetrics();

  VaqueroMetrics(const VaqueroMetrics& from);

  inline VaqueroMetrics& operator=(const VaqueroMetrics& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const VaqueroMetrics& default_instance();

  void UnsafeArenaSwap(VaqueroMetrics* other);
  void Swap(VaqueroMetrics* other);

  // implements Message ----------------------------------------------

  inline VaqueroMetrics* New() const { return New(NULL); }

  VaqueroMetrics* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VaqueroMetrics& from);
  void MergeFrom(const VaqueroMetrics& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VaqueroMetrics* other);
  protected:
  explicit VaqueroMetrics(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double cpu_usage = 1;
  void clear_cpu_usage();
  static const int kCpuUsageFieldNumber = 1;
  double cpu_usage() const;
  void set_cpu_usage(double value);

  // optional int32 num_series_written_to = 2;
  void clear_num_series_written_to();
  static const int kNumSeriesWrittenToFieldNumber = 2;
  ::google::protobuf::int32 num_series_written_to() const;
  void set_num_series_written_to(::google::protobuf::int32 value);

  // optional int32 num_datapoints_written = 3;
  void clear_num_datapoints_written();
  static const int kNumDatapointsWrittenFieldNumber = 3;
  ::google::protobuf::int32 num_datapoints_written() const;
  void set_num_datapoints_written(::google::protobuf::int32 value);

  // optional int32 storage_bytes_change = 4;
  void clear_storage_bytes_change();
  static const int kStorageBytesChangeFieldNumber = 4;
  ::google::protobuf::int32 storage_bytes_change() const;
  void set_storage_bytes_change(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:vqro.rpc.VaqueroMetrics)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool _is_default_instance_;
  double cpu_usage_;
  ::google::protobuf::int32 num_series_written_to_;
  ::google::protobuf::int32 num_datapoints_written_;
  ::google::protobuf::int32 storage_bytes_change_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_controller_2eproto();
  friend void protobuf_AssignDesc_controller_2eproto();
  friend void protobuf_ShutdownFile_controller_2eproto();

  void InitAsDefaultInstance();
  static VaqueroMetrics* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// LocateSeriesResults

// repeated .vqro.rpc.Server servers = 1;
inline int LocateSeriesResults::servers_size() const {
  return servers_.size();
}
inline void LocateSeriesResults::clear_servers() {
  servers_.Clear();
}
inline const ::vqro::rpc::Server& LocateSeriesResults::servers(int index) const {
  // @@protoc_insertion_point(field_get:vqro.rpc.LocateSeriesResults.servers)
  return servers_.Get(index);
}
inline ::vqro::rpc::Server* LocateSeriesResults::mutable_servers(int index) {
  // @@protoc_insertion_point(field_mutable:vqro.rpc.LocateSeriesResults.servers)
  return servers_.Mutable(index);
}
inline ::vqro::rpc::Server* LocateSeriesResults::add_servers() {
  // @@protoc_insertion_point(field_add:vqro.rpc.LocateSeriesResults.servers)
  return servers_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::vqro::rpc::Server >*
LocateSeriesResults::mutable_servers() {
  // @@protoc_insertion_point(field_mutable_list:vqro.rpc.LocateSeriesResults.servers)
  return &servers_;
}
inline const ::google::protobuf::RepeatedPtrField< ::vqro::rpc::Server >&
LocateSeriesResults::servers() const {
  // @@protoc_insertion_point(field_list:vqro.rpc.LocateSeriesResults.servers)
  return servers_;
}

// optional .vqro.rpc.StatusMessage status = 2;
inline bool LocateSeriesResults::has_status() const {
  return !_is_default_instance_ && status_ != NULL;
}
inline void LocateSeriesResults::clear_status() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
}
inline const ::vqro::rpc::StatusMessage& LocateSeriesResults::status() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.LocateSeriesResults.status)
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
inline ::vqro::rpc::StatusMessage* LocateSeriesResults::mutable_status() {
  
  if (status_ == NULL) {
    _slow_mutable_status();
  }
  // @@protoc_insertion_point(field_mutable:vqro.rpc.LocateSeriesResults.status)
  return status_;
}
inline ::vqro::rpc::StatusMessage* LocateSeriesResults::release_status() {
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_status();
  } else {
    ::vqro::rpc::StatusMessage* temp = status_;
    status_ = NULL;
    return temp;
  }
}
inline  void LocateSeriesResults::set_allocated_status(::vqro::rpc::StatusMessage* status) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete status_;
  }
  if (status != NULL) {
    _slow_set_allocated_status(message_arena, &status);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:vqro.rpc.LocateSeriesResults.status)
}

// -------------------------------------------------------------------

// Server

// optional string name = 1;
inline void Server::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& Server::name() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.Server.name)
  return name_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Server::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:vqro.rpc.Server.name)
}
inline void Server::set_name(const char* value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:vqro.rpc.Server.name)
}
inline void Server::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:vqro.rpc.Server.name)
}
inline ::std::string* Server::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:vqro.rpc.Server.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Server::release_name() {
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Server::unsafe_arena_release_name() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Server::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:vqro.rpc.Server.name)
}
inline void Server::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:vqro.rpc.Server.name)
}

// optional string address = 2;
inline void Server::clear_address() {
  address_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& Server::address() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.Server.address)
  return address_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Server::set_address(const ::std::string& value) {
  
  address_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:vqro.rpc.Server.address)
}
inline void Server::set_address(const char* value) {
  
  address_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:vqro.rpc.Server.address)
}
inline void Server::set_address(const char* value,
    size_t size) {
  
  address_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:vqro.rpc.Server.address)
}
inline ::std::string* Server::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:vqro.rpc.Server.address)
  return address_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Server::release_address() {
  
  return address_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Server::unsafe_arena_release_address() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return address_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Server::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:vqro.rpc.Server.address)
}
inline void Server::unsafe_arena_set_allocated_address(
    ::std::string* address) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (address != NULL) {
    
  } else {
    
  }
  address_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      address, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:vqro.rpc.Server.address)
}

// optional .vqro.rpc.Server.AF address_family = 3;
inline void Server::clear_address_family() {
  address_family_ = 0;
}
inline ::vqro::rpc::Server_AF Server::address_family() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.Server.address_family)
  return static_cast< ::vqro::rpc::Server_AF >(address_family_);
}
inline void Server::set_address_family(::vqro::rpc::Server_AF value) {
  
  address_family_ = value;
  // @@protoc_insertion_point(field_set:vqro.rpc.Server.address_family)
}

// optional int32 port = 4;
inline void Server::clear_port() {
  port_ = 0;
}
inline ::google::protobuf::int32 Server::port() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.Server.port)
  return port_;
}
inline void Server::set_port(::google::protobuf::int32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:vqro.rpc.Server.port)
}

// -------------------------------------------------------------------

// Range

// optional int32 lower_bound = 1;
inline void Range::clear_lower_bound() {
  lower_bound_ = 0;
}
inline ::google::protobuf::int32 Range::lower_bound() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.Range.lower_bound)
  return lower_bound_;
}
inline void Range::set_lower_bound(::google::protobuf::int32 value) {
  
  lower_bound_ = value;
  // @@protoc_insertion_point(field_set:vqro.rpc.Range.lower_bound)
}

// optional int32 upper_bound = 2;
inline void Range::clear_upper_bound() {
  upper_bound_ = 0;
}
inline ::google::protobuf::int32 Range::upper_bound() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.Range.upper_bound)
  return upper_bound_;
}
inline void Range::set_upper_bound(::google::protobuf::int32 value) {
  
  upper_bound_ = value;
  // @@protoc_insertion_point(field_set:vqro.rpc.Range.upper_bound)
}

// optional bool not_synced = 3;
inline void Range::clear_not_synced() {
  not_synced_ = false;
}
inline bool Range::not_synced() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.Range.not_synced)
  return not_synced_;
}
inline void Range::set_not_synced(bool value) {
  
  not_synced_ = value;
  // @@protoc_insertion_point(field_set:vqro.rpc.Range.not_synced)
}

// -------------------------------------------------------------------

// ServerRanges

// optional .vqro.rpc.Server server = 1;
inline bool ServerRanges::has_server() const {
  return !_is_default_instance_ && server_ != NULL;
}
inline void ServerRanges::clear_server() {
  if (GetArenaNoVirtual() == NULL && server_ != NULL) delete server_;
  server_ = NULL;
}
inline const ::vqro::rpc::Server& ServerRanges::server() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.ServerRanges.server)
  return server_ != NULL ? *server_ : *default_instance_->server_;
}
inline ::vqro::rpc::Server* ServerRanges::mutable_server() {
  
  if (server_ == NULL) {
    _slow_mutable_server();
  }
  // @@protoc_insertion_point(field_mutable:vqro.rpc.ServerRanges.server)
  return server_;
}
inline ::vqro::rpc::Server* ServerRanges::release_server() {
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_server();
  } else {
    ::vqro::rpc::Server* temp = server_;
    server_ = NULL;
    return temp;
  }
}
inline  void ServerRanges::set_allocated_server(::vqro::rpc::Server* server) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete server_;
  }
  if (server != NULL) {
    _slow_set_allocated_server(message_arena, &server);
  }
  server_ = server;
  if (server) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:vqro.rpc.ServerRanges.server)
}

// repeated .vqro.rpc.Range range = 2;
inline int ServerRanges::range_size() const {
  return range_.size();
}
inline void ServerRanges::clear_range() {
  range_.Clear();
}
inline const ::vqro::rpc::Range& ServerRanges::range(int index) const {
  // @@protoc_insertion_point(field_get:vqro.rpc.ServerRanges.range)
  return range_.Get(index);
}
inline ::vqro::rpc::Range* ServerRanges::mutable_range(int index) {
  // @@protoc_insertion_point(field_mutable:vqro.rpc.ServerRanges.range)
  return range_.Mutable(index);
}
inline ::vqro::rpc::Range* ServerRanges::add_range() {
  // @@protoc_insertion_point(field_add:vqro.rpc.ServerRanges.range)
  return range_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::vqro::rpc::Range >*
ServerRanges::mutable_range() {
  // @@protoc_insertion_point(field_mutable_list:vqro.rpc.ServerRanges.range)
  return &range_;
}
inline const ::google::protobuf::RepeatedPtrField< ::vqro::rpc::Range >&
ServerRanges::range() const {
  // @@protoc_insertion_point(field_list:vqro.rpc.ServerRanges.range)
  return range_;
}

// -------------------------------------------------------------------

// ExchangeStateRequest

// optional .vqro.rpc.CellLocalState local_state = 1;
inline bool ExchangeStateRequest::has_local_state() const {
  return !_is_default_instance_ && local_state_ != NULL;
}
inline void ExchangeStateRequest::clear_local_state() {
  if (GetArenaNoVirtual() == NULL && local_state_ != NULL) delete local_state_;
  local_state_ = NULL;
}
inline const ::vqro::rpc::CellLocalState& ExchangeStateRequest::local_state() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.ExchangeStateRequest.local_state)
  return local_state_ != NULL ? *local_state_ : *default_instance_->local_state_;
}
inline ::vqro::rpc::CellLocalState* ExchangeStateRequest::mutable_local_state() {
  
  if (local_state_ == NULL) {
    _slow_mutable_local_state();
  }
  // @@protoc_insertion_point(field_mutable:vqro.rpc.ExchangeStateRequest.local_state)
  return local_state_;
}
inline ::vqro::rpc::CellLocalState* ExchangeStateRequest::release_local_state() {
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_local_state();
  } else {
    ::vqro::rpc::CellLocalState* temp = local_state_;
    local_state_ = NULL;
    return temp;
  }
}
inline  void ExchangeStateRequest::set_allocated_local_state(::vqro::rpc::CellLocalState* local_state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete local_state_;
  }
  if (local_state != NULL) {
    _slow_set_allocated_local_state(message_arena, &local_state);
  }
  local_state_ = local_state;
  if (local_state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:vqro.rpc.ExchangeStateRequest.local_state)
}

// optional int64 only_diff_since_revision = 2;
inline void ExchangeStateRequest::clear_only_diff_since_revision() {
  only_diff_since_revision_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ExchangeStateRequest::only_diff_since_revision() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.ExchangeStateRequest.only_diff_since_revision)
  return only_diff_since_revision_;
}
inline void ExchangeStateRequest::set_only_diff_since_revision(::google::protobuf::int64 value) {
  
  only_diff_since_revision_ = value;
  // @@protoc_insertion_point(field_set:vqro.rpc.ExchangeStateRequest.only_diff_since_revision)
}

// -------------------------------------------------------------------

// ExchangeStateResponse

// optional .vqro.rpc.CellGlobalState full = 1;
inline bool ExchangeStateResponse::has_full() const {
  return state_case() == kFull;
}
inline void ExchangeStateResponse::set_has_full() {
  _oneof_case_[0] = kFull;
}
inline void ExchangeStateResponse::clear_full() {
  if (has_full()) {
    if (GetArenaNoVirtual() == NULL) {
      delete state_.full_;
    }
    clear_has_state();
  }
}
inline  const ::vqro::rpc::CellGlobalState& ExchangeStateResponse::full() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.ExchangeStateResponse.full)
  return has_full()
      ? *state_.full_
      : ::vqro::rpc::CellGlobalState::default_instance();
}
inline ::vqro::rpc::CellGlobalState* ExchangeStateResponse::mutable_full() {
  if (!has_full()) {
    clear_state();
    set_has_full();
    state_.full_ = 
      ::google::protobuf::Arena::CreateMessage< ::vqro::rpc::CellGlobalState >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:vqro.rpc.ExchangeStateResponse.full)
  return state_.full_;
}
inline ::vqro::rpc::CellGlobalState* ExchangeStateResponse::release_full() {
  if (has_full()) {
    clear_has_state();
    if (GetArenaNoVirtual() != NULL) {
      ::vqro::rpc::CellGlobalState* temp = new ::vqro::rpc::CellGlobalState;
      temp->MergeFrom(*state_.full_);
      state_.full_ = NULL;
      return temp;
    } else {
      ::vqro::rpc::CellGlobalState* temp = state_.full_;
      state_.full_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
inline void ExchangeStateResponse::set_allocated_full(::vqro::rpc::CellGlobalState* full) {
  clear_state();
  if (full) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(full) == NULL) {
      GetArenaNoVirtual()->Own(full);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(full)) {
      ::vqro::rpc::CellGlobalState* new_full = 
          ::google::protobuf::Arena::CreateMessage< ::vqro::rpc::CellGlobalState >(
          GetArenaNoVirtual());
      new_full->CopyFrom(*full);
      full = new_full;
    }
    set_has_full();
    state_.full_ = full;
  }
  // @@protoc_insertion_point(field_set_allocated:vqro.rpc.ExchangeStateResponse.full)
}
inline  ::vqro::rpc::CellGlobalState* ExchangeStateResponse::unsafe_arena_release_full() {
  if (has_full()) {
    clear_has_state();
    ::vqro::rpc::CellGlobalState* temp = state_.full_;
    state_.full_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline  void ExchangeStateResponse::unsafe_arena_set_allocated_full(::vqro::rpc::CellGlobalState* full) {
  clear_state();
  if (full) {
    set_has_full();
    state_.full_ = full;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vqro.rpc.ExchangeStateResponse.full)
}

// optional .vqro.rpc.CellGlobalStateDiff diff = 2;
inline bool ExchangeStateResponse::has_diff() const {
  return state_case() == kDiff;
}
inline void ExchangeStateResponse::set_has_diff() {
  _oneof_case_[0] = kDiff;
}
inline void ExchangeStateResponse::clear_diff() {
  if (has_diff()) {
    if (GetArenaNoVirtual() == NULL) {
      delete state_.diff_;
    }
    clear_has_state();
  }
}
inline  const ::vqro::rpc::CellGlobalStateDiff& ExchangeStateResponse::diff() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.ExchangeStateResponse.diff)
  return has_diff()
      ? *state_.diff_
      : ::vqro::rpc::CellGlobalStateDiff::default_instance();
}
inline ::vqro::rpc::CellGlobalStateDiff* ExchangeStateResponse::mutable_diff() {
  if (!has_diff()) {
    clear_state();
    set_has_diff();
    state_.diff_ = 
      ::google::protobuf::Arena::CreateMessage< ::vqro::rpc::CellGlobalStateDiff >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:vqro.rpc.ExchangeStateResponse.diff)
  return state_.diff_;
}
inline ::vqro::rpc::CellGlobalStateDiff* ExchangeStateResponse::release_diff() {
  if (has_diff()) {
    clear_has_state();
    if (GetArenaNoVirtual() != NULL) {
      ::vqro::rpc::CellGlobalStateDiff* temp = new ::vqro::rpc::CellGlobalStateDiff;
      temp->MergeFrom(*state_.diff_);
      state_.diff_ = NULL;
      return temp;
    } else {
      ::vqro::rpc::CellGlobalStateDiff* temp = state_.diff_;
      state_.diff_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
inline void ExchangeStateResponse::set_allocated_diff(::vqro::rpc::CellGlobalStateDiff* diff) {
  clear_state();
  if (diff) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(diff) == NULL) {
      GetArenaNoVirtual()->Own(diff);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(diff)) {
      ::vqro::rpc::CellGlobalStateDiff* new_diff = 
          ::google::protobuf::Arena::CreateMessage< ::vqro::rpc::CellGlobalStateDiff >(
          GetArenaNoVirtual());
      new_diff->CopyFrom(*diff);
      diff = new_diff;
    }
    set_has_diff();
    state_.diff_ = diff;
  }
  // @@protoc_insertion_point(field_set_allocated:vqro.rpc.ExchangeStateResponse.diff)
}
inline  ::vqro::rpc::CellGlobalStateDiff* ExchangeStateResponse::unsafe_arena_release_diff() {
  if (has_diff()) {
    clear_has_state();
    ::vqro::rpc::CellGlobalStateDiff* temp = state_.diff_;
    state_.diff_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline  void ExchangeStateResponse::unsafe_arena_set_allocated_diff(::vqro::rpc::CellGlobalStateDiff* diff) {
  clear_state();
  if (diff) {
    set_has_diff();
    state_.diff_ = diff;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vqro.rpc.ExchangeStateResponse.diff)
}

inline bool ExchangeStateResponse::has_state() const {
  return state_case() != STATE_NOT_SET;
}
inline void ExchangeStateResponse::clear_has_state() {
  _oneof_case_[0] = STATE_NOT_SET;
}
inline ExchangeStateResponse::StateCase ExchangeStateResponse::state_case() const {
  return ExchangeStateResponse::StateCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// CellGlobalState

// optional int64 revision = 1;
inline void CellGlobalState::clear_revision() {
  revision_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 CellGlobalState::revision() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.CellGlobalState.revision)
  return revision_;
}
inline void CellGlobalState::set_revision(::google::protobuf::int64 value) {
  
  revision_ = value;
  // @@protoc_insertion_point(field_set:vqro.rpc.CellGlobalState.revision)
}

// repeated .vqro.rpc.Server controllers = 2;
inline int CellGlobalState::controllers_size() const {
  return controllers_.size();
}
inline void CellGlobalState::clear_controllers() {
  controllers_.Clear();
}
inline const ::vqro::rpc::Server& CellGlobalState::controllers(int index) const {
  // @@protoc_insertion_point(field_get:vqro.rpc.CellGlobalState.controllers)
  return controllers_.Get(index);
}
inline ::vqro::rpc::Server* CellGlobalState::mutable_controllers(int index) {
  // @@protoc_insertion_point(field_mutable:vqro.rpc.CellGlobalState.controllers)
  return controllers_.Mutable(index);
}
inline ::vqro::rpc::Server* CellGlobalState::add_controllers() {
  // @@protoc_insertion_point(field_add:vqro.rpc.CellGlobalState.controllers)
  return controllers_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::vqro::rpc::Server >*
CellGlobalState::mutable_controllers() {
  // @@protoc_insertion_point(field_mutable_list:vqro.rpc.CellGlobalState.controllers)
  return &controllers_;
}
inline const ::google::protobuf::RepeatedPtrField< ::vqro::rpc::Server >&
CellGlobalState::controllers() const {
  // @@protoc_insertion_point(field_list:vqro.rpc.CellGlobalState.controllers)
  return controllers_;
}

// repeated .vqro.rpc.ServerRanges range_assignments = 3;
inline int CellGlobalState::range_assignments_size() const {
  return range_assignments_.size();
}
inline void CellGlobalState::clear_range_assignments() {
  range_assignments_.Clear();
}
inline const ::vqro::rpc::ServerRanges& CellGlobalState::range_assignments(int index) const {
  // @@protoc_insertion_point(field_get:vqro.rpc.CellGlobalState.range_assignments)
  return range_assignments_.Get(index);
}
inline ::vqro::rpc::ServerRanges* CellGlobalState::mutable_range_assignments(int index) {
  // @@protoc_insertion_point(field_mutable:vqro.rpc.CellGlobalState.range_assignments)
  return range_assignments_.Mutable(index);
}
inline ::vqro::rpc::ServerRanges* CellGlobalState::add_range_assignments() {
  // @@protoc_insertion_point(field_add:vqro.rpc.CellGlobalState.range_assignments)
  return range_assignments_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::vqro::rpc::ServerRanges >*
CellGlobalState::mutable_range_assignments() {
  // @@protoc_insertion_point(field_mutable_list:vqro.rpc.CellGlobalState.range_assignments)
  return &range_assignments_;
}
inline const ::google::protobuf::RepeatedPtrField< ::vqro::rpc::ServerRanges >&
CellGlobalState::range_assignments() const {
  // @@protoc_insertion_point(field_list:vqro.rpc.CellGlobalState.range_assignments)
  return range_assignments_;
}

// -------------------------------------------------------------------

// CellGlobalStateDiff

// optional int64 from_revision = 1;
inline void CellGlobalStateDiff::clear_from_revision() {
  from_revision_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 CellGlobalStateDiff::from_revision() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.CellGlobalStateDiff.from_revision)
  return from_revision_;
}
inline void CellGlobalStateDiff::set_from_revision(::google::protobuf::int64 value) {
  
  from_revision_ = value;
  // @@protoc_insertion_point(field_set:vqro.rpc.CellGlobalStateDiff.from_revision)
}

// optional int64 to_revision = 2;
inline void CellGlobalStateDiff::clear_to_revision() {
  to_revision_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 CellGlobalStateDiff::to_revision() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.CellGlobalStateDiff.to_revision)
  return to_revision_;
}
inline void CellGlobalStateDiff::set_to_revision(::google::protobuf::int64 value) {
  
  to_revision_ = value;
  // @@protoc_insertion_point(field_set:vqro.rpc.CellGlobalStateDiff.to_revision)
}

// repeated .vqro.rpc.ServerRanges additions = 3;
inline int CellGlobalStateDiff::additions_size() const {
  return additions_.size();
}
inline void CellGlobalStateDiff::clear_additions() {
  additions_.Clear();
}
inline const ::vqro::rpc::ServerRanges& CellGlobalStateDiff::additions(int index) const {
  // @@protoc_insertion_point(field_get:vqro.rpc.CellGlobalStateDiff.additions)
  return additions_.Get(index);
}
inline ::vqro::rpc::ServerRanges* CellGlobalStateDiff::mutable_additions(int index) {
  // @@protoc_insertion_point(field_mutable:vqro.rpc.CellGlobalStateDiff.additions)
  return additions_.Mutable(index);
}
inline ::vqro::rpc::ServerRanges* CellGlobalStateDiff::add_additions() {
  // @@protoc_insertion_point(field_add:vqro.rpc.CellGlobalStateDiff.additions)
  return additions_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::vqro::rpc::ServerRanges >*
CellGlobalStateDiff::mutable_additions() {
  // @@protoc_insertion_point(field_mutable_list:vqro.rpc.CellGlobalStateDiff.additions)
  return &additions_;
}
inline const ::google::protobuf::RepeatedPtrField< ::vqro::rpc::ServerRanges >&
CellGlobalStateDiff::additions() const {
  // @@protoc_insertion_point(field_list:vqro.rpc.CellGlobalStateDiff.additions)
  return additions_;
}

// repeated .vqro.rpc.ServerRanges removals = 4;
inline int CellGlobalStateDiff::removals_size() const {
  return removals_.size();
}
inline void CellGlobalStateDiff::clear_removals() {
  removals_.Clear();
}
inline const ::vqro::rpc::ServerRanges& CellGlobalStateDiff::removals(int index) const {
  // @@protoc_insertion_point(field_get:vqro.rpc.CellGlobalStateDiff.removals)
  return removals_.Get(index);
}
inline ::vqro::rpc::ServerRanges* CellGlobalStateDiff::mutable_removals(int index) {
  // @@protoc_insertion_point(field_mutable:vqro.rpc.CellGlobalStateDiff.removals)
  return removals_.Mutable(index);
}
inline ::vqro::rpc::ServerRanges* CellGlobalStateDiff::add_removals() {
  // @@protoc_insertion_point(field_add:vqro.rpc.CellGlobalStateDiff.removals)
  return removals_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::vqro::rpc::ServerRanges >*
CellGlobalStateDiff::mutable_removals() {
  // @@protoc_insertion_point(field_mutable_list:vqro.rpc.CellGlobalStateDiff.removals)
  return &removals_;
}
inline const ::google::protobuf::RepeatedPtrField< ::vqro::rpc::ServerRanges >&
CellGlobalStateDiff::removals() const {
  // @@protoc_insertion_point(field_list:vqro.rpc.CellGlobalStateDiff.removals)
  return removals_;
}

// -------------------------------------------------------------------

// CellLocalState

// repeated .vqro.rpc.VaqueroState vaqueros = 1;
inline int CellLocalState::vaqueros_size() const {
  return vaqueros_.size();
}
inline void CellLocalState::clear_vaqueros() {
  vaqueros_.Clear();
}
inline const ::vqro::rpc::VaqueroState& CellLocalState::vaqueros(int index) const {
  // @@protoc_insertion_point(field_get:vqro.rpc.CellLocalState.vaqueros)
  return vaqueros_.Get(index);
}
inline ::vqro::rpc::VaqueroState* CellLocalState::mutable_vaqueros(int index) {
  // @@protoc_insertion_point(field_mutable:vqro.rpc.CellLocalState.vaqueros)
  return vaqueros_.Mutable(index);
}
inline ::vqro::rpc::VaqueroState* CellLocalState::add_vaqueros() {
  // @@protoc_insertion_point(field_add:vqro.rpc.CellLocalState.vaqueros)
  return vaqueros_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::vqro::rpc::VaqueroState >*
CellLocalState::mutable_vaqueros() {
  // @@protoc_insertion_point(field_mutable_list:vqro.rpc.CellLocalState.vaqueros)
  return &vaqueros_;
}
inline const ::google::protobuf::RepeatedPtrField< ::vqro::rpc::VaqueroState >&
CellLocalState::vaqueros() const {
  // @@protoc_insertion_point(field_list:vqro.rpc.CellLocalState.vaqueros)
  return vaqueros_;
}

// -------------------------------------------------------------------

// VaqueroState

// optional .vqro.rpc.Server server = 1;
inline bool VaqueroState::has_server() const {
  return !_is_default_instance_ && server_ != NULL;
}
inline void VaqueroState::clear_server() {
  if (GetArenaNoVirtual() == NULL && server_ != NULL) delete server_;
  server_ = NULL;
}
inline const ::vqro::rpc::Server& VaqueroState::server() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.VaqueroState.server)
  return server_ != NULL ? *server_ : *default_instance_->server_;
}
inline ::vqro::rpc::Server* VaqueroState::mutable_server() {
  
  if (server_ == NULL) {
    _slow_mutable_server();
  }
  // @@protoc_insertion_point(field_mutable:vqro.rpc.VaqueroState.server)
  return server_;
}
inline ::vqro::rpc::Server* VaqueroState::release_server() {
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_server();
  } else {
    ::vqro::rpc::Server* temp = server_;
    server_ = NULL;
    return temp;
  }
}
inline  void VaqueroState::set_allocated_server(::vqro::rpc::Server* server) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete server_;
  }
  if (server != NULL) {
    _slow_set_allocated_server(message_arena, &server);
  }
  server_ = server;
  if (server) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:vqro.rpc.VaqueroState.server)
}

// optional .vqro.rpc.VaqueroMetrics metrics = 2;
inline bool VaqueroState::has_metrics() const {
  return !_is_default_instance_ && metrics_ != NULL;
}
inline void VaqueroState::clear_metrics() {
  if (GetArenaNoVirtual() == NULL && metrics_ != NULL) delete metrics_;
  metrics_ = NULL;
}
inline const ::vqro::rpc::VaqueroMetrics& VaqueroState::metrics() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.VaqueroState.metrics)
  return metrics_ != NULL ? *metrics_ : *default_instance_->metrics_;
}
inline ::vqro::rpc::VaqueroMetrics* VaqueroState::mutable_metrics() {
  
  if (metrics_ == NULL) {
    _slow_mutable_metrics();
  }
  // @@protoc_insertion_point(field_mutable:vqro.rpc.VaqueroState.metrics)
  return metrics_;
}
inline ::vqro::rpc::VaqueroMetrics* VaqueroState::release_metrics() {
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_metrics();
  } else {
    ::vqro::rpc::VaqueroMetrics* temp = metrics_;
    metrics_ = NULL;
    return temp;
  }
}
inline  void VaqueroState::set_allocated_metrics(::vqro::rpc::VaqueroMetrics* metrics) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete metrics_;
  }
  if (metrics != NULL) {
    _slow_set_allocated_metrics(message_arena, &metrics);
  }
  metrics_ = metrics;
  if (metrics) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:vqro.rpc.VaqueroState.metrics)
}

// repeated .vqro.rpc.Series new_series = 3;
inline int VaqueroState::new_series_size() const {
  return new_series_.size();
}
inline void VaqueroState::clear_new_series() {
  new_series_.Clear();
}
inline const ::vqro::rpc::Series& VaqueroState::new_series(int index) const {
  // @@protoc_insertion_point(field_get:vqro.rpc.VaqueroState.new_series)
  return new_series_.Get(index);
}
inline ::vqro::rpc::Series* VaqueroState::mutable_new_series(int index) {
  // @@protoc_insertion_point(field_mutable:vqro.rpc.VaqueroState.new_series)
  return new_series_.Mutable(index);
}
inline ::vqro::rpc::Series* VaqueroState::add_new_series() {
  // @@protoc_insertion_point(field_add:vqro.rpc.VaqueroState.new_series)
  return new_series_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::vqro::rpc::Series >*
VaqueroState::mutable_new_series() {
  // @@protoc_insertion_point(field_mutable_list:vqro.rpc.VaqueroState.new_series)
  return &new_series_;
}
inline const ::google::protobuf::RepeatedPtrField< ::vqro::rpc::Series >&
VaqueroState::new_series() const {
  // @@protoc_insertion_point(field_list:vqro.rpc.VaqueroState.new_series)
  return new_series_;
}

// repeated .vqro.rpc.Series expired_series = 4;
inline int VaqueroState::expired_series_size() const {
  return expired_series_.size();
}
inline void VaqueroState::clear_expired_series() {
  expired_series_.Clear();
}
inline const ::vqro::rpc::Series& VaqueroState::expired_series(int index) const {
  // @@protoc_insertion_point(field_get:vqro.rpc.VaqueroState.expired_series)
  return expired_series_.Get(index);
}
inline ::vqro::rpc::Series* VaqueroState::mutable_expired_series(int index) {
  // @@protoc_insertion_point(field_mutable:vqro.rpc.VaqueroState.expired_series)
  return expired_series_.Mutable(index);
}
inline ::vqro::rpc::Series* VaqueroState::add_expired_series() {
  // @@protoc_insertion_point(field_add:vqro.rpc.VaqueroState.expired_series)
  return expired_series_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::vqro::rpc::Series >*
VaqueroState::mutable_expired_series() {
  // @@protoc_insertion_point(field_mutable_list:vqro.rpc.VaqueroState.expired_series)
  return &expired_series_;
}
inline const ::google::protobuf::RepeatedPtrField< ::vqro::rpc::Series >&
VaqueroState::expired_series() const {
  // @@protoc_insertion_point(field_list:vqro.rpc.VaqueroState.expired_series)
  return expired_series_;
}

// -------------------------------------------------------------------

// VaqueroMetrics

// optional double cpu_usage = 1;
inline void VaqueroMetrics::clear_cpu_usage() {
  cpu_usage_ = 0;
}
inline double VaqueroMetrics::cpu_usage() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.VaqueroMetrics.cpu_usage)
  return cpu_usage_;
}
inline void VaqueroMetrics::set_cpu_usage(double value) {
  
  cpu_usage_ = value;
  // @@protoc_insertion_point(field_set:vqro.rpc.VaqueroMetrics.cpu_usage)
}

// optional int32 num_series_written_to = 2;
inline void VaqueroMetrics::clear_num_series_written_to() {
  num_series_written_to_ = 0;
}
inline ::google::protobuf::int32 VaqueroMetrics::num_series_written_to() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.VaqueroMetrics.num_series_written_to)
  return num_series_written_to_;
}
inline void VaqueroMetrics::set_num_series_written_to(::google::protobuf::int32 value) {
  
  num_series_written_to_ = value;
  // @@protoc_insertion_point(field_set:vqro.rpc.VaqueroMetrics.num_series_written_to)
}

// optional int32 num_datapoints_written = 3;
inline void VaqueroMetrics::clear_num_datapoints_written() {
  num_datapoints_written_ = 0;
}
inline ::google::protobuf::int32 VaqueroMetrics::num_datapoints_written() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.VaqueroMetrics.num_datapoints_written)
  return num_datapoints_written_;
}
inline void VaqueroMetrics::set_num_datapoints_written(::google::protobuf::int32 value) {
  
  num_datapoints_written_ = value;
  // @@protoc_insertion_point(field_set:vqro.rpc.VaqueroMetrics.num_datapoints_written)
}

// optional int32 storage_bytes_change = 4;
inline void VaqueroMetrics::clear_storage_bytes_change() {
  storage_bytes_change_ = 0;
}
inline ::google::protobuf::int32 VaqueroMetrics::storage_bytes_change() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.VaqueroMetrics.storage_bytes_change)
  return storage_bytes_change_;
}
inline void VaqueroMetrics::set_storage_bytes_change(::google::protobuf::int32 value) {
  
  storage_bytes_change_ = value;
  // @@protoc_insertion_point(field_set:vqro.rpc.VaqueroMetrics.storage_bytes_change)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace rpc
}  // namespace vqro

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::vqro::rpc::Server_AF> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::vqro::rpc::Server_AF>() {
  return ::vqro::rpc::Server_AF_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_controller_2eproto__INCLUDED
