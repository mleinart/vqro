// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: controller.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "controller.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace vqro {
namespace rpc {

namespace {

const ::google::protobuf::Descriptor* LocateSeriesResults_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LocateSeriesResults_reflection_ = NULL;
const ::google::protobuf::Descriptor* Server_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Server_reflection_ = NULL;
struct ServerOneofInstance {
  ::google::protobuf::internal::ArenaStringPtr ipv4_address_;
  ::google::protobuf::internal::ArenaStringPtr ipv6_address_;
}* Server_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* Range_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Range_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerRanges_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerRanges_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExchangeStateRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExchangeStateRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExchangeStateResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExchangeStateResponse_reflection_ = NULL;
struct ExchangeStateResponseOneofInstance {
  const ::vqro::rpc::CellGlobalState* full_;
  const ::vqro::rpc::CellGlobalStateDiff* diff_;
}* ExchangeStateResponse_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* CellGlobalState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CellGlobalState_reflection_ = NULL;
const ::google::protobuf::Descriptor* CellGlobalStateDiff_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CellGlobalStateDiff_reflection_ = NULL;
const ::google::protobuf::Descriptor* CellLocalState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CellLocalState_reflection_ = NULL;
const ::google::protobuf::Descriptor* VaqueroState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VaqueroState_reflection_ = NULL;
const ::google::protobuf::Descriptor* VaqueroMetrics_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VaqueroMetrics_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_controller_2eproto() {
  protobuf_AddDesc_controller_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "controller.proto");
  GOOGLE_CHECK(file != NULL);
  LocateSeriesResults_descriptor_ = file->message_type(0);
  static const int LocateSeriesResults_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocateSeriesResults, servers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocateSeriesResults, status_),
  };
  LocateSeriesResults_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LocateSeriesResults_descriptor_,
      LocateSeriesResults::default_instance_,
      LocateSeriesResults_offsets_,
      -1,
      -1,
      -1,
      sizeof(LocateSeriesResults),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocateSeriesResults, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocateSeriesResults, _is_default_instance_));
  Server_descriptor_ = file->message_type(1);
  static const int Server_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Server, name_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Server_default_oneof_instance_, ipv4_address_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Server_default_oneof_instance_, ipv6_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Server, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Server, address_),
  };
  Server_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Server_descriptor_,
      Server::default_instance_,
      Server_offsets_,
      -1,
      -1,
      -1,
      Server_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Server, _oneof_case_[0]),
      sizeof(Server),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Server, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Server, _is_default_instance_));
  Range_descriptor_ = file->message_type(2);
  static const int Range_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Range, lower_bound_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Range, upper_bound_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Range, not_synced_),
  };
  Range_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Range_descriptor_,
      Range::default_instance_,
      Range_offsets_,
      -1,
      -1,
      -1,
      sizeof(Range),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Range, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Range, _is_default_instance_));
  ServerRanges_descriptor_ = file->message_type(3);
  static const int ServerRanges_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerRanges, server_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerRanges, range_),
  };
  ServerRanges_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ServerRanges_descriptor_,
      ServerRanges::default_instance_,
      ServerRanges_offsets_,
      -1,
      -1,
      -1,
      sizeof(ServerRanges),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerRanges, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerRanges, _is_default_instance_));
  ExchangeStateRequest_descriptor_ = file->message_type(4);
  static const int ExchangeStateRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeStateRequest, local_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeStateRequest, only_diff_since_revision_),
  };
  ExchangeStateRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ExchangeStateRequest_descriptor_,
      ExchangeStateRequest::default_instance_,
      ExchangeStateRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(ExchangeStateRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeStateRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeStateRequest, _is_default_instance_));
  ExchangeStateResponse_descriptor_ = file->message_type(5);
  static const int ExchangeStateResponse_offsets_[3] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ExchangeStateResponse_default_oneof_instance_, full_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ExchangeStateResponse_default_oneof_instance_, diff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeStateResponse, state_),
  };
  ExchangeStateResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ExchangeStateResponse_descriptor_,
      ExchangeStateResponse::default_instance_,
      ExchangeStateResponse_offsets_,
      -1,
      -1,
      -1,
      ExchangeStateResponse_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeStateResponse, _oneof_case_[0]),
      sizeof(ExchangeStateResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeStateResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeStateResponse, _is_default_instance_));
  CellGlobalState_descriptor_ = file->message_type(6);
  static const int CellGlobalState_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellGlobalState, revision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellGlobalState, controllers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellGlobalState, range_assignments_),
  };
  CellGlobalState_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CellGlobalState_descriptor_,
      CellGlobalState::default_instance_,
      CellGlobalState_offsets_,
      -1,
      -1,
      -1,
      sizeof(CellGlobalState),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellGlobalState, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellGlobalState, _is_default_instance_));
  CellGlobalStateDiff_descriptor_ = file->message_type(7);
  static const int CellGlobalStateDiff_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellGlobalStateDiff, from_revision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellGlobalStateDiff, to_revision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellGlobalStateDiff, additions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellGlobalStateDiff, removals_),
  };
  CellGlobalStateDiff_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CellGlobalStateDiff_descriptor_,
      CellGlobalStateDiff::default_instance_,
      CellGlobalStateDiff_offsets_,
      -1,
      -1,
      -1,
      sizeof(CellGlobalStateDiff),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellGlobalStateDiff, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellGlobalStateDiff, _is_default_instance_));
  CellLocalState_descriptor_ = file->message_type(8);
  static const int CellLocalState_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellLocalState, vaqueros_),
  };
  CellLocalState_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CellLocalState_descriptor_,
      CellLocalState::default_instance_,
      CellLocalState_offsets_,
      -1,
      -1,
      -1,
      sizeof(CellLocalState),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellLocalState, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellLocalState, _is_default_instance_));
  VaqueroState_descriptor_ = file->message_type(9);
  static const int VaqueroState_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VaqueroState, server_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VaqueroState, metrics_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VaqueroState, new_series_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VaqueroState, expired_series_),
  };
  VaqueroState_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      VaqueroState_descriptor_,
      VaqueroState::default_instance_,
      VaqueroState_offsets_,
      -1,
      -1,
      -1,
      sizeof(VaqueroState),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VaqueroState, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VaqueroState, _is_default_instance_));
  VaqueroMetrics_descriptor_ = file->message_type(10);
  static const int VaqueroMetrics_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VaqueroMetrics, cpu_usage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VaqueroMetrics, num_series_written_to_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VaqueroMetrics, num_datapoints_written_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VaqueroMetrics, storage_bytes_change_),
  };
  VaqueroMetrics_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      VaqueroMetrics_descriptor_,
      VaqueroMetrics::default_instance_,
      VaqueroMetrics_offsets_,
      -1,
      -1,
      -1,
      sizeof(VaqueroMetrics),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VaqueroMetrics, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VaqueroMetrics, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_controller_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LocateSeriesResults_descriptor_, &LocateSeriesResults::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Server_descriptor_, &Server::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Range_descriptor_, &Range::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ServerRanges_descriptor_, &ServerRanges::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ExchangeStateRequest_descriptor_, &ExchangeStateRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ExchangeStateResponse_descriptor_, &ExchangeStateResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CellGlobalState_descriptor_, &CellGlobalState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CellGlobalStateDiff_descriptor_, &CellGlobalStateDiff::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CellLocalState_descriptor_, &CellLocalState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      VaqueroState_descriptor_, &VaqueroState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      VaqueroMetrics_descriptor_, &VaqueroMetrics::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_controller_2eproto() {
  delete LocateSeriesResults::default_instance_;
  delete LocateSeriesResults_reflection_;
  delete Server::default_instance_;
  delete Server_default_oneof_instance_;
  delete Server_reflection_;
  delete Range::default_instance_;
  delete Range_reflection_;
  delete ServerRanges::default_instance_;
  delete ServerRanges_reflection_;
  delete ExchangeStateRequest::default_instance_;
  delete ExchangeStateRequest_reflection_;
  delete ExchangeStateResponse::default_instance_;
  delete ExchangeStateResponse_default_oneof_instance_;
  delete ExchangeStateResponse_reflection_;
  delete CellGlobalState::default_instance_;
  delete CellGlobalState_reflection_;
  delete CellGlobalStateDiff::default_instance_;
  delete CellGlobalStateDiff_reflection_;
  delete CellLocalState::default_instance_;
  delete CellLocalState_reflection_;
  delete VaqueroState::default_instance_;
  delete VaqueroState_reflection_;
  delete VaqueroMetrics::default_instance_;
  delete VaqueroMetrics_reflection_;
}

void protobuf_AddDesc_controller_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::vqro::rpc::protobuf_AddDesc_core_2eproto();
  ::vqro::rpc::protobuf_AddDesc_search_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020controller.proto\022\010vqro.rpc\032\ncore.proto"
    "\032\014search.proto\"a\n\023LocateSeriesResults\022!\n"
    "\007servers\030\001 \003(\0132\020.vqro.rpc.Server\022\'\n\006stat"
    "us\030\002 \001(\0132\027.vqro.rpc.StatusMessage\"_\n\006Ser"
    "ver\022\014\n\004name\030\001 \001(\t\022\026\n\014ipv4_address\030\002 \001(\tH"
    "\000\022\026\n\014ipv6_address\030\003 \001(\tH\000\022\014\n\004port\030\004 \001(\005B"
    "\t\n\007address\"E\n\005Range\022\023\n\013lower_bound\030\001 \001(\005"
    "\022\023\n\013upper_bound\030\002 \001(\005\022\022\n\nnot_synced\030\003 \001("
    "\010\"P\n\014ServerRanges\022 \n\006server\030\001 \001(\0132\020.vqro"
    ".rpc.Server\022\036\n\005range\030\002 \003(\0132\017.vqro.rpc.Ra"
    "nge\"g\n\024ExchangeStateRequest\022-\n\013local_sta"
    "te\030\001 \001(\0132\030.vqro.rpc.CellLocalState\022 \n\030on"
    "ly_diff_since_revision\030\002 \001(\003\"z\n\025Exchange"
    "StateResponse\022)\n\004full\030\001 \001(\0132\031.vqro.rpc.C"
    "ellGlobalStateH\000\022-\n\004diff\030\002 \001(\0132\035.vqro.rp"
    "c.CellGlobalStateDiffH\000B\007\n\005state\"}\n\017Cell"
    "GlobalState\022\020\n\010revision\030\001 \001(\003\022%\n\013control"
    "lers\030\002 \003(\0132\020.vqro.rpc.Server\0221\n\021range_as"
    "signments\030\003 \003(\0132\026.vqro.rpc.ServerRanges\""
    "\226\001\n\023CellGlobalStateDiff\022\025\n\rfrom_revision"
    "\030\001 \001(\003\022\023\n\013to_revision\030\002 \001(\003\022)\n\tadditions"
    "\030\003 \003(\0132\026.vqro.rpc.ServerRanges\022(\n\010remova"
    "ls\030\004 \003(\0132\026.vqro.rpc.ServerRanges\":\n\016Cell"
    "LocalState\022(\n\010vaqueros\030\001 \003(\0132\026.vqro.rpc."
    "VaqueroState\"\253\001\n\014VaqueroState\022 \n\006server\030"
    "\001 \001(\0132\020.vqro.rpc.Server\022)\n\007metrics\030\002 \001(\013"
    "2\030.vqro.rpc.VaqueroMetrics\022$\n\nnew_series"
    "\030\003 \003(\0132\020.vqro.rpc.Series\022(\n\016expired_seri"
    "es\030\004 \003(\0132\020.vqro.rpc.Series\"\200\001\n\016VaqueroMe"
    "trics\022\021\n\tcpu_usage\030\001 \001(\001\022\035\n\025num_series_w"
    "ritten_to\030\002 \001(\005\022\036\n\026num_datapoints_writte"
    "n\030\003 \001(\005\022\034\n\024storage_bytes_change\030\004 \001(\0052\253\001"
    "\n\021VaqueroController\022D\n\014LocateSeries\022\025.vq"
    "ro.rpc.SeriesQuery\032\035.vqro.rpc.LocateSeri"
    "esResults\022P\n\rExchangeState\022\036.vqro.rpc.Ex"
    "changeStateRequest\032\037.vqro.rpc.ExchangeSt"
    "ateResponseB\003\370\001\001b\006proto3", 1464);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "controller.proto", &protobuf_RegisterTypes);
  LocateSeriesResults::default_instance_ = new LocateSeriesResults();
  Server::default_instance_ = new Server();
  Server_default_oneof_instance_ = new ServerOneofInstance();
  Range::default_instance_ = new Range();
  ServerRanges::default_instance_ = new ServerRanges();
  ExchangeStateRequest::default_instance_ = new ExchangeStateRequest();
  ExchangeStateResponse::default_instance_ = new ExchangeStateResponse();
  ExchangeStateResponse_default_oneof_instance_ = new ExchangeStateResponseOneofInstance();
  CellGlobalState::default_instance_ = new CellGlobalState();
  CellGlobalStateDiff::default_instance_ = new CellGlobalStateDiff();
  CellLocalState::default_instance_ = new CellLocalState();
  VaqueroState::default_instance_ = new VaqueroState();
  VaqueroMetrics::default_instance_ = new VaqueroMetrics();
  LocateSeriesResults::default_instance_->InitAsDefaultInstance();
  Server::default_instance_->InitAsDefaultInstance();
  Range::default_instance_->InitAsDefaultInstance();
  ServerRanges::default_instance_->InitAsDefaultInstance();
  ExchangeStateRequest::default_instance_->InitAsDefaultInstance();
  ExchangeStateResponse::default_instance_->InitAsDefaultInstance();
  CellGlobalState::default_instance_->InitAsDefaultInstance();
  CellGlobalStateDiff::default_instance_->InitAsDefaultInstance();
  CellLocalState::default_instance_->InitAsDefaultInstance();
  VaqueroState::default_instance_->InitAsDefaultInstance();
  VaqueroMetrics::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_controller_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_controller_2eproto {
  StaticDescriptorInitializer_controller_2eproto() {
    protobuf_AddDesc_controller_2eproto();
  }
} static_descriptor_initializer_controller_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

void LocateSeriesResults::_slow_mutable_status() {
  status_ = ::google::protobuf::Arena::CreateMessage< ::vqro::rpc::StatusMessage >(
        GetArenaNoVirtual());
}
::vqro::rpc::StatusMessage* LocateSeriesResults::_slow_release_status() {
  if (status_ == NULL) {
    return NULL;
  } else {
    ::vqro::rpc::StatusMessage* temp = new ::vqro::rpc::StatusMessage;
    temp->MergeFrom(*status_);
    status_ = NULL;
    return temp;
  }
}
::vqro::rpc::StatusMessage* LocateSeriesResults::unsafe_arena_release_status() {
  
  ::vqro::rpc::StatusMessage* temp = status_;
  status_ = NULL;
  return temp;
}
void LocateSeriesResults::_slow_set_allocated_status(
    ::google::protobuf::Arena* message_arena, ::vqro::rpc::StatusMessage** status) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*status) == NULL) {
      message_arena->Own(*status);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*status)) {
      ::vqro::rpc::StatusMessage* new_status = 
            ::google::protobuf::Arena::CreateMessage< ::vqro::rpc::StatusMessage >(
            message_arena);
      new_status->CopyFrom(**status);
      *status = new_status;
    }
}
void LocateSeriesResults::unsafe_arena_set_allocated_status(
    ::vqro::rpc::StatusMessage* status) {
  if (GetArenaNoVirtual() == NULL) {
    delete status_;
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vqro.rpc.LocateSeriesResults.status)
}
#ifndef _MSC_VER
const int LocateSeriesResults::kServersFieldNumber;
const int LocateSeriesResults::kStatusFieldNumber;
#endif  // !_MSC_VER

LocateSeriesResults::LocateSeriesResults()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vqro.rpc.LocateSeriesResults)
}

LocateSeriesResults::LocateSeriesResults(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  servers_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vqro.rpc.LocateSeriesResults)
}

void LocateSeriesResults::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  status_ = const_cast< ::vqro::rpc::StatusMessage*>(&::vqro::rpc::StatusMessage::default_instance());
}

LocateSeriesResults::LocateSeriesResults(const LocateSeriesResults& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vqro.rpc.LocateSeriesResults)
}

void LocateSeriesResults::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  status_ = NULL;
}

LocateSeriesResults::~LocateSeriesResults() {
  // @@protoc_insertion_point(destructor:vqro.rpc.LocateSeriesResults)
  SharedDtor();
}

void LocateSeriesResults::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  if (this != default_instance_) {
    delete status_;
  }
}

void LocateSeriesResults::ArenaDtor(void* object) {
  LocateSeriesResults* _this = reinterpret_cast< LocateSeriesResults* >(object);
  (void)_this;
}
void LocateSeriesResults::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void LocateSeriesResults::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LocateSeriesResults::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LocateSeriesResults_descriptor_;
}

const LocateSeriesResults& LocateSeriesResults::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_controller_2eproto();
  return *default_instance_;
}

LocateSeriesResults* LocateSeriesResults::default_instance_ = NULL;

LocateSeriesResults* LocateSeriesResults::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<LocateSeriesResults>(arena);
}

void LocateSeriesResults::Clear() {
  if (status_ != NULL) delete status_;
  status_ = NULL;
  servers_.Clear();
}

bool LocateSeriesResults::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vqro.rpc.LocateSeriesResults)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .vqro.rpc.Server servers = 1;
      case 1: {
        if (tag == 10) {
         parse_servers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_servers()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_servers;
        if (input->ExpectTag(18)) goto parse_status;
        break;
      }

      // optional .vqro.rpc.StatusMessage status = 2;
      case 2: {
        if (tag == 18) {
         parse_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vqro.rpc.LocateSeriesResults)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vqro.rpc.LocateSeriesResults)
  return false;
#undef DO_
}

void LocateSeriesResults::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vqro.rpc.LocateSeriesResults)
  // repeated .vqro.rpc.Server servers = 1;
  for (unsigned int i = 0, n = this->servers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->servers(i), output);
  }

  // optional .vqro.rpc.StatusMessage status = 2;
  if (this->has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->status_, output);
  }

  // @@protoc_insertion_point(serialize_end:vqro.rpc.LocateSeriesResults)
}

::google::protobuf::uint8* LocateSeriesResults::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vqro.rpc.LocateSeriesResults)
  // repeated .vqro.rpc.Server servers = 1;
  for (unsigned int i = 0, n = this->servers_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->servers(i), target);
  }

  // optional .vqro.rpc.StatusMessage status = 2;
  if (this->has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->status_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:vqro.rpc.LocateSeriesResults)
  return target;
}

int LocateSeriesResults::ByteSize() const {
  int total_size = 0;

  // optional .vqro.rpc.StatusMessage status = 2;
  if (this->has_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->status_);
  }

  // repeated .vqro.rpc.Server servers = 1;
  total_size += 1 * this->servers_size();
  for (int i = 0; i < this->servers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->servers(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LocateSeriesResults::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LocateSeriesResults* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LocateSeriesResults*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LocateSeriesResults::MergeFrom(const LocateSeriesResults& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  servers_.MergeFrom(from.servers_);
  if (from.has_status()) {
    mutable_status()->::vqro::rpc::StatusMessage::MergeFrom(from.status());
  }
}

void LocateSeriesResults::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocateSeriesResults::CopyFrom(const LocateSeriesResults& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocateSeriesResults::IsInitialized() const {

  return true;
}

void LocateSeriesResults::Swap(LocateSeriesResults* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    LocateSeriesResults temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void LocateSeriesResults::UnsafeArenaSwap(LocateSeriesResults* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void LocateSeriesResults::InternalSwap(LocateSeriesResults* other) {
  servers_.UnsafeArenaSwap(&other->servers_);
  std::swap(status_, other->status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LocateSeriesResults::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LocateSeriesResults_descriptor_;
  metadata.reflection = LocateSeriesResults_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LocateSeriesResults

// repeated .vqro.rpc.Server servers = 1;
 int LocateSeriesResults::servers_size() const {
  return servers_.size();
}
 void LocateSeriesResults::clear_servers() {
  servers_.Clear();
}
 const ::vqro::rpc::Server& LocateSeriesResults::servers(int index) const {
  // @@protoc_insertion_point(field_get:vqro.rpc.LocateSeriesResults.servers)
  return servers_.Get(index);
}
 ::vqro::rpc::Server* LocateSeriesResults::mutable_servers(int index) {
  // @@protoc_insertion_point(field_mutable:vqro.rpc.LocateSeriesResults.servers)
  return servers_.Mutable(index);
}
 ::vqro::rpc::Server* LocateSeriesResults::add_servers() {
  // @@protoc_insertion_point(field_add:vqro.rpc.LocateSeriesResults.servers)
  return servers_.Add();
}
 const ::google::protobuf::RepeatedPtrField< ::vqro::rpc::Server >&
LocateSeriesResults::servers() const {
  // @@protoc_insertion_point(field_list:vqro.rpc.LocateSeriesResults.servers)
  return servers_;
}
 ::google::protobuf::RepeatedPtrField< ::vqro::rpc::Server >*
LocateSeriesResults::mutable_servers() {
  // @@protoc_insertion_point(field_mutable_list:vqro.rpc.LocateSeriesResults.servers)
  return &servers_;
}

// optional .vqro.rpc.StatusMessage status = 2;
 bool LocateSeriesResults::has_status() const {
  return !_is_default_instance_ && status_ != NULL;
}
 void LocateSeriesResults::clear_status() {
  if (status_ != NULL) delete status_;
  status_ = NULL;
}
 const ::vqro::rpc::StatusMessage& LocateSeriesResults::status() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.LocateSeriesResults.status)
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
 ::vqro::rpc::StatusMessage* LocateSeriesResults::mutable_status() {
  
  if (status_ == NULL) {
    _slow_mutable_status();  }
  // @@protoc_insertion_point(field_mutable:vqro.rpc.LocateSeriesResults.status)
  return status_;
}
 ::vqro::rpc::StatusMessage* LocateSeriesResults::release_status() {
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_status();
  } else {
    ::vqro::rpc::StatusMessage* temp = status_;
    status_ = NULL;
    return temp;
  }
}
 void LocateSeriesResults::set_allocated_status(::vqro::rpc::StatusMessage* status) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete status_;
  }
  if (status != NULL) {
    _slow_set_allocated_status(message_arena, &status);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:vqro.rpc.LocateSeriesResults.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Server::kNameFieldNumber;
const int Server::kIpv4AddressFieldNumber;
const int Server::kIpv6AddressFieldNumber;
const int Server::kPortFieldNumber;
#endif  // !_MSC_VER

Server::Server()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vqro.rpc.Server)
}

Server::Server(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vqro.rpc.Server)
}

void Server::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  Server_default_oneof_instance_->ipv4_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  Server_default_oneof_instance_->ipv6_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Server::Server(const Server& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vqro.rpc.Server)
}

void Server::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0;
  clear_has_address();
}

Server::~Server() {
  // @@protoc_insertion_point(destructor:vqro.rpc.Server)
  SharedDtor();
}

void Server::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (has_address()) {
    clear_address();
  }
  if (this != default_instance_) {
  }
}

void Server::ArenaDtor(void* object) {
  Server* _this = reinterpret_cast< Server* >(object);
  (void)_this;
}
void Server::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Server::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Server::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Server_descriptor_;
}

const Server& Server::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_controller_2eproto();
  return *default_instance_;
}

Server* Server::default_instance_ = NULL;

Server* Server::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<Server>(arena);
}

void Server::clear_address() {
  switch(address_case()) {
    case kIpv4Address: {
      address_.ipv4_address_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
          GetArenaNoVirtual());
      break;
    }
    case kIpv6Address: {
      address_.ipv6_address_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
          GetArenaNoVirtual());
      break;
    }
    case ADDRESS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ADDRESS_NOT_SET;
}


void Server::Clear() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  port_ = 0;
  clear_address();
}

bool Server::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vqro.rpc.Server)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "vqro.rpc.Server.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ipv4_address;
        break;
      }

      // optional string ipv4_address = 2;
      case 2: {
        if (tag == 18) {
         parse_ipv4_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ipv4_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ipv4_address().data(), this->ipv4_address().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "vqro.rpc.Server.ipv4_address");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ipv6_address;
        break;
      }

      // optional string ipv6_address = 3;
      case 3: {
        if (tag == 26) {
         parse_ipv6_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ipv6_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ipv6_address().data(), this->ipv6_address().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "vqro.rpc.Server.ipv6_address");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_port;
        break;
      }

      // optional int32 port = 4;
      case 4: {
        if (tag == 32) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vqro.rpc.Server)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vqro.rpc.Server)
  return false;
#undef DO_
}

void Server::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vqro.rpc.Server)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vqro.rpc.Server.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string ipv4_address = 2;
  if (has_ipv4_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ipv4_address().data(), this->ipv4_address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vqro.rpc.Server.ipv4_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ipv4_address(), output);
  }

  // optional string ipv6_address = 3;
  if (has_ipv6_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ipv6_address().data(), this->ipv6_address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vqro.rpc.Server.ipv6_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->ipv6_address(), output);
  }

  // optional int32 port = 4;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->port(), output);
  }

  // @@protoc_insertion_point(serialize_end:vqro.rpc.Server)
}

::google::protobuf::uint8* Server::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vqro.rpc.Server)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vqro.rpc.Server.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string ipv4_address = 2;
  if (has_ipv4_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ipv4_address().data(), this->ipv4_address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vqro.rpc.Server.ipv4_address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ipv4_address(), target);
  }

  // optional string ipv6_address = 3;
  if (has_ipv6_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ipv6_address().data(), this->ipv6_address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vqro.rpc.Server.ipv6_address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ipv6_address(), target);
  }

  // optional int32 port = 4;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->port(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:vqro.rpc.Server)
  return target;
}

int Server::ByteSize() const {
  int total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional int32 port = 4;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->port());
  }

  switch (address_case()) {
    // optional string ipv4_address = 2;
    case kIpv4Address: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ipv4_address());
      break;
    }
    // optional string ipv6_address = 3;
    case kIpv6Address: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ipv6_address());
      break;
    }
    case ADDRESS_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Server::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Server* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Server*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Server::MergeFrom(const Server& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  switch (from.address_case()) {
    case kIpv4Address: {
      set_ipv4_address(from.ipv4_address());
      break;
    }
    case kIpv6Address: {
      set_ipv6_address(from.ipv6_address());
      break;
    }
    case ADDRESS_NOT_SET: {
      break;
    }
  }
  if (from.name().size() > 0) {
    set_name(from.name());
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
}

void Server::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Server::CopyFrom(const Server& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Server::IsInitialized() const {

  return true;
}

void Server::Swap(Server* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Server temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void Server::UnsafeArenaSwap(Server* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Server::InternalSwap(Server* other) {
  name_.Swap(&other->name_);
  std::swap(port_, other->port_);
  std::swap(address_, other->address_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Server::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Server_descriptor_;
  metadata.reflection = Server_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Server

// optional string name = 1;
 void Server::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& Server::name() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.Server.name)
  return name_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Server::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:vqro.rpc.Server.name)
}
 void Server::set_name(const char* value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:vqro.rpc.Server.name)
}
 void Server::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:vqro.rpc.Server.name)
}
 ::std::string* Server::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:vqro.rpc.Server.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* Server::release_name() {
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* Server::unsafe_arena_release_name() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void Server::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:vqro.rpc.Server.name)
}
 void Server::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:vqro.rpc.Server.name)
}

// optional string ipv4_address = 2;
 bool Server::has_ipv4_address() const {
  return address_case() == kIpv4Address;
}
 void Server::set_has_ipv4_address() {
  _oneof_case_[0] = kIpv4Address;
}
 void Server::clear_ipv4_address() {
  if (has_ipv4_address()) {
    address_.ipv4_address_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        GetArenaNoVirtual());
    clear_has_address();
  }
}
 const ::std::string& Server::ipv4_address() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.Server.ipv4_address)
  if (has_ipv4_address()) {
    return address_.ipv4_address_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
 void Server::set_ipv4_address(const ::std::string& value) {
  if (!has_ipv4_address()) {
    clear_address();
    set_has_ipv4_address();
    address_.ipv4_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  address_.ipv4_address_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:vqro.rpc.Server.ipv4_address)
}
 void Server::set_ipv4_address(const char* value) {
  if (!has_ipv4_address()) {
    clear_address();
    set_has_ipv4_address();
    address_.ipv4_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  address_.ipv4_address_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:vqro.rpc.Server.ipv4_address)
}
 void Server::set_ipv4_address(const char* value,
                             size_t size) {
  if (!has_ipv4_address()) {
    clear_address();
    set_has_ipv4_address();
    address_.ipv4_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  address_.ipv4_address_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:vqro.rpc.Server.ipv4_address)
}
 ::std::string* Server::mutable_ipv4_address() {
  if (!has_ipv4_address()) {
    clear_address();
    set_has_ipv4_address();
    address_.ipv4_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return address_.ipv4_address_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_mutable:vqro.rpc.Server.ipv4_address)
}
 ::std::string* Server::release_ipv4_address() {
  if (has_ipv4_address()) {
    clear_has_address();
    return address_.ipv4_address_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        GetArenaNoVirtual());
  } else {
    return NULL;
  }
}
 ::std::string* Server::unsafe_arena_release_ipv4_address() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (has_ipv4_address()) {
    clear_has_address();
    return address_.ipv4_address_.UnsafeArenaRelease(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  } else {
    return NULL;
  }
}
 void Server::set_allocated_ipv4_address(::std::string* ipv4_address) {
  if (!has_ipv4_address()) {
    address_.ipv4_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_address();
  if (ipv4_address != NULL) {
    set_has_ipv4_address();
    address_.ipv4_address_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ipv4_address,
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_set_allocated:vqro.rpc.Server.ipv4_address)
}
 void Server::unsafe_arena_set_allocated_ipv4_address(::std::string* ipv4_address) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (!has_ipv4_address()) {
    address_.ipv4_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_address();
  if (ipv4_address) {
    set_has_ipv4_address();
    address_.ipv4_address_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ipv4_address, GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_set_allocated:vqro.rpc.Server.ipv4_address)
}

// optional string ipv6_address = 3;
 bool Server::has_ipv6_address() const {
  return address_case() == kIpv6Address;
}
 void Server::set_has_ipv6_address() {
  _oneof_case_[0] = kIpv6Address;
}
 void Server::clear_ipv6_address() {
  if (has_ipv6_address()) {
    address_.ipv6_address_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        GetArenaNoVirtual());
    clear_has_address();
  }
}
 const ::std::string& Server::ipv6_address() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.Server.ipv6_address)
  if (has_ipv6_address()) {
    return address_.ipv6_address_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
 void Server::set_ipv6_address(const ::std::string& value) {
  if (!has_ipv6_address()) {
    clear_address();
    set_has_ipv6_address();
    address_.ipv6_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  address_.ipv6_address_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:vqro.rpc.Server.ipv6_address)
}
 void Server::set_ipv6_address(const char* value) {
  if (!has_ipv6_address()) {
    clear_address();
    set_has_ipv6_address();
    address_.ipv6_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  address_.ipv6_address_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:vqro.rpc.Server.ipv6_address)
}
 void Server::set_ipv6_address(const char* value,
                             size_t size) {
  if (!has_ipv6_address()) {
    clear_address();
    set_has_ipv6_address();
    address_.ipv6_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  address_.ipv6_address_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:vqro.rpc.Server.ipv6_address)
}
 ::std::string* Server::mutable_ipv6_address() {
  if (!has_ipv6_address()) {
    clear_address();
    set_has_ipv6_address();
    address_.ipv6_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return address_.ipv6_address_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_mutable:vqro.rpc.Server.ipv6_address)
}
 ::std::string* Server::release_ipv6_address() {
  if (has_ipv6_address()) {
    clear_has_address();
    return address_.ipv6_address_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        GetArenaNoVirtual());
  } else {
    return NULL;
  }
}
 ::std::string* Server::unsafe_arena_release_ipv6_address() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (has_ipv6_address()) {
    clear_has_address();
    return address_.ipv6_address_.UnsafeArenaRelease(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  } else {
    return NULL;
  }
}
 void Server::set_allocated_ipv6_address(::std::string* ipv6_address) {
  if (!has_ipv6_address()) {
    address_.ipv6_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_address();
  if (ipv6_address != NULL) {
    set_has_ipv6_address();
    address_.ipv6_address_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ipv6_address,
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_set_allocated:vqro.rpc.Server.ipv6_address)
}
 void Server::unsafe_arena_set_allocated_ipv6_address(::std::string* ipv6_address) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (!has_ipv6_address()) {
    address_.ipv6_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_address();
  if (ipv6_address) {
    set_has_ipv6_address();
    address_.ipv6_address_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ipv6_address, GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_set_allocated:vqro.rpc.Server.ipv6_address)
}

// optional int32 port = 4;
 void Server::clear_port() {
  port_ = 0;
}
 ::google::protobuf::int32 Server::port() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.Server.port)
  return port_;
}
 void Server::set_port(::google::protobuf::int32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:vqro.rpc.Server.port)
}

 bool Server::has_address() const {
  return address_case() != ADDRESS_NOT_SET;
}
 void Server::clear_has_address() {
  _oneof_case_[0] = ADDRESS_NOT_SET;
}
Server::AddressCase Server::address_case() const {
  return Server::AddressCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Range::kLowerBoundFieldNumber;
const int Range::kUpperBoundFieldNumber;
const int Range::kNotSyncedFieldNumber;
#endif  // !_MSC_VER

Range::Range()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vqro.rpc.Range)
}

Range::Range(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vqro.rpc.Range)
}

void Range::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Range::Range(const Range& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vqro.rpc.Range)
}

void Range::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  lower_bound_ = 0;
  upper_bound_ = 0;
  not_synced_ = false;
}

Range::~Range() {
  // @@protoc_insertion_point(destructor:vqro.rpc.Range)
  SharedDtor();
}

void Range::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  if (this != default_instance_) {
  }
}

void Range::ArenaDtor(void* object) {
  Range* _this = reinterpret_cast< Range* >(object);
  (void)_this;
}
void Range::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Range::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Range::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Range_descriptor_;
}

const Range& Range::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_controller_2eproto();
  return *default_instance_;
}

Range* Range::default_instance_ = NULL;

Range* Range::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<Range>(arena);
}

void Range::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Range*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(lower_bound_, not_synced_);

#undef ZR_HELPER_
#undef ZR_

}

bool Range::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vqro.rpc.Range)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 lower_bound = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lower_bound_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_upper_bound;
        break;
      }

      // optional int32 upper_bound = 2;
      case 2: {
        if (tag == 16) {
         parse_upper_bound:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &upper_bound_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_not_synced;
        break;
      }

      // optional bool not_synced = 3;
      case 3: {
        if (tag == 24) {
         parse_not_synced:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &not_synced_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vqro.rpc.Range)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vqro.rpc.Range)
  return false;
#undef DO_
}

void Range::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vqro.rpc.Range)
  // optional int32 lower_bound = 1;
  if (this->lower_bound() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->lower_bound(), output);
  }

  // optional int32 upper_bound = 2;
  if (this->upper_bound() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->upper_bound(), output);
  }

  // optional bool not_synced = 3;
  if (this->not_synced() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->not_synced(), output);
  }

  // @@protoc_insertion_point(serialize_end:vqro.rpc.Range)
}

::google::protobuf::uint8* Range::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vqro.rpc.Range)
  // optional int32 lower_bound = 1;
  if (this->lower_bound() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->lower_bound(), target);
  }

  // optional int32 upper_bound = 2;
  if (this->upper_bound() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->upper_bound(), target);
  }

  // optional bool not_synced = 3;
  if (this->not_synced() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->not_synced(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:vqro.rpc.Range)
  return target;
}

int Range::ByteSize() const {
  int total_size = 0;

  // optional int32 lower_bound = 1;
  if (this->lower_bound() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lower_bound());
  }

  // optional int32 upper_bound = 2;
  if (this->upper_bound() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->upper_bound());
  }

  // optional bool not_synced = 3;
  if (this->not_synced() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Range::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Range* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Range*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Range::MergeFrom(const Range& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.lower_bound() != 0) {
    set_lower_bound(from.lower_bound());
  }
  if (from.upper_bound() != 0) {
    set_upper_bound(from.upper_bound());
  }
  if (from.not_synced() != 0) {
    set_not_synced(from.not_synced());
  }
}

void Range::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Range::CopyFrom(const Range& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Range::IsInitialized() const {

  return true;
}

void Range::Swap(Range* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Range temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void Range::UnsafeArenaSwap(Range* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Range::InternalSwap(Range* other) {
  std::swap(lower_bound_, other->lower_bound_);
  std::swap(upper_bound_, other->upper_bound_);
  std::swap(not_synced_, other->not_synced_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Range::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Range_descriptor_;
  metadata.reflection = Range_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Range

// optional int32 lower_bound = 1;
 void Range::clear_lower_bound() {
  lower_bound_ = 0;
}
 ::google::protobuf::int32 Range::lower_bound() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.Range.lower_bound)
  return lower_bound_;
}
 void Range::set_lower_bound(::google::protobuf::int32 value) {
  
  lower_bound_ = value;
  // @@protoc_insertion_point(field_set:vqro.rpc.Range.lower_bound)
}

// optional int32 upper_bound = 2;
 void Range::clear_upper_bound() {
  upper_bound_ = 0;
}
 ::google::protobuf::int32 Range::upper_bound() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.Range.upper_bound)
  return upper_bound_;
}
 void Range::set_upper_bound(::google::protobuf::int32 value) {
  
  upper_bound_ = value;
  // @@protoc_insertion_point(field_set:vqro.rpc.Range.upper_bound)
}

// optional bool not_synced = 3;
 void Range::clear_not_synced() {
  not_synced_ = false;
}
 bool Range::not_synced() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.Range.not_synced)
  return not_synced_;
}
 void Range::set_not_synced(bool value) {
  
  not_synced_ = value;
  // @@protoc_insertion_point(field_set:vqro.rpc.Range.not_synced)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void ServerRanges::_slow_mutable_server() {
  server_ = ::google::protobuf::Arena::CreateMessage< ::vqro::rpc::Server >(
        GetArenaNoVirtual());
}
::vqro::rpc::Server* ServerRanges::_slow_release_server() {
  if (server_ == NULL) {
    return NULL;
  } else {
    ::vqro::rpc::Server* temp = new ::vqro::rpc::Server;
    temp->MergeFrom(*server_);
    server_ = NULL;
    return temp;
  }
}
::vqro::rpc::Server* ServerRanges::unsafe_arena_release_server() {
  
  ::vqro::rpc::Server* temp = server_;
  server_ = NULL;
  return temp;
}
void ServerRanges::_slow_set_allocated_server(
    ::google::protobuf::Arena* message_arena, ::vqro::rpc::Server** server) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*server) == NULL) {
      message_arena->Own(*server);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*server)) {
      ::vqro::rpc::Server* new_server = 
            ::google::protobuf::Arena::CreateMessage< ::vqro::rpc::Server >(
            message_arena);
      new_server->CopyFrom(**server);
      *server = new_server;
    }
}
void ServerRanges::unsafe_arena_set_allocated_server(
    ::vqro::rpc::Server* server) {
  if (GetArenaNoVirtual() == NULL) {
    delete server_;
  }
  server_ = server;
  if (server) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vqro.rpc.ServerRanges.server)
}
#ifndef _MSC_VER
const int ServerRanges::kServerFieldNumber;
const int ServerRanges::kRangeFieldNumber;
#endif  // !_MSC_VER

ServerRanges::ServerRanges()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vqro.rpc.ServerRanges)
}

ServerRanges::ServerRanges(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  range_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vqro.rpc.ServerRanges)
}

void ServerRanges::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  server_ = const_cast< ::vqro::rpc::Server*>(&::vqro::rpc::Server::default_instance());
}

ServerRanges::ServerRanges(const ServerRanges& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vqro.rpc.ServerRanges)
}

void ServerRanges::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  server_ = NULL;
}

ServerRanges::~ServerRanges() {
  // @@protoc_insertion_point(destructor:vqro.rpc.ServerRanges)
  SharedDtor();
}

void ServerRanges::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  if (this != default_instance_) {
    delete server_;
  }
}

void ServerRanges::ArenaDtor(void* object) {
  ServerRanges* _this = reinterpret_cast< ServerRanges* >(object);
  (void)_this;
}
void ServerRanges::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ServerRanges::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerRanges::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerRanges_descriptor_;
}

const ServerRanges& ServerRanges::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_controller_2eproto();
  return *default_instance_;
}

ServerRanges* ServerRanges::default_instance_ = NULL;

ServerRanges* ServerRanges::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ServerRanges>(arena);
}

void ServerRanges::Clear() {
  if (server_ != NULL) delete server_;
  server_ = NULL;
  range_.Clear();
}

bool ServerRanges::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vqro.rpc.ServerRanges)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .vqro.rpc.Server server = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_server()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_range;
        break;
      }

      // repeated .vqro.rpc.Range range = 2;
      case 2: {
        if (tag == 18) {
         parse_range:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_range()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_range;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vqro.rpc.ServerRanges)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vqro.rpc.ServerRanges)
  return false;
#undef DO_
}

void ServerRanges::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vqro.rpc.ServerRanges)
  // optional .vqro.rpc.Server server = 1;
  if (this->has_server()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->server_, output);
  }

  // repeated .vqro.rpc.Range range = 2;
  for (unsigned int i = 0, n = this->range_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->range(i), output);
  }

  // @@protoc_insertion_point(serialize_end:vqro.rpc.ServerRanges)
}

::google::protobuf::uint8* ServerRanges::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vqro.rpc.ServerRanges)
  // optional .vqro.rpc.Server server = 1;
  if (this->has_server()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->server_, target);
  }

  // repeated .vqro.rpc.Range range = 2;
  for (unsigned int i = 0, n = this->range_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->range(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:vqro.rpc.ServerRanges)
  return target;
}

int ServerRanges::ByteSize() const {
  int total_size = 0;

  // optional .vqro.rpc.Server server = 1;
  if (this->has_server()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->server_);
  }

  // repeated .vqro.rpc.Range range = 2;
  total_size += 1 * this->range_size();
  for (int i = 0; i < this->range_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->range(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerRanges::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ServerRanges* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerRanges*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerRanges::MergeFrom(const ServerRanges& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  range_.MergeFrom(from.range_);
  if (from.has_server()) {
    mutable_server()->::vqro::rpc::Server::MergeFrom(from.server());
  }
}

void ServerRanges::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerRanges::CopyFrom(const ServerRanges& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerRanges::IsInitialized() const {

  return true;
}

void ServerRanges::Swap(ServerRanges* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ServerRanges temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void ServerRanges::UnsafeArenaSwap(ServerRanges* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ServerRanges::InternalSwap(ServerRanges* other) {
  std::swap(server_, other->server_);
  range_.UnsafeArenaSwap(&other->range_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServerRanges::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerRanges_descriptor_;
  metadata.reflection = ServerRanges_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServerRanges

// optional .vqro.rpc.Server server = 1;
 bool ServerRanges::has_server() const {
  return !_is_default_instance_ && server_ != NULL;
}
 void ServerRanges::clear_server() {
  if (server_ != NULL) delete server_;
  server_ = NULL;
}
 const ::vqro::rpc::Server& ServerRanges::server() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.ServerRanges.server)
  return server_ != NULL ? *server_ : *default_instance_->server_;
}
 ::vqro::rpc::Server* ServerRanges::mutable_server() {
  
  if (server_ == NULL) {
    _slow_mutable_server();  }
  // @@protoc_insertion_point(field_mutable:vqro.rpc.ServerRanges.server)
  return server_;
}
 ::vqro::rpc::Server* ServerRanges::release_server() {
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_server();
  } else {
    ::vqro::rpc::Server* temp = server_;
    server_ = NULL;
    return temp;
  }
}
 void ServerRanges::set_allocated_server(::vqro::rpc::Server* server) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete server_;
  }
  if (server != NULL) {
    _slow_set_allocated_server(message_arena, &server);
  }
  server_ = server;
  if (server) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:vqro.rpc.ServerRanges.server)
}

// repeated .vqro.rpc.Range range = 2;
 int ServerRanges::range_size() const {
  return range_.size();
}
 void ServerRanges::clear_range() {
  range_.Clear();
}
 const ::vqro::rpc::Range& ServerRanges::range(int index) const {
  // @@protoc_insertion_point(field_get:vqro.rpc.ServerRanges.range)
  return range_.Get(index);
}
 ::vqro::rpc::Range* ServerRanges::mutable_range(int index) {
  // @@protoc_insertion_point(field_mutable:vqro.rpc.ServerRanges.range)
  return range_.Mutable(index);
}
 ::vqro::rpc::Range* ServerRanges::add_range() {
  // @@protoc_insertion_point(field_add:vqro.rpc.ServerRanges.range)
  return range_.Add();
}
 const ::google::protobuf::RepeatedPtrField< ::vqro::rpc::Range >&
ServerRanges::range() const {
  // @@protoc_insertion_point(field_list:vqro.rpc.ServerRanges.range)
  return range_;
}
 ::google::protobuf::RepeatedPtrField< ::vqro::rpc::Range >*
ServerRanges::mutable_range() {
  // @@protoc_insertion_point(field_mutable_list:vqro.rpc.ServerRanges.range)
  return &range_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void ExchangeStateRequest::_slow_mutable_local_state() {
  local_state_ = ::google::protobuf::Arena::CreateMessage< ::vqro::rpc::CellLocalState >(
        GetArenaNoVirtual());
}
::vqro::rpc::CellLocalState* ExchangeStateRequest::_slow_release_local_state() {
  if (local_state_ == NULL) {
    return NULL;
  } else {
    ::vqro::rpc::CellLocalState* temp = new ::vqro::rpc::CellLocalState;
    temp->MergeFrom(*local_state_);
    local_state_ = NULL;
    return temp;
  }
}
::vqro::rpc::CellLocalState* ExchangeStateRequest::unsafe_arena_release_local_state() {
  
  ::vqro::rpc::CellLocalState* temp = local_state_;
  local_state_ = NULL;
  return temp;
}
void ExchangeStateRequest::_slow_set_allocated_local_state(
    ::google::protobuf::Arena* message_arena, ::vqro::rpc::CellLocalState** local_state) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*local_state) == NULL) {
      message_arena->Own(*local_state);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*local_state)) {
      ::vqro::rpc::CellLocalState* new_local_state = 
            ::google::protobuf::Arena::CreateMessage< ::vqro::rpc::CellLocalState >(
            message_arena);
      new_local_state->CopyFrom(**local_state);
      *local_state = new_local_state;
    }
}
void ExchangeStateRequest::unsafe_arena_set_allocated_local_state(
    ::vqro::rpc::CellLocalState* local_state) {
  if (GetArenaNoVirtual() == NULL) {
    delete local_state_;
  }
  local_state_ = local_state;
  if (local_state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vqro.rpc.ExchangeStateRequest.local_state)
}
#ifndef _MSC_VER
const int ExchangeStateRequest::kLocalStateFieldNumber;
const int ExchangeStateRequest::kOnlyDiffSinceRevisionFieldNumber;
#endif  // !_MSC_VER

ExchangeStateRequest::ExchangeStateRequest()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vqro.rpc.ExchangeStateRequest)
}

ExchangeStateRequest::ExchangeStateRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vqro.rpc.ExchangeStateRequest)
}

void ExchangeStateRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  local_state_ = const_cast< ::vqro::rpc::CellLocalState*>(&::vqro::rpc::CellLocalState::default_instance());
}

ExchangeStateRequest::ExchangeStateRequest(const ExchangeStateRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vqro.rpc.ExchangeStateRequest)
}

void ExchangeStateRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  local_state_ = NULL;
  only_diff_since_revision_ = GOOGLE_LONGLONG(0);
}

ExchangeStateRequest::~ExchangeStateRequest() {
  // @@protoc_insertion_point(destructor:vqro.rpc.ExchangeStateRequest)
  SharedDtor();
}

void ExchangeStateRequest::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  if (this != default_instance_) {
    delete local_state_;
  }
}

void ExchangeStateRequest::ArenaDtor(void* object) {
  ExchangeStateRequest* _this = reinterpret_cast< ExchangeStateRequest* >(object);
  (void)_this;
}
void ExchangeStateRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ExchangeStateRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExchangeStateRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExchangeStateRequest_descriptor_;
}

const ExchangeStateRequest& ExchangeStateRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_controller_2eproto();
  return *default_instance_;
}

ExchangeStateRequest* ExchangeStateRequest::default_instance_ = NULL;

ExchangeStateRequest* ExchangeStateRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ExchangeStateRequest>(arena);
}

void ExchangeStateRequest::Clear() {
  if (local_state_ != NULL) delete local_state_;
  local_state_ = NULL;
  only_diff_since_revision_ = GOOGLE_LONGLONG(0);
}

bool ExchangeStateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vqro.rpc.ExchangeStateRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .vqro.rpc.CellLocalState local_state = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_local_state()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_only_diff_since_revision;
        break;
      }

      // optional int64 only_diff_since_revision = 2;
      case 2: {
        if (tag == 16) {
         parse_only_diff_since_revision:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &only_diff_since_revision_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vqro.rpc.ExchangeStateRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vqro.rpc.ExchangeStateRequest)
  return false;
#undef DO_
}

void ExchangeStateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vqro.rpc.ExchangeStateRequest)
  // optional .vqro.rpc.CellLocalState local_state = 1;
  if (this->has_local_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->local_state_, output);
  }

  // optional int64 only_diff_since_revision = 2;
  if (this->only_diff_since_revision() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->only_diff_since_revision(), output);
  }

  // @@protoc_insertion_point(serialize_end:vqro.rpc.ExchangeStateRequest)
}

::google::protobuf::uint8* ExchangeStateRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vqro.rpc.ExchangeStateRequest)
  // optional .vqro.rpc.CellLocalState local_state = 1;
  if (this->has_local_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->local_state_, target);
  }

  // optional int64 only_diff_since_revision = 2;
  if (this->only_diff_since_revision() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->only_diff_since_revision(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:vqro.rpc.ExchangeStateRequest)
  return target;
}

int ExchangeStateRequest::ByteSize() const {
  int total_size = 0;

  // optional .vqro.rpc.CellLocalState local_state = 1;
  if (this->has_local_state()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->local_state_);
  }

  // optional int64 only_diff_since_revision = 2;
  if (this->only_diff_since_revision() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->only_diff_since_revision());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExchangeStateRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ExchangeStateRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExchangeStateRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExchangeStateRequest::MergeFrom(const ExchangeStateRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_local_state()) {
    mutable_local_state()->::vqro::rpc::CellLocalState::MergeFrom(from.local_state());
  }
  if (from.only_diff_since_revision() != 0) {
    set_only_diff_since_revision(from.only_diff_since_revision());
  }
}

void ExchangeStateRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExchangeStateRequest::CopyFrom(const ExchangeStateRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExchangeStateRequest::IsInitialized() const {

  return true;
}

void ExchangeStateRequest::Swap(ExchangeStateRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ExchangeStateRequest temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void ExchangeStateRequest::UnsafeArenaSwap(ExchangeStateRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ExchangeStateRequest::InternalSwap(ExchangeStateRequest* other) {
  std::swap(local_state_, other->local_state_);
  std::swap(only_diff_since_revision_, other->only_diff_since_revision_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ExchangeStateRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExchangeStateRequest_descriptor_;
  metadata.reflection = ExchangeStateRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ExchangeStateRequest

// optional .vqro.rpc.CellLocalState local_state = 1;
 bool ExchangeStateRequest::has_local_state() const {
  return !_is_default_instance_ && local_state_ != NULL;
}
 void ExchangeStateRequest::clear_local_state() {
  if (local_state_ != NULL) delete local_state_;
  local_state_ = NULL;
}
 const ::vqro::rpc::CellLocalState& ExchangeStateRequest::local_state() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.ExchangeStateRequest.local_state)
  return local_state_ != NULL ? *local_state_ : *default_instance_->local_state_;
}
 ::vqro::rpc::CellLocalState* ExchangeStateRequest::mutable_local_state() {
  
  if (local_state_ == NULL) {
    _slow_mutable_local_state();  }
  // @@protoc_insertion_point(field_mutable:vqro.rpc.ExchangeStateRequest.local_state)
  return local_state_;
}
 ::vqro::rpc::CellLocalState* ExchangeStateRequest::release_local_state() {
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_local_state();
  } else {
    ::vqro::rpc::CellLocalState* temp = local_state_;
    local_state_ = NULL;
    return temp;
  }
}
 void ExchangeStateRequest::set_allocated_local_state(::vqro::rpc::CellLocalState* local_state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete local_state_;
  }
  if (local_state != NULL) {
    _slow_set_allocated_local_state(message_arena, &local_state);
  }
  local_state_ = local_state;
  if (local_state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:vqro.rpc.ExchangeStateRequest.local_state)
}

// optional int64 only_diff_since_revision = 2;
 void ExchangeStateRequest::clear_only_diff_since_revision() {
  only_diff_since_revision_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 ExchangeStateRequest::only_diff_since_revision() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.ExchangeStateRequest.only_diff_since_revision)
  return only_diff_since_revision_;
}
 void ExchangeStateRequest::set_only_diff_since_revision(::google::protobuf::int64 value) {
  
  only_diff_since_revision_ = value;
  // @@protoc_insertion_point(field_set:vqro.rpc.ExchangeStateRequest.only_diff_since_revision)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int ExchangeStateResponse::kFullFieldNumber;
const int ExchangeStateResponse::kDiffFieldNumber;
#endif  // !_MSC_VER

ExchangeStateResponse::ExchangeStateResponse()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vqro.rpc.ExchangeStateResponse)
}

ExchangeStateResponse::ExchangeStateResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vqro.rpc.ExchangeStateResponse)
}

void ExchangeStateResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  ExchangeStateResponse_default_oneof_instance_->full_ = const_cast< ::vqro::rpc::CellGlobalState*>(&::vqro::rpc::CellGlobalState::default_instance());
  ExchangeStateResponse_default_oneof_instance_->diff_ = const_cast< ::vqro::rpc::CellGlobalStateDiff*>(&::vqro::rpc::CellGlobalStateDiff::default_instance());
}

ExchangeStateResponse::ExchangeStateResponse(const ExchangeStateResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vqro.rpc.ExchangeStateResponse)
}

void ExchangeStateResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  clear_has_state();
}

ExchangeStateResponse::~ExchangeStateResponse() {
  // @@protoc_insertion_point(destructor:vqro.rpc.ExchangeStateResponse)
  SharedDtor();
}

void ExchangeStateResponse::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  if (has_state()) {
    clear_state();
  }
  if (this != default_instance_) {
  }
}

void ExchangeStateResponse::ArenaDtor(void* object) {
  ExchangeStateResponse* _this = reinterpret_cast< ExchangeStateResponse* >(object);
  (void)_this;
}
void ExchangeStateResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ExchangeStateResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExchangeStateResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExchangeStateResponse_descriptor_;
}

const ExchangeStateResponse& ExchangeStateResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_controller_2eproto();
  return *default_instance_;
}

ExchangeStateResponse* ExchangeStateResponse::default_instance_ = NULL;

ExchangeStateResponse* ExchangeStateResponse::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ExchangeStateResponse>(arena);
}

void ExchangeStateResponse::clear_state() {
  switch(state_case()) {
    case kFull: {
      if (GetArenaNoVirtual() == NULL) {
        delete state_.full_;
      }
      break;
    }
    case kDiff: {
      if (GetArenaNoVirtual() == NULL) {
        delete state_.diff_;
      }
      break;
    }
    case STATE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = STATE_NOT_SET;
}


void ExchangeStateResponse::Clear() {
  clear_state();
}

bool ExchangeStateResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vqro.rpc.ExchangeStateResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .vqro.rpc.CellGlobalState full = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_full()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_diff;
        break;
      }

      // optional .vqro.rpc.CellGlobalStateDiff diff = 2;
      case 2: {
        if (tag == 18) {
         parse_diff:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_diff()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vqro.rpc.ExchangeStateResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vqro.rpc.ExchangeStateResponse)
  return false;
#undef DO_
}

void ExchangeStateResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vqro.rpc.ExchangeStateResponse)
  // optional .vqro.rpc.CellGlobalState full = 1;
  if (has_full()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *state_.full_, output);
  }

  // optional .vqro.rpc.CellGlobalStateDiff diff = 2;
  if (has_diff()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *state_.diff_, output);
  }

  // @@protoc_insertion_point(serialize_end:vqro.rpc.ExchangeStateResponse)
}

::google::protobuf::uint8* ExchangeStateResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vqro.rpc.ExchangeStateResponse)
  // optional .vqro.rpc.CellGlobalState full = 1;
  if (has_full()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *state_.full_, target);
  }

  // optional .vqro.rpc.CellGlobalStateDiff diff = 2;
  if (has_diff()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *state_.diff_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:vqro.rpc.ExchangeStateResponse)
  return target;
}

int ExchangeStateResponse::ByteSize() const {
  int total_size = 0;

  switch (state_case()) {
    // optional .vqro.rpc.CellGlobalState full = 1;
    case kFull: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *state_.full_);
      break;
    }
    // optional .vqro.rpc.CellGlobalStateDiff diff = 2;
    case kDiff: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *state_.diff_);
      break;
    }
    case STATE_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExchangeStateResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ExchangeStateResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExchangeStateResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExchangeStateResponse::MergeFrom(const ExchangeStateResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  switch (from.state_case()) {
    case kFull: {
      mutable_full()->::vqro::rpc::CellGlobalState::MergeFrom(from.full());
      break;
    }
    case kDiff: {
      mutable_diff()->::vqro::rpc::CellGlobalStateDiff::MergeFrom(from.diff());
      break;
    }
    case STATE_NOT_SET: {
      break;
    }
  }
}

void ExchangeStateResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExchangeStateResponse::CopyFrom(const ExchangeStateResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExchangeStateResponse::IsInitialized() const {

  return true;
}

void ExchangeStateResponse::Swap(ExchangeStateResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ExchangeStateResponse temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void ExchangeStateResponse::UnsafeArenaSwap(ExchangeStateResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ExchangeStateResponse::InternalSwap(ExchangeStateResponse* other) {
  std::swap(state_, other->state_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ExchangeStateResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExchangeStateResponse_descriptor_;
  metadata.reflection = ExchangeStateResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ExchangeStateResponse

// optional .vqro.rpc.CellGlobalState full = 1;
 bool ExchangeStateResponse::has_full() const {
  return state_case() == kFull;
}
 void ExchangeStateResponse::set_has_full() {
  _oneof_case_[0] = kFull;
}
 void ExchangeStateResponse::clear_full() {
  if (has_full()) {
    if (GetArenaNoVirtual() == NULL) {
      delete state_.full_;
    }
    clear_has_state();
  }
}
 const ::vqro::rpc::CellGlobalState& ExchangeStateResponse::full() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.ExchangeStateResponse.full)
  return has_full() ? *state_.full_
                      : ::vqro::rpc::CellGlobalState::default_instance();
}
 ::vqro::rpc::CellGlobalState* ExchangeStateResponse::mutable_full() {
  if (!has_full()) {
    clear_state();
    set_has_full();
    state_.full_ = 
      ::google::protobuf::Arena::CreateMessage< ::vqro::rpc::CellGlobalState >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:vqro.rpc.ExchangeStateResponse.full)
  return state_.full_;
}
 ::vqro::rpc::CellGlobalState* ExchangeStateResponse::release_full() {
  if (has_full()) {
    clear_has_state();
    if (GetArenaNoVirtual() != NULL) {
      ::vqro::rpc::CellGlobalState* temp = new ::vqro::rpc::CellGlobalState;
      temp->MergeFrom(*state_.full_);
      state_.full_ = NULL;
      return temp;
    } else {
      ::vqro::rpc::CellGlobalState* temp = state_.full_;
      state_.full_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
 ::vqro::rpc::CellGlobalState* ExchangeStateResponse::unsafe_arena_release_full() {
  if (has_full()) {
    clear_has_state();
    ::vqro::rpc::CellGlobalState* temp = state_.full_;
    state_.full_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void ExchangeStateResponse::set_allocated_full(::vqro::rpc::CellGlobalState* full) {
  clear_state();
  if (full) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(full) == NULL) {
      GetArenaNoVirtual()->Own(full);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(full)) {
      ::vqro::rpc::CellGlobalState* new_full = 
          ::google::protobuf::Arena::CreateMessage< ::vqro::rpc::CellGlobalState >(
          GetArenaNoVirtual());
      new_full->CopyFrom(*full);
      full = new_full;
    }
    set_has_full();
    state_.full_ = full;
  }
  // @@protoc_insertion_point(field_set_allocated:vqro.rpc.ExchangeStateResponse.full)
}
 void ExchangeStateResponse::unsafe_arena_set_allocated_full(::vqro::rpc::CellGlobalState* full) {
  clear_state();
  if (full) {
    set_has_full();
    state_.full_ = full;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vqro.rpc.ExchangeStateResponse.full)
}

// optional .vqro.rpc.CellGlobalStateDiff diff = 2;
 bool ExchangeStateResponse::has_diff() const {
  return state_case() == kDiff;
}
 void ExchangeStateResponse::set_has_diff() {
  _oneof_case_[0] = kDiff;
}
 void ExchangeStateResponse::clear_diff() {
  if (has_diff()) {
    if (GetArenaNoVirtual() == NULL) {
      delete state_.diff_;
    }
    clear_has_state();
  }
}
 const ::vqro::rpc::CellGlobalStateDiff& ExchangeStateResponse::diff() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.ExchangeStateResponse.diff)
  return has_diff() ? *state_.diff_
                      : ::vqro::rpc::CellGlobalStateDiff::default_instance();
}
 ::vqro::rpc::CellGlobalStateDiff* ExchangeStateResponse::mutable_diff() {
  if (!has_diff()) {
    clear_state();
    set_has_diff();
    state_.diff_ = 
      ::google::protobuf::Arena::CreateMessage< ::vqro::rpc::CellGlobalStateDiff >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:vqro.rpc.ExchangeStateResponse.diff)
  return state_.diff_;
}
 ::vqro::rpc::CellGlobalStateDiff* ExchangeStateResponse::release_diff() {
  if (has_diff()) {
    clear_has_state();
    if (GetArenaNoVirtual() != NULL) {
      ::vqro::rpc::CellGlobalStateDiff* temp = new ::vqro::rpc::CellGlobalStateDiff;
      temp->MergeFrom(*state_.diff_);
      state_.diff_ = NULL;
      return temp;
    } else {
      ::vqro::rpc::CellGlobalStateDiff* temp = state_.diff_;
      state_.diff_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
 ::vqro::rpc::CellGlobalStateDiff* ExchangeStateResponse::unsafe_arena_release_diff() {
  if (has_diff()) {
    clear_has_state();
    ::vqro::rpc::CellGlobalStateDiff* temp = state_.diff_;
    state_.diff_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void ExchangeStateResponse::set_allocated_diff(::vqro::rpc::CellGlobalStateDiff* diff) {
  clear_state();
  if (diff) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(diff) == NULL) {
      GetArenaNoVirtual()->Own(diff);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(diff)) {
      ::vqro::rpc::CellGlobalStateDiff* new_diff = 
          ::google::protobuf::Arena::CreateMessage< ::vqro::rpc::CellGlobalStateDiff >(
          GetArenaNoVirtual());
      new_diff->CopyFrom(*diff);
      diff = new_diff;
    }
    set_has_diff();
    state_.diff_ = diff;
  }
  // @@protoc_insertion_point(field_set_allocated:vqro.rpc.ExchangeStateResponse.diff)
}
 void ExchangeStateResponse::unsafe_arena_set_allocated_diff(::vqro::rpc::CellGlobalStateDiff* diff) {
  clear_state();
  if (diff) {
    set_has_diff();
    state_.diff_ = diff;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vqro.rpc.ExchangeStateResponse.diff)
}

 bool ExchangeStateResponse::has_state() const {
  return state_case() != STATE_NOT_SET;
}
 void ExchangeStateResponse::clear_has_state() {
  _oneof_case_[0] = STATE_NOT_SET;
}
ExchangeStateResponse::StateCase ExchangeStateResponse::state_case() const {
  return ExchangeStateResponse::StateCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CellGlobalState::kRevisionFieldNumber;
const int CellGlobalState::kControllersFieldNumber;
const int CellGlobalState::kRangeAssignmentsFieldNumber;
#endif  // !_MSC_VER

CellGlobalState::CellGlobalState()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vqro.rpc.CellGlobalState)
}

CellGlobalState::CellGlobalState(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  controllers_(arena),
  range_assignments_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vqro.rpc.CellGlobalState)
}

void CellGlobalState::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CellGlobalState::CellGlobalState(const CellGlobalState& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vqro.rpc.CellGlobalState)
}

void CellGlobalState::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  revision_ = GOOGLE_LONGLONG(0);
}

CellGlobalState::~CellGlobalState() {
  // @@protoc_insertion_point(destructor:vqro.rpc.CellGlobalState)
  SharedDtor();
}

void CellGlobalState::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  if (this != default_instance_) {
  }
}

void CellGlobalState::ArenaDtor(void* object) {
  CellGlobalState* _this = reinterpret_cast< CellGlobalState* >(object);
  (void)_this;
}
void CellGlobalState::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void CellGlobalState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CellGlobalState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CellGlobalState_descriptor_;
}

const CellGlobalState& CellGlobalState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_controller_2eproto();
  return *default_instance_;
}

CellGlobalState* CellGlobalState::default_instance_ = NULL;

CellGlobalState* CellGlobalState::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<CellGlobalState>(arena);
}

void CellGlobalState::Clear() {
  revision_ = GOOGLE_LONGLONG(0);
  controllers_.Clear();
  range_assignments_.Clear();
}

bool CellGlobalState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vqro.rpc.CellGlobalState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 revision = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &revision_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_controllers;
        break;
      }

      // repeated .vqro.rpc.Server controllers = 2;
      case 2: {
        if (tag == 18) {
         parse_controllers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_controllers()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_controllers;
        if (input->ExpectTag(26)) goto parse_range_assignments;
        break;
      }

      // repeated .vqro.rpc.ServerRanges range_assignments = 3;
      case 3: {
        if (tag == 26) {
         parse_range_assignments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_range_assignments()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_range_assignments;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vqro.rpc.CellGlobalState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vqro.rpc.CellGlobalState)
  return false;
#undef DO_
}

void CellGlobalState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vqro.rpc.CellGlobalState)
  // optional int64 revision = 1;
  if (this->revision() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->revision(), output);
  }

  // repeated .vqro.rpc.Server controllers = 2;
  for (unsigned int i = 0, n = this->controllers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->controllers(i), output);
  }

  // repeated .vqro.rpc.ServerRanges range_assignments = 3;
  for (unsigned int i = 0, n = this->range_assignments_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->range_assignments(i), output);
  }

  // @@protoc_insertion_point(serialize_end:vqro.rpc.CellGlobalState)
}

::google::protobuf::uint8* CellGlobalState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vqro.rpc.CellGlobalState)
  // optional int64 revision = 1;
  if (this->revision() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->revision(), target);
  }

  // repeated .vqro.rpc.Server controllers = 2;
  for (unsigned int i = 0, n = this->controllers_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->controllers(i), target);
  }

  // repeated .vqro.rpc.ServerRanges range_assignments = 3;
  for (unsigned int i = 0, n = this->range_assignments_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->range_assignments(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:vqro.rpc.CellGlobalState)
  return target;
}

int CellGlobalState::ByteSize() const {
  int total_size = 0;

  // optional int64 revision = 1;
  if (this->revision() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->revision());
  }

  // repeated .vqro.rpc.Server controllers = 2;
  total_size += 1 * this->controllers_size();
  for (int i = 0; i < this->controllers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->controllers(i));
  }

  // repeated .vqro.rpc.ServerRanges range_assignments = 3;
  total_size += 1 * this->range_assignments_size();
  for (int i = 0; i < this->range_assignments_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->range_assignments(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CellGlobalState::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CellGlobalState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CellGlobalState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CellGlobalState::MergeFrom(const CellGlobalState& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  controllers_.MergeFrom(from.controllers_);
  range_assignments_.MergeFrom(from.range_assignments_);
  if (from.revision() != 0) {
    set_revision(from.revision());
  }
}

void CellGlobalState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CellGlobalState::CopyFrom(const CellGlobalState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellGlobalState::IsInitialized() const {

  return true;
}

void CellGlobalState::Swap(CellGlobalState* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    CellGlobalState temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void CellGlobalState::UnsafeArenaSwap(CellGlobalState* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void CellGlobalState::InternalSwap(CellGlobalState* other) {
  std::swap(revision_, other->revision_);
  controllers_.UnsafeArenaSwap(&other->controllers_);
  range_assignments_.UnsafeArenaSwap(&other->range_assignments_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CellGlobalState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CellGlobalState_descriptor_;
  metadata.reflection = CellGlobalState_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CellGlobalState

// optional int64 revision = 1;
 void CellGlobalState::clear_revision() {
  revision_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 CellGlobalState::revision() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.CellGlobalState.revision)
  return revision_;
}
 void CellGlobalState::set_revision(::google::protobuf::int64 value) {
  
  revision_ = value;
  // @@protoc_insertion_point(field_set:vqro.rpc.CellGlobalState.revision)
}

// repeated .vqro.rpc.Server controllers = 2;
 int CellGlobalState::controllers_size() const {
  return controllers_.size();
}
 void CellGlobalState::clear_controllers() {
  controllers_.Clear();
}
 const ::vqro::rpc::Server& CellGlobalState::controllers(int index) const {
  // @@protoc_insertion_point(field_get:vqro.rpc.CellGlobalState.controllers)
  return controllers_.Get(index);
}
 ::vqro::rpc::Server* CellGlobalState::mutable_controllers(int index) {
  // @@protoc_insertion_point(field_mutable:vqro.rpc.CellGlobalState.controllers)
  return controllers_.Mutable(index);
}
 ::vqro::rpc::Server* CellGlobalState::add_controllers() {
  // @@protoc_insertion_point(field_add:vqro.rpc.CellGlobalState.controllers)
  return controllers_.Add();
}
 const ::google::protobuf::RepeatedPtrField< ::vqro::rpc::Server >&
CellGlobalState::controllers() const {
  // @@protoc_insertion_point(field_list:vqro.rpc.CellGlobalState.controllers)
  return controllers_;
}
 ::google::protobuf::RepeatedPtrField< ::vqro::rpc::Server >*
CellGlobalState::mutable_controllers() {
  // @@protoc_insertion_point(field_mutable_list:vqro.rpc.CellGlobalState.controllers)
  return &controllers_;
}

// repeated .vqro.rpc.ServerRanges range_assignments = 3;
 int CellGlobalState::range_assignments_size() const {
  return range_assignments_.size();
}
 void CellGlobalState::clear_range_assignments() {
  range_assignments_.Clear();
}
 const ::vqro::rpc::ServerRanges& CellGlobalState::range_assignments(int index) const {
  // @@protoc_insertion_point(field_get:vqro.rpc.CellGlobalState.range_assignments)
  return range_assignments_.Get(index);
}
 ::vqro::rpc::ServerRanges* CellGlobalState::mutable_range_assignments(int index) {
  // @@protoc_insertion_point(field_mutable:vqro.rpc.CellGlobalState.range_assignments)
  return range_assignments_.Mutable(index);
}
 ::vqro::rpc::ServerRanges* CellGlobalState::add_range_assignments() {
  // @@protoc_insertion_point(field_add:vqro.rpc.CellGlobalState.range_assignments)
  return range_assignments_.Add();
}
 const ::google::protobuf::RepeatedPtrField< ::vqro::rpc::ServerRanges >&
CellGlobalState::range_assignments() const {
  // @@protoc_insertion_point(field_list:vqro.rpc.CellGlobalState.range_assignments)
  return range_assignments_;
}
 ::google::protobuf::RepeatedPtrField< ::vqro::rpc::ServerRanges >*
CellGlobalState::mutable_range_assignments() {
  // @@protoc_insertion_point(field_mutable_list:vqro.rpc.CellGlobalState.range_assignments)
  return &range_assignments_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CellGlobalStateDiff::kFromRevisionFieldNumber;
const int CellGlobalStateDiff::kToRevisionFieldNumber;
const int CellGlobalStateDiff::kAdditionsFieldNumber;
const int CellGlobalStateDiff::kRemovalsFieldNumber;
#endif  // !_MSC_VER

CellGlobalStateDiff::CellGlobalStateDiff()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vqro.rpc.CellGlobalStateDiff)
}

CellGlobalStateDiff::CellGlobalStateDiff(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  additions_(arena),
  removals_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vqro.rpc.CellGlobalStateDiff)
}

void CellGlobalStateDiff::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CellGlobalStateDiff::CellGlobalStateDiff(const CellGlobalStateDiff& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vqro.rpc.CellGlobalStateDiff)
}

void CellGlobalStateDiff::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  from_revision_ = GOOGLE_LONGLONG(0);
  to_revision_ = GOOGLE_LONGLONG(0);
}

CellGlobalStateDiff::~CellGlobalStateDiff() {
  // @@protoc_insertion_point(destructor:vqro.rpc.CellGlobalStateDiff)
  SharedDtor();
}

void CellGlobalStateDiff::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  if (this != default_instance_) {
  }
}

void CellGlobalStateDiff::ArenaDtor(void* object) {
  CellGlobalStateDiff* _this = reinterpret_cast< CellGlobalStateDiff* >(object);
  (void)_this;
}
void CellGlobalStateDiff::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void CellGlobalStateDiff::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CellGlobalStateDiff::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CellGlobalStateDiff_descriptor_;
}

const CellGlobalStateDiff& CellGlobalStateDiff::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_controller_2eproto();
  return *default_instance_;
}

CellGlobalStateDiff* CellGlobalStateDiff::default_instance_ = NULL;

CellGlobalStateDiff* CellGlobalStateDiff::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<CellGlobalStateDiff>(arena);
}

void CellGlobalStateDiff::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CellGlobalStateDiff*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(from_revision_, to_revision_);

#undef ZR_HELPER_
#undef ZR_

  additions_.Clear();
  removals_.Clear();
}

bool CellGlobalStateDiff::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vqro.rpc.CellGlobalStateDiff)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 from_revision = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &from_revision_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_to_revision;
        break;
      }

      // optional int64 to_revision = 2;
      case 2: {
        if (tag == 16) {
         parse_to_revision:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &to_revision_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_additions;
        break;
      }

      // repeated .vqro.rpc.ServerRanges additions = 3;
      case 3: {
        if (tag == 26) {
         parse_additions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_additions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_additions;
        if (input->ExpectTag(34)) goto parse_removals;
        break;
      }

      // repeated .vqro.rpc.ServerRanges removals = 4;
      case 4: {
        if (tag == 34) {
         parse_removals:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_removals()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_removals;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vqro.rpc.CellGlobalStateDiff)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vqro.rpc.CellGlobalStateDiff)
  return false;
#undef DO_
}

void CellGlobalStateDiff::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vqro.rpc.CellGlobalStateDiff)
  // optional int64 from_revision = 1;
  if (this->from_revision() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->from_revision(), output);
  }

  // optional int64 to_revision = 2;
  if (this->to_revision() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->to_revision(), output);
  }

  // repeated .vqro.rpc.ServerRanges additions = 3;
  for (unsigned int i = 0, n = this->additions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->additions(i), output);
  }

  // repeated .vqro.rpc.ServerRanges removals = 4;
  for (unsigned int i = 0, n = this->removals_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->removals(i), output);
  }

  // @@protoc_insertion_point(serialize_end:vqro.rpc.CellGlobalStateDiff)
}

::google::protobuf::uint8* CellGlobalStateDiff::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vqro.rpc.CellGlobalStateDiff)
  // optional int64 from_revision = 1;
  if (this->from_revision() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->from_revision(), target);
  }

  // optional int64 to_revision = 2;
  if (this->to_revision() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->to_revision(), target);
  }

  // repeated .vqro.rpc.ServerRanges additions = 3;
  for (unsigned int i = 0, n = this->additions_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->additions(i), target);
  }

  // repeated .vqro.rpc.ServerRanges removals = 4;
  for (unsigned int i = 0, n = this->removals_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->removals(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:vqro.rpc.CellGlobalStateDiff)
  return target;
}

int CellGlobalStateDiff::ByteSize() const {
  int total_size = 0;

  // optional int64 from_revision = 1;
  if (this->from_revision() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->from_revision());
  }

  // optional int64 to_revision = 2;
  if (this->to_revision() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->to_revision());
  }

  // repeated .vqro.rpc.ServerRanges additions = 3;
  total_size += 1 * this->additions_size();
  for (int i = 0; i < this->additions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->additions(i));
  }

  // repeated .vqro.rpc.ServerRanges removals = 4;
  total_size += 1 * this->removals_size();
  for (int i = 0; i < this->removals_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->removals(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CellGlobalStateDiff::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CellGlobalStateDiff* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CellGlobalStateDiff*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CellGlobalStateDiff::MergeFrom(const CellGlobalStateDiff& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  additions_.MergeFrom(from.additions_);
  removals_.MergeFrom(from.removals_);
  if (from.from_revision() != 0) {
    set_from_revision(from.from_revision());
  }
  if (from.to_revision() != 0) {
    set_to_revision(from.to_revision());
  }
}

void CellGlobalStateDiff::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CellGlobalStateDiff::CopyFrom(const CellGlobalStateDiff& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellGlobalStateDiff::IsInitialized() const {

  return true;
}

void CellGlobalStateDiff::Swap(CellGlobalStateDiff* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    CellGlobalStateDiff temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void CellGlobalStateDiff::UnsafeArenaSwap(CellGlobalStateDiff* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void CellGlobalStateDiff::InternalSwap(CellGlobalStateDiff* other) {
  std::swap(from_revision_, other->from_revision_);
  std::swap(to_revision_, other->to_revision_);
  additions_.UnsafeArenaSwap(&other->additions_);
  removals_.UnsafeArenaSwap(&other->removals_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CellGlobalStateDiff::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CellGlobalStateDiff_descriptor_;
  metadata.reflection = CellGlobalStateDiff_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CellGlobalStateDiff

// optional int64 from_revision = 1;
 void CellGlobalStateDiff::clear_from_revision() {
  from_revision_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 CellGlobalStateDiff::from_revision() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.CellGlobalStateDiff.from_revision)
  return from_revision_;
}
 void CellGlobalStateDiff::set_from_revision(::google::protobuf::int64 value) {
  
  from_revision_ = value;
  // @@protoc_insertion_point(field_set:vqro.rpc.CellGlobalStateDiff.from_revision)
}

// optional int64 to_revision = 2;
 void CellGlobalStateDiff::clear_to_revision() {
  to_revision_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 CellGlobalStateDiff::to_revision() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.CellGlobalStateDiff.to_revision)
  return to_revision_;
}
 void CellGlobalStateDiff::set_to_revision(::google::protobuf::int64 value) {
  
  to_revision_ = value;
  // @@protoc_insertion_point(field_set:vqro.rpc.CellGlobalStateDiff.to_revision)
}

// repeated .vqro.rpc.ServerRanges additions = 3;
 int CellGlobalStateDiff::additions_size() const {
  return additions_.size();
}
 void CellGlobalStateDiff::clear_additions() {
  additions_.Clear();
}
 const ::vqro::rpc::ServerRanges& CellGlobalStateDiff::additions(int index) const {
  // @@protoc_insertion_point(field_get:vqro.rpc.CellGlobalStateDiff.additions)
  return additions_.Get(index);
}
 ::vqro::rpc::ServerRanges* CellGlobalStateDiff::mutable_additions(int index) {
  // @@protoc_insertion_point(field_mutable:vqro.rpc.CellGlobalStateDiff.additions)
  return additions_.Mutable(index);
}
 ::vqro::rpc::ServerRanges* CellGlobalStateDiff::add_additions() {
  // @@protoc_insertion_point(field_add:vqro.rpc.CellGlobalStateDiff.additions)
  return additions_.Add();
}
 const ::google::protobuf::RepeatedPtrField< ::vqro::rpc::ServerRanges >&
CellGlobalStateDiff::additions() const {
  // @@protoc_insertion_point(field_list:vqro.rpc.CellGlobalStateDiff.additions)
  return additions_;
}
 ::google::protobuf::RepeatedPtrField< ::vqro::rpc::ServerRanges >*
CellGlobalStateDiff::mutable_additions() {
  // @@protoc_insertion_point(field_mutable_list:vqro.rpc.CellGlobalStateDiff.additions)
  return &additions_;
}

// repeated .vqro.rpc.ServerRanges removals = 4;
 int CellGlobalStateDiff::removals_size() const {
  return removals_.size();
}
 void CellGlobalStateDiff::clear_removals() {
  removals_.Clear();
}
 const ::vqro::rpc::ServerRanges& CellGlobalStateDiff::removals(int index) const {
  // @@protoc_insertion_point(field_get:vqro.rpc.CellGlobalStateDiff.removals)
  return removals_.Get(index);
}
 ::vqro::rpc::ServerRanges* CellGlobalStateDiff::mutable_removals(int index) {
  // @@protoc_insertion_point(field_mutable:vqro.rpc.CellGlobalStateDiff.removals)
  return removals_.Mutable(index);
}
 ::vqro::rpc::ServerRanges* CellGlobalStateDiff::add_removals() {
  // @@protoc_insertion_point(field_add:vqro.rpc.CellGlobalStateDiff.removals)
  return removals_.Add();
}
 const ::google::protobuf::RepeatedPtrField< ::vqro::rpc::ServerRanges >&
CellGlobalStateDiff::removals() const {
  // @@protoc_insertion_point(field_list:vqro.rpc.CellGlobalStateDiff.removals)
  return removals_;
}
 ::google::protobuf::RepeatedPtrField< ::vqro::rpc::ServerRanges >*
CellGlobalStateDiff::mutable_removals() {
  // @@protoc_insertion_point(field_mutable_list:vqro.rpc.CellGlobalStateDiff.removals)
  return &removals_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CellLocalState::kVaquerosFieldNumber;
#endif  // !_MSC_VER

CellLocalState::CellLocalState()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vqro.rpc.CellLocalState)
}

CellLocalState::CellLocalState(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  vaqueros_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vqro.rpc.CellLocalState)
}

void CellLocalState::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CellLocalState::CellLocalState(const CellLocalState& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vqro.rpc.CellLocalState)
}

void CellLocalState::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

CellLocalState::~CellLocalState() {
  // @@protoc_insertion_point(destructor:vqro.rpc.CellLocalState)
  SharedDtor();
}

void CellLocalState::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  if (this != default_instance_) {
  }
}

void CellLocalState::ArenaDtor(void* object) {
  CellLocalState* _this = reinterpret_cast< CellLocalState* >(object);
  (void)_this;
}
void CellLocalState::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void CellLocalState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CellLocalState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CellLocalState_descriptor_;
}

const CellLocalState& CellLocalState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_controller_2eproto();
  return *default_instance_;
}

CellLocalState* CellLocalState::default_instance_ = NULL;

CellLocalState* CellLocalState::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<CellLocalState>(arena);
}

void CellLocalState::Clear() {
  vaqueros_.Clear();
}

bool CellLocalState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vqro.rpc.CellLocalState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .vqro.rpc.VaqueroState vaqueros = 1;
      case 1: {
        if (tag == 10) {
         parse_vaqueros:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vaqueros()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_vaqueros;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vqro.rpc.CellLocalState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vqro.rpc.CellLocalState)
  return false;
#undef DO_
}

void CellLocalState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vqro.rpc.CellLocalState)
  // repeated .vqro.rpc.VaqueroState vaqueros = 1;
  for (unsigned int i = 0, n = this->vaqueros_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->vaqueros(i), output);
  }

  // @@protoc_insertion_point(serialize_end:vqro.rpc.CellLocalState)
}

::google::protobuf::uint8* CellLocalState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vqro.rpc.CellLocalState)
  // repeated .vqro.rpc.VaqueroState vaqueros = 1;
  for (unsigned int i = 0, n = this->vaqueros_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->vaqueros(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:vqro.rpc.CellLocalState)
  return target;
}

int CellLocalState::ByteSize() const {
  int total_size = 0;

  // repeated .vqro.rpc.VaqueroState vaqueros = 1;
  total_size += 1 * this->vaqueros_size();
  for (int i = 0; i < this->vaqueros_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vaqueros(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CellLocalState::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CellLocalState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CellLocalState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CellLocalState::MergeFrom(const CellLocalState& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  vaqueros_.MergeFrom(from.vaqueros_);
}

void CellLocalState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CellLocalState::CopyFrom(const CellLocalState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellLocalState::IsInitialized() const {

  return true;
}

void CellLocalState::Swap(CellLocalState* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    CellLocalState temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void CellLocalState::UnsafeArenaSwap(CellLocalState* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void CellLocalState::InternalSwap(CellLocalState* other) {
  vaqueros_.UnsafeArenaSwap(&other->vaqueros_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CellLocalState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CellLocalState_descriptor_;
  metadata.reflection = CellLocalState_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CellLocalState

// repeated .vqro.rpc.VaqueroState vaqueros = 1;
 int CellLocalState::vaqueros_size() const {
  return vaqueros_.size();
}
 void CellLocalState::clear_vaqueros() {
  vaqueros_.Clear();
}
 const ::vqro::rpc::VaqueroState& CellLocalState::vaqueros(int index) const {
  // @@protoc_insertion_point(field_get:vqro.rpc.CellLocalState.vaqueros)
  return vaqueros_.Get(index);
}
 ::vqro::rpc::VaqueroState* CellLocalState::mutable_vaqueros(int index) {
  // @@protoc_insertion_point(field_mutable:vqro.rpc.CellLocalState.vaqueros)
  return vaqueros_.Mutable(index);
}
 ::vqro::rpc::VaqueroState* CellLocalState::add_vaqueros() {
  // @@protoc_insertion_point(field_add:vqro.rpc.CellLocalState.vaqueros)
  return vaqueros_.Add();
}
 const ::google::protobuf::RepeatedPtrField< ::vqro::rpc::VaqueroState >&
CellLocalState::vaqueros() const {
  // @@protoc_insertion_point(field_list:vqro.rpc.CellLocalState.vaqueros)
  return vaqueros_;
}
 ::google::protobuf::RepeatedPtrField< ::vqro::rpc::VaqueroState >*
CellLocalState::mutable_vaqueros() {
  // @@protoc_insertion_point(field_mutable_list:vqro.rpc.CellLocalState.vaqueros)
  return &vaqueros_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void VaqueroState::_slow_mutable_server() {
  server_ = ::google::protobuf::Arena::CreateMessage< ::vqro::rpc::Server >(
        GetArenaNoVirtual());
}
::vqro::rpc::Server* VaqueroState::_slow_release_server() {
  if (server_ == NULL) {
    return NULL;
  } else {
    ::vqro::rpc::Server* temp = new ::vqro::rpc::Server;
    temp->MergeFrom(*server_);
    server_ = NULL;
    return temp;
  }
}
::vqro::rpc::Server* VaqueroState::unsafe_arena_release_server() {
  
  ::vqro::rpc::Server* temp = server_;
  server_ = NULL;
  return temp;
}
void VaqueroState::_slow_set_allocated_server(
    ::google::protobuf::Arena* message_arena, ::vqro::rpc::Server** server) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*server) == NULL) {
      message_arena->Own(*server);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*server)) {
      ::vqro::rpc::Server* new_server = 
            ::google::protobuf::Arena::CreateMessage< ::vqro::rpc::Server >(
            message_arena);
      new_server->CopyFrom(**server);
      *server = new_server;
    }
}
void VaqueroState::unsafe_arena_set_allocated_server(
    ::vqro::rpc::Server* server) {
  if (GetArenaNoVirtual() == NULL) {
    delete server_;
  }
  server_ = server;
  if (server) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vqro.rpc.VaqueroState.server)
}
void VaqueroState::_slow_mutable_metrics() {
  metrics_ = ::google::protobuf::Arena::CreateMessage< ::vqro::rpc::VaqueroMetrics >(
        GetArenaNoVirtual());
}
::vqro::rpc::VaqueroMetrics* VaqueroState::_slow_release_metrics() {
  if (metrics_ == NULL) {
    return NULL;
  } else {
    ::vqro::rpc::VaqueroMetrics* temp = new ::vqro::rpc::VaqueroMetrics;
    temp->MergeFrom(*metrics_);
    metrics_ = NULL;
    return temp;
  }
}
::vqro::rpc::VaqueroMetrics* VaqueroState::unsafe_arena_release_metrics() {
  
  ::vqro::rpc::VaqueroMetrics* temp = metrics_;
  metrics_ = NULL;
  return temp;
}
void VaqueroState::_slow_set_allocated_metrics(
    ::google::protobuf::Arena* message_arena, ::vqro::rpc::VaqueroMetrics** metrics) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*metrics) == NULL) {
      message_arena->Own(*metrics);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*metrics)) {
      ::vqro::rpc::VaqueroMetrics* new_metrics = 
            ::google::protobuf::Arena::CreateMessage< ::vqro::rpc::VaqueroMetrics >(
            message_arena);
      new_metrics->CopyFrom(**metrics);
      *metrics = new_metrics;
    }
}
void VaqueroState::unsafe_arena_set_allocated_metrics(
    ::vqro::rpc::VaqueroMetrics* metrics) {
  if (GetArenaNoVirtual() == NULL) {
    delete metrics_;
  }
  metrics_ = metrics;
  if (metrics) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vqro.rpc.VaqueroState.metrics)
}
#ifndef _MSC_VER
const int VaqueroState::kServerFieldNumber;
const int VaqueroState::kMetricsFieldNumber;
const int VaqueroState::kNewSeriesFieldNumber;
const int VaqueroState::kExpiredSeriesFieldNumber;
#endif  // !_MSC_VER

VaqueroState::VaqueroState()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vqro.rpc.VaqueroState)
}

VaqueroState::VaqueroState(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  new_series_(arena),
  expired_series_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vqro.rpc.VaqueroState)
}

void VaqueroState::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  server_ = const_cast< ::vqro::rpc::Server*>(&::vqro::rpc::Server::default_instance());
  metrics_ = const_cast< ::vqro::rpc::VaqueroMetrics*>(&::vqro::rpc::VaqueroMetrics::default_instance());
}

VaqueroState::VaqueroState(const VaqueroState& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vqro.rpc.VaqueroState)
}

void VaqueroState::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  server_ = NULL;
  metrics_ = NULL;
}

VaqueroState::~VaqueroState() {
  // @@protoc_insertion_point(destructor:vqro.rpc.VaqueroState)
  SharedDtor();
}

void VaqueroState::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  if (this != default_instance_) {
    delete server_;
    delete metrics_;
  }
}

void VaqueroState::ArenaDtor(void* object) {
  VaqueroState* _this = reinterpret_cast< VaqueroState* >(object);
  (void)_this;
}
void VaqueroState::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void VaqueroState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VaqueroState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VaqueroState_descriptor_;
}

const VaqueroState& VaqueroState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_controller_2eproto();
  return *default_instance_;
}

VaqueroState* VaqueroState::default_instance_ = NULL;

VaqueroState* VaqueroState::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<VaqueroState>(arena);
}

void VaqueroState::Clear() {
  if (server_ != NULL) delete server_;
  server_ = NULL;
  if (metrics_ != NULL) delete metrics_;
  metrics_ = NULL;
  new_series_.Clear();
  expired_series_.Clear();
}

bool VaqueroState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vqro.rpc.VaqueroState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .vqro.rpc.Server server = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_server()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_metrics;
        break;
      }

      // optional .vqro.rpc.VaqueroMetrics metrics = 2;
      case 2: {
        if (tag == 18) {
         parse_metrics:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_metrics()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_new_series;
        break;
      }

      // repeated .vqro.rpc.Series new_series = 3;
      case 3: {
        if (tag == 26) {
         parse_new_series:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_new_series()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_new_series;
        if (input->ExpectTag(34)) goto parse_expired_series;
        break;
      }

      // repeated .vqro.rpc.Series expired_series = 4;
      case 4: {
        if (tag == 34) {
         parse_expired_series:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_expired_series()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_expired_series;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vqro.rpc.VaqueroState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vqro.rpc.VaqueroState)
  return false;
#undef DO_
}

void VaqueroState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vqro.rpc.VaqueroState)
  // optional .vqro.rpc.Server server = 1;
  if (this->has_server()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->server_, output);
  }

  // optional .vqro.rpc.VaqueroMetrics metrics = 2;
  if (this->has_metrics()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->metrics_, output);
  }

  // repeated .vqro.rpc.Series new_series = 3;
  for (unsigned int i = 0, n = this->new_series_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->new_series(i), output);
  }

  // repeated .vqro.rpc.Series expired_series = 4;
  for (unsigned int i = 0, n = this->expired_series_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->expired_series(i), output);
  }

  // @@protoc_insertion_point(serialize_end:vqro.rpc.VaqueroState)
}

::google::protobuf::uint8* VaqueroState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vqro.rpc.VaqueroState)
  // optional .vqro.rpc.Server server = 1;
  if (this->has_server()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->server_, target);
  }

  // optional .vqro.rpc.VaqueroMetrics metrics = 2;
  if (this->has_metrics()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->metrics_, target);
  }

  // repeated .vqro.rpc.Series new_series = 3;
  for (unsigned int i = 0, n = this->new_series_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->new_series(i), target);
  }

  // repeated .vqro.rpc.Series expired_series = 4;
  for (unsigned int i = 0, n = this->expired_series_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->expired_series(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:vqro.rpc.VaqueroState)
  return target;
}

int VaqueroState::ByteSize() const {
  int total_size = 0;

  // optional .vqro.rpc.Server server = 1;
  if (this->has_server()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->server_);
  }

  // optional .vqro.rpc.VaqueroMetrics metrics = 2;
  if (this->has_metrics()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->metrics_);
  }

  // repeated .vqro.rpc.Series new_series = 3;
  total_size += 1 * this->new_series_size();
  for (int i = 0; i < this->new_series_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->new_series(i));
  }

  // repeated .vqro.rpc.Series expired_series = 4;
  total_size += 1 * this->expired_series_size();
  for (int i = 0; i < this->expired_series_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->expired_series(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VaqueroState::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const VaqueroState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VaqueroState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VaqueroState::MergeFrom(const VaqueroState& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  new_series_.MergeFrom(from.new_series_);
  expired_series_.MergeFrom(from.expired_series_);
  if (from.has_server()) {
    mutable_server()->::vqro::rpc::Server::MergeFrom(from.server());
  }
  if (from.has_metrics()) {
    mutable_metrics()->::vqro::rpc::VaqueroMetrics::MergeFrom(from.metrics());
  }
}

void VaqueroState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VaqueroState::CopyFrom(const VaqueroState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VaqueroState::IsInitialized() const {

  return true;
}

void VaqueroState::Swap(VaqueroState* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    VaqueroState temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void VaqueroState::UnsafeArenaSwap(VaqueroState* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void VaqueroState::InternalSwap(VaqueroState* other) {
  std::swap(server_, other->server_);
  std::swap(metrics_, other->metrics_);
  new_series_.UnsafeArenaSwap(&other->new_series_);
  expired_series_.UnsafeArenaSwap(&other->expired_series_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VaqueroState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VaqueroState_descriptor_;
  metadata.reflection = VaqueroState_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VaqueroState

// optional .vqro.rpc.Server server = 1;
 bool VaqueroState::has_server() const {
  return !_is_default_instance_ && server_ != NULL;
}
 void VaqueroState::clear_server() {
  if (server_ != NULL) delete server_;
  server_ = NULL;
}
 const ::vqro::rpc::Server& VaqueroState::server() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.VaqueroState.server)
  return server_ != NULL ? *server_ : *default_instance_->server_;
}
 ::vqro::rpc::Server* VaqueroState::mutable_server() {
  
  if (server_ == NULL) {
    _slow_mutable_server();  }
  // @@protoc_insertion_point(field_mutable:vqro.rpc.VaqueroState.server)
  return server_;
}
 ::vqro::rpc::Server* VaqueroState::release_server() {
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_server();
  } else {
    ::vqro::rpc::Server* temp = server_;
    server_ = NULL;
    return temp;
  }
}
 void VaqueroState::set_allocated_server(::vqro::rpc::Server* server) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete server_;
  }
  if (server != NULL) {
    _slow_set_allocated_server(message_arena, &server);
  }
  server_ = server;
  if (server) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:vqro.rpc.VaqueroState.server)
}

// optional .vqro.rpc.VaqueroMetrics metrics = 2;
 bool VaqueroState::has_metrics() const {
  return !_is_default_instance_ && metrics_ != NULL;
}
 void VaqueroState::clear_metrics() {
  if (metrics_ != NULL) delete metrics_;
  metrics_ = NULL;
}
 const ::vqro::rpc::VaqueroMetrics& VaqueroState::metrics() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.VaqueroState.metrics)
  return metrics_ != NULL ? *metrics_ : *default_instance_->metrics_;
}
 ::vqro::rpc::VaqueroMetrics* VaqueroState::mutable_metrics() {
  
  if (metrics_ == NULL) {
    _slow_mutable_metrics();  }
  // @@protoc_insertion_point(field_mutable:vqro.rpc.VaqueroState.metrics)
  return metrics_;
}
 ::vqro::rpc::VaqueroMetrics* VaqueroState::release_metrics() {
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_metrics();
  } else {
    ::vqro::rpc::VaqueroMetrics* temp = metrics_;
    metrics_ = NULL;
    return temp;
  }
}
 void VaqueroState::set_allocated_metrics(::vqro::rpc::VaqueroMetrics* metrics) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete metrics_;
  }
  if (metrics != NULL) {
    _slow_set_allocated_metrics(message_arena, &metrics);
  }
  metrics_ = metrics;
  if (metrics) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:vqro.rpc.VaqueroState.metrics)
}

// repeated .vqro.rpc.Series new_series = 3;
 int VaqueroState::new_series_size() const {
  return new_series_.size();
}
 void VaqueroState::clear_new_series() {
  new_series_.Clear();
}
 const ::vqro::rpc::Series& VaqueroState::new_series(int index) const {
  // @@protoc_insertion_point(field_get:vqro.rpc.VaqueroState.new_series)
  return new_series_.Get(index);
}
 ::vqro::rpc::Series* VaqueroState::mutable_new_series(int index) {
  // @@protoc_insertion_point(field_mutable:vqro.rpc.VaqueroState.new_series)
  return new_series_.Mutable(index);
}
 ::vqro::rpc::Series* VaqueroState::add_new_series() {
  // @@protoc_insertion_point(field_add:vqro.rpc.VaqueroState.new_series)
  return new_series_.Add();
}
 const ::google::protobuf::RepeatedPtrField< ::vqro::rpc::Series >&
VaqueroState::new_series() const {
  // @@protoc_insertion_point(field_list:vqro.rpc.VaqueroState.new_series)
  return new_series_;
}
 ::google::protobuf::RepeatedPtrField< ::vqro::rpc::Series >*
VaqueroState::mutable_new_series() {
  // @@protoc_insertion_point(field_mutable_list:vqro.rpc.VaqueroState.new_series)
  return &new_series_;
}

// repeated .vqro.rpc.Series expired_series = 4;
 int VaqueroState::expired_series_size() const {
  return expired_series_.size();
}
 void VaqueroState::clear_expired_series() {
  expired_series_.Clear();
}
 const ::vqro::rpc::Series& VaqueroState::expired_series(int index) const {
  // @@protoc_insertion_point(field_get:vqro.rpc.VaqueroState.expired_series)
  return expired_series_.Get(index);
}
 ::vqro::rpc::Series* VaqueroState::mutable_expired_series(int index) {
  // @@protoc_insertion_point(field_mutable:vqro.rpc.VaqueroState.expired_series)
  return expired_series_.Mutable(index);
}
 ::vqro::rpc::Series* VaqueroState::add_expired_series() {
  // @@protoc_insertion_point(field_add:vqro.rpc.VaqueroState.expired_series)
  return expired_series_.Add();
}
 const ::google::protobuf::RepeatedPtrField< ::vqro::rpc::Series >&
VaqueroState::expired_series() const {
  // @@protoc_insertion_point(field_list:vqro.rpc.VaqueroState.expired_series)
  return expired_series_;
}
 ::google::protobuf::RepeatedPtrField< ::vqro::rpc::Series >*
VaqueroState::mutable_expired_series() {
  // @@protoc_insertion_point(field_mutable_list:vqro.rpc.VaqueroState.expired_series)
  return &expired_series_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int VaqueroMetrics::kCpuUsageFieldNumber;
const int VaqueroMetrics::kNumSeriesWrittenToFieldNumber;
const int VaqueroMetrics::kNumDatapointsWrittenFieldNumber;
const int VaqueroMetrics::kStorageBytesChangeFieldNumber;
#endif  // !_MSC_VER

VaqueroMetrics::VaqueroMetrics()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vqro.rpc.VaqueroMetrics)
}

VaqueroMetrics::VaqueroMetrics(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vqro.rpc.VaqueroMetrics)
}

void VaqueroMetrics::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

VaqueroMetrics::VaqueroMetrics(const VaqueroMetrics& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vqro.rpc.VaqueroMetrics)
}

void VaqueroMetrics::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  cpu_usage_ = 0;
  num_series_written_to_ = 0;
  num_datapoints_written_ = 0;
  storage_bytes_change_ = 0;
}

VaqueroMetrics::~VaqueroMetrics() {
  // @@protoc_insertion_point(destructor:vqro.rpc.VaqueroMetrics)
  SharedDtor();
}

void VaqueroMetrics::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  if (this != default_instance_) {
  }
}

void VaqueroMetrics::ArenaDtor(void* object) {
  VaqueroMetrics* _this = reinterpret_cast< VaqueroMetrics* >(object);
  (void)_this;
}
void VaqueroMetrics::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void VaqueroMetrics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VaqueroMetrics::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VaqueroMetrics_descriptor_;
}

const VaqueroMetrics& VaqueroMetrics::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_controller_2eproto();
  return *default_instance_;
}

VaqueroMetrics* VaqueroMetrics::default_instance_ = NULL;

VaqueroMetrics* VaqueroMetrics::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<VaqueroMetrics>(arena);
}

void VaqueroMetrics::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<VaqueroMetrics*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(cpu_usage_, storage_bytes_change_);

#undef ZR_HELPER_
#undef ZR_

}

bool VaqueroMetrics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vqro.rpc.VaqueroMetrics)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double cpu_usage = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cpu_usage_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_num_series_written_to;
        break;
      }

      // optional int32 num_series_written_to = 2;
      case 2: {
        if (tag == 16) {
         parse_num_series_written_to:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_series_written_to_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_num_datapoints_written;
        break;
      }

      // optional int32 num_datapoints_written = 3;
      case 3: {
        if (tag == 24) {
         parse_num_datapoints_written:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_datapoints_written_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_storage_bytes_change;
        break;
      }

      // optional int32 storage_bytes_change = 4;
      case 4: {
        if (tag == 32) {
         parse_storage_bytes_change:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &storage_bytes_change_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vqro.rpc.VaqueroMetrics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vqro.rpc.VaqueroMetrics)
  return false;
#undef DO_
}

void VaqueroMetrics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vqro.rpc.VaqueroMetrics)
  // optional double cpu_usage = 1;
  if (this->cpu_usage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->cpu_usage(), output);
  }

  // optional int32 num_series_written_to = 2;
  if (this->num_series_written_to() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num_series_written_to(), output);
  }

  // optional int32 num_datapoints_written = 3;
  if (this->num_datapoints_written() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num_datapoints_written(), output);
  }

  // optional int32 storage_bytes_change = 4;
  if (this->storage_bytes_change() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->storage_bytes_change(), output);
  }

  // @@protoc_insertion_point(serialize_end:vqro.rpc.VaqueroMetrics)
}

::google::protobuf::uint8* VaqueroMetrics::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vqro.rpc.VaqueroMetrics)
  // optional double cpu_usage = 1;
  if (this->cpu_usage() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->cpu_usage(), target);
  }

  // optional int32 num_series_written_to = 2;
  if (this->num_series_written_to() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num_series_written_to(), target);
  }

  // optional int32 num_datapoints_written = 3;
  if (this->num_datapoints_written() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num_datapoints_written(), target);
  }

  // optional int32 storage_bytes_change = 4;
  if (this->storage_bytes_change() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->storage_bytes_change(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:vqro.rpc.VaqueroMetrics)
  return target;
}

int VaqueroMetrics::ByteSize() const {
  int total_size = 0;

  // optional double cpu_usage = 1;
  if (this->cpu_usage() != 0) {
    total_size += 1 + 8;
  }

  // optional int32 num_series_written_to = 2;
  if (this->num_series_written_to() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_series_written_to());
  }

  // optional int32 num_datapoints_written = 3;
  if (this->num_datapoints_written() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_datapoints_written());
  }

  // optional int32 storage_bytes_change = 4;
  if (this->storage_bytes_change() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->storage_bytes_change());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VaqueroMetrics::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const VaqueroMetrics* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VaqueroMetrics*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VaqueroMetrics::MergeFrom(const VaqueroMetrics& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.cpu_usage() != 0) {
    set_cpu_usage(from.cpu_usage());
  }
  if (from.num_series_written_to() != 0) {
    set_num_series_written_to(from.num_series_written_to());
  }
  if (from.num_datapoints_written() != 0) {
    set_num_datapoints_written(from.num_datapoints_written());
  }
  if (from.storage_bytes_change() != 0) {
    set_storage_bytes_change(from.storage_bytes_change());
  }
}

void VaqueroMetrics::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VaqueroMetrics::CopyFrom(const VaqueroMetrics& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VaqueroMetrics::IsInitialized() const {

  return true;
}

void VaqueroMetrics::Swap(VaqueroMetrics* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    VaqueroMetrics temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void VaqueroMetrics::UnsafeArenaSwap(VaqueroMetrics* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void VaqueroMetrics::InternalSwap(VaqueroMetrics* other) {
  std::swap(cpu_usage_, other->cpu_usage_);
  std::swap(num_series_written_to_, other->num_series_written_to_);
  std::swap(num_datapoints_written_, other->num_datapoints_written_);
  std::swap(storage_bytes_change_, other->storage_bytes_change_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VaqueroMetrics::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VaqueroMetrics_descriptor_;
  metadata.reflection = VaqueroMetrics_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VaqueroMetrics

// optional double cpu_usage = 1;
 void VaqueroMetrics::clear_cpu_usage() {
  cpu_usage_ = 0;
}
 double VaqueroMetrics::cpu_usage() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.VaqueroMetrics.cpu_usage)
  return cpu_usage_;
}
 void VaqueroMetrics::set_cpu_usage(double value) {
  
  cpu_usage_ = value;
  // @@protoc_insertion_point(field_set:vqro.rpc.VaqueroMetrics.cpu_usage)
}

// optional int32 num_series_written_to = 2;
 void VaqueroMetrics::clear_num_series_written_to() {
  num_series_written_to_ = 0;
}
 ::google::protobuf::int32 VaqueroMetrics::num_series_written_to() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.VaqueroMetrics.num_series_written_to)
  return num_series_written_to_;
}
 void VaqueroMetrics::set_num_series_written_to(::google::protobuf::int32 value) {
  
  num_series_written_to_ = value;
  // @@protoc_insertion_point(field_set:vqro.rpc.VaqueroMetrics.num_series_written_to)
}

// optional int32 num_datapoints_written = 3;
 void VaqueroMetrics::clear_num_datapoints_written() {
  num_datapoints_written_ = 0;
}
 ::google::protobuf::int32 VaqueroMetrics::num_datapoints_written() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.VaqueroMetrics.num_datapoints_written)
  return num_datapoints_written_;
}
 void VaqueroMetrics::set_num_datapoints_written(::google::protobuf::int32 value) {
  
  num_datapoints_written_ = value;
  // @@protoc_insertion_point(field_set:vqro.rpc.VaqueroMetrics.num_datapoints_written)
}

// optional int32 storage_bytes_change = 4;
 void VaqueroMetrics::clear_storage_bytes_change() {
  storage_bytes_change_ = 0;
}
 ::google::protobuf::int32 VaqueroMetrics::storage_bytes_change() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.VaqueroMetrics.storage_bytes_change)
  return storage_bytes_change_;
}
 void VaqueroMetrics::set_storage_bytes_change(::google::protobuf::int32 value) {
  
  storage_bytes_change_ = value;
  // @@protoc_insertion_point(field_set:vqro.rpc.VaqueroMetrics.storage_bytes_change)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace rpc
}  // namespace vqro

// @@protoc_insertion_point(global_scope)
