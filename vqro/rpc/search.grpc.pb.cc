// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: search.proto

#include "search.pb.h"
#include "search.grpc.pb.h"

#include <grpc++/channel.h>
#include <grpc++/impl/client_unary_call.h>
#include <grpc++/impl/rpc_service_method.h>
#include <grpc++/impl/service_type.h>
#include <grpc++/support/async_unary_call.h>
#include <grpc++/support/async_stream.h>
#include <grpc++/support/sync_stream.h>
namespace vqro {
namespace rpc {

static const char* VaqueroSearch_method_names[] = {
  "/vqro.rpc.VaqueroSearch/SearchSeries",
  "/vqro.rpc.VaqueroSearch/SearchLabels",
};

std::unique_ptr< VaqueroSearch::Stub> VaqueroSearch::NewStub(const std::shared_ptr< ::grpc::Channel>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< VaqueroSearch::Stub> stub(new VaqueroSearch::Stub(channel));
  return stub;
}

VaqueroSearch::Stub::Stub(const std::shared_ptr< ::grpc::Channel>& channel)
  : channel_(channel), rpcmethod_SearchSeries_(VaqueroSearch_method_names[0], ::grpc::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_SearchLabels_(VaqueroSearch_method_names[1], ::grpc::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::ClientReader< ::vqro::rpc::SearchSeriesResults>* VaqueroSearch::Stub::SearchSeriesRaw(::grpc::ClientContext* context, const ::vqro::rpc::SeriesQuery& request) {
  return new ::grpc::ClientReader< ::vqro::rpc::SearchSeriesResults>(channel_.get(), rpcmethod_SearchSeries_, context, request);
}

::grpc::ClientAsyncReader< ::vqro::rpc::SearchSeriesResults>* VaqueroSearch::Stub::AsyncSearchSeriesRaw(::grpc::ClientContext* context, const ::vqro::rpc::SeriesQuery& request, ::grpc::CompletionQueue* cq, void* tag) {
  return new ::grpc::ClientAsyncReader< ::vqro::rpc::SearchSeriesResults>(channel_.get(), cq, rpcmethod_SearchSeries_, context, request, tag);
}

::grpc::ClientReader< ::vqro::rpc::SearchLabelsResults>* VaqueroSearch::Stub::SearchLabelsRaw(::grpc::ClientContext* context, const ::vqro::rpc::LabelsQuery& request) {
  return new ::grpc::ClientReader< ::vqro::rpc::SearchLabelsResults>(channel_.get(), rpcmethod_SearchLabels_, context, request);
}

::grpc::ClientAsyncReader< ::vqro::rpc::SearchLabelsResults>* VaqueroSearch::Stub::AsyncSearchLabelsRaw(::grpc::ClientContext* context, const ::vqro::rpc::LabelsQuery& request, ::grpc::CompletionQueue* cq, void* tag) {
  return new ::grpc::ClientAsyncReader< ::vqro::rpc::SearchLabelsResults>(channel_.get(), cq, rpcmethod_SearchLabels_, context, request, tag);
}

VaqueroSearch::AsyncService::AsyncService() : ::grpc::AsynchronousService(VaqueroSearch_method_names, 2) {}

VaqueroSearch::Service::~Service() {
  delete service_;
}

::grpc::Status VaqueroSearch::Service::SearchSeries(::grpc::ServerContext* context, const ::vqro::rpc::SeriesQuery* request, ::grpc::ServerWriter< ::vqro::rpc::SearchSeriesResults>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

void VaqueroSearch::AsyncService::RequestSearchSeries(::grpc::ServerContext* context, ::vqro::rpc::SeriesQuery* request, ::grpc::ServerAsyncWriter< ::vqro::rpc::SearchSeriesResults>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
  AsynchronousService::RequestServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
}

::grpc::Status VaqueroSearch::Service::SearchLabels(::grpc::ServerContext* context, const ::vqro::rpc::LabelsQuery* request, ::grpc::ServerWriter< ::vqro::rpc::SearchLabelsResults>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

void VaqueroSearch::AsyncService::RequestSearchLabels(::grpc::ServerContext* context, ::vqro::rpc::LabelsQuery* request, ::grpc::ServerAsyncWriter< ::vqro::rpc::SearchLabelsResults>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
  AsynchronousService::RequestServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
}

::grpc::RpcService* VaqueroSearch::Service::service() {
  if (service_ != nullptr) {
    return service_;
  }
  service_ = new ::grpc::RpcService();
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      VaqueroSearch_method_names[0],
      ::grpc::RpcMethod::SERVER_STREAMING,
      new ::grpc::ServerStreamingHandler< VaqueroSearch::Service, ::vqro::rpc::SeriesQuery, ::vqro::rpc::SearchSeriesResults>(
          std::mem_fn(&VaqueroSearch::Service::SearchSeries), this)));
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      VaqueroSearch_method_names[1],
      ::grpc::RpcMethod::SERVER_STREAMING,
      new ::grpc::ServerStreamingHandler< VaqueroSearch::Service, ::vqro::rpc::LabelsQuery, ::vqro::rpc::SearchLabelsResults>(
          std::mem_fn(&VaqueroSearch::Service::SearchLabels), this)));
  return service_;
}


}  // namespace vqro
}  // namespace rpc

