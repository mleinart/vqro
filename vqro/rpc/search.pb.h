// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: search.proto

#ifndef PROTOBUF_search_2eproto__INCLUDED
#define PROTOBUF_search_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "core.pb.h"
// @@protoc_insertion_point(includes)

namespace vqro {
namespace rpc {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_search_2eproto();
void protobuf_AssignDesc_search_2eproto();
void protobuf_ShutdownFile_search_2eproto();

class LabelConstraint;
class LabelsQuery;
class SearchLabelsResults;
class SearchSeriesResults;
class SeriesQuery;

// ===================================================================

class SeriesQuery : public ::google::protobuf::Message {
 public:
  SeriesQuery();
  virtual ~SeriesQuery();

  SeriesQuery(const SeriesQuery& from);

  inline SeriesQuery& operator=(const SeriesQuery& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const SeriesQuery& default_instance();

  void UnsafeArenaSwap(SeriesQuery* other);
  void Swap(SeriesQuery* other);

  // implements Message ----------------------------------------------

  inline SeriesQuery* New() const { return New(NULL); }

  SeriesQuery* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SeriesQuery& from);
  void MergeFrom(const SeriesQuery& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SeriesQuery* other);
  protected:
  explicit SeriesQuery(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .vqro.rpc.LabelConstraint constraints = 1;
  int constraints_size() const;
  void clear_constraints();
  static const int kConstraintsFieldNumber = 1;
  const ::vqro::rpc::LabelConstraint& constraints(int index) const;
  ::vqro::rpc::LabelConstraint* mutable_constraints(int index);
  ::vqro::rpc::LabelConstraint* add_constraints();
  ::google::protobuf::RepeatedPtrField< ::vqro::rpc::LabelConstraint >*
      mutable_constraints();
  const ::google::protobuf::RepeatedPtrField< ::vqro::rpc::LabelConstraint >&
      constraints() const;

  // optional int64 result_offset = 2;
  void clear_result_offset();
  static const int kResultOffsetFieldNumber = 2;
  ::google::protobuf::int64 result_offset() const;
  void set_result_offset(::google::protobuf::int64 value);

  // optional int64 result_limit = 3;
  void clear_result_limit();
  static const int kResultLimitFieldNumber = 3;
  ::google::protobuf::int64 result_limit() const;
  void set_result_limit(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:vqro.rpc.SeriesQuery)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::vqro::rpc::LabelConstraint > constraints_;
  ::google::protobuf::int64 result_offset_;
  ::google::protobuf::int64 result_limit_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_search_2eproto();
  friend void protobuf_AssignDesc_search_2eproto();
  friend void protobuf_ShutdownFile_search_2eproto();

  void InitAsDefaultInstance();
  static SeriesQuery* default_instance_;
};
// -------------------------------------------------------------------

class LabelConstraint : public ::google::protobuf::Message {
 public:
  LabelConstraint();
  virtual ~LabelConstraint();

  LabelConstraint(const LabelConstraint& from);

  inline LabelConstraint& operator=(const LabelConstraint& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const LabelConstraint& default_instance();

  enum PredicateCase {
    kExactValue = 2,
    kRegex = 3,
    PREDICATE_NOT_SET = 0,
  };

  void UnsafeArenaSwap(LabelConstraint* other);
  void Swap(LabelConstraint* other);

  // implements Message ----------------------------------------------

  inline LabelConstraint* New() const { return New(NULL); }

  LabelConstraint* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LabelConstraint& from);
  void MergeFrom(const LabelConstraint& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LabelConstraint* other);
  protected:
  explicit LabelConstraint(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string label_name = 1;
  void clear_label_name();
  static const int kLabelNameFieldNumber = 1;
  const ::std::string& label_name() const;
  void set_label_name(const ::std::string& value);
  void set_label_name(const char* value);
  void set_label_name(const char* value, size_t size);
  ::std::string* mutable_label_name();
  ::std::string* release_label_name();
  void set_allocated_label_name(::std::string* label_name);
  ::std::string* unsafe_arena_release_label_name();
  void unsafe_arena_set_allocated_label_name(
      ::std::string* label_name);

  // optional string exact_value = 2;
  private:
  bool has_exact_value() const;
  public:
  void clear_exact_value();
  static const int kExactValueFieldNumber = 2;
  const ::std::string& exact_value() const;
  void set_exact_value(const ::std::string& value);
  void set_exact_value(const char* value);
  void set_exact_value(const char* value, size_t size);
  ::std::string* mutable_exact_value();
  ::std::string* release_exact_value();
  void set_allocated_exact_value(::std::string* exact_value);
  ::std::string* unsafe_arena_release_exact_value();
  void unsafe_arena_set_allocated_exact_value(
      ::std::string* exact_value);

  // optional string regex = 3;
  private:
  bool has_regex() const;
  public:
  void clear_regex();
  static const int kRegexFieldNumber = 3;
  const ::std::string& regex() const;
  void set_regex(const ::std::string& value);
  void set_regex(const char* value);
  void set_regex(const char* value, size_t size);
  ::std::string* mutable_regex();
  ::std::string* release_regex();
  void set_allocated_regex(::std::string* regex);
  ::std::string* unsafe_arena_release_regex();
  void unsafe_arena_set_allocated_regex(
      ::std::string* regex);

  PredicateCase predicate_case() const;
  // @@protoc_insertion_point(class_scope:vqro.rpc.LabelConstraint)
 private:
  inline void set_has_exact_value();
  inline void set_has_regex();

  inline bool has_predicate() const;
  void clear_predicate();
  inline void clear_has_predicate();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr label_name_;
  union PredicateUnion {
    PredicateUnion() {}
    ::google::protobuf::internal::ArenaStringPtr exact_value_;
    ::google::protobuf::internal::ArenaStringPtr regex_;
  } predicate_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_search_2eproto();
  friend void protobuf_AssignDesc_search_2eproto();
  friend void protobuf_ShutdownFile_search_2eproto();

  void InitAsDefaultInstance();
  static LabelConstraint* default_instance_;
};
// -------------------------------------------------------------------

class SearchSeriesResults : public ::google::protobuf::Message {
 public:
  SearchSeriesResults();
  virtual ~SearchSeriesResults();

  SearchSeriesResults(const SearchSeriesResults& from);

  inline SearchSeriesResults& operator=(const SearchSeriesResults& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const SearchSeriesResults& default_instance();

  void UnsafeArenaSwap(SearchSeriesResults* other);
  void Swap(SearchSeriesResults* other);

  // implements Message ----------------------------------------------

  inline SearchSeriesResults* New() const { return New(NULL); }

  SearchSeriesResults* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SearchSeriesResults& from);
  void MergeFrom(const SearchSeriesResults& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SearchSeriesResults* other);
  protected:
  explicit SearchSeriesResults(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .vqro.rpc.Series matches = 1;
  int matches_size() const;
  void clear_matches();
  static const int kMatchesFieldNumber = 1;
  const ::vqro::rpc::Series& matches(int index) const;
  ::vqro::rpc::Series* mutable_matches(int index);
  ::vqro::rpc::Series* add_matches();
  ::google::protobuf::RepeatedPtrField< ::vqro::rpc::Series >*
      mutable_matches();
  const ::google::protobuf::RepeatedPtrField< ::vqro::rpc::Series >&
      matches() const;

  // optional .vqro.rpc.StatusMessage status = 2;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 2;
  private:
  void _slow_mutable_status();
  void _slow_set_allocated_status(
      ::google::protobuf::Arena* message_arena, ::vqro::rpc::StatusMessage** status);
  ::vqro::rpc::StatusMessage* _slow_release_status();
  public:
  const ::vqro::rpc::StatusMessage& status() const;
  ::vqro::rpc::StatusMessage* mutable_status();
  ::vqro::rpc::StatusMessage* release_status();
  void set_allocated_status(::vqro::rpc::StatusMessage* status);
  ::vqro::rpc::StatusMessage* unsafe_arena_release_status();
  void unsafe_arena_set_allocated_status(
      ::vqro::rpc::StatusMessage* status);

  // @@protoc_insertion_point(class_scope:vqro.rpc.SearchSeriesResults)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::vqro::rpc::Series > matches_;
  ::vqro::rpc::StatusMessage* status_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_search_2eproto();
  friend void protobuf_AssignDesc_search_2eproto();
  friend void protobuf_ShutdownFile_search_2eproto();

  void InitAsDefaultInstance();
  static SearchSeriesResults* default_instance_;
};
// -------------------------------------------------------------------

class LabelsQuery : public ::google::protobuf::Message {
 public:
  LabelsQuery();
  virtual ~LabelsQuery();

  LabelsQuery(const LabelsQuery& from);

  inline LabelsQuery& operator=(const LabelsQuery& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const LabelsQuery& default_instance();

  void UnsafeArenaSwap(LabelsQuery* other);
  void Swap(LabelsQuery* other);

  // implements Message ----------------------------------------------

  inline LabelsQuery* New() const { return New(NULL); }

  LabelsQuery* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LabelsQuery& from);
  void MergeFrom(const LabelsQuery& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LabelsQuery* other);
  protected:
  explicit LabelsQuery(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string regex = 1;
  void clear_regex();
  static const int kRegexFieldNumber = 1;
  const ::std::string& regex() const;
  void set_regex(const ::std::string& value);
  void set_regex(const char* value);
  void set_regex(const char* value, size_t size);
  ::std::string* mutable_regex();
  ::std::string* release_regex();
  void set_allocated_regex(::std::string* regex);
  ::std::string* unsafe_arena_release_regex();
  void unsafe_arena_set_allocated_regex(
      ::std::string* regex);

  // optional int64 result_offset = 2;
  void clear_result_offset();
  static const int kResultOffsetFieldNumber = 2;
  ::google::protobuf::int64 result_offset() const;
  void set_result_offset(::google::protobuf::int64 value);

  // optional int64 result_limit = 3;
  void clear_result_limit();
  static const int kResultLimitFieldNumber = 3;
  ::google::protobuf::int64 result_limit() const;
  void set_result_limit(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:vqro.rpc.LabelsQuery)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr regex_;
  ::google::protobuf::int64 result_offset_;
  ::google::protobuf::int64 result_limit_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_search_2eproto();
  friend void protobuf_AssignDesc_search_2eproto();
  friend void protobuf_ShutdownFile_search_2eproto();

  void InitAsDefaultInstance();
  static LabelsQuery* default_instance_;
};
// -------------------------------------------------------------------

class SearchLabelsResults : public ::google::protobuf::Message {
 public:
  SearchLabelsResults();
  virtual ~SearchLabelsResults();

  SearchLabelsResults(const SearchLabelsResults& from);

  inline SearchLabelsResults& operator=(const SearchLabelsResults& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const SearchLabelsResults& default_instance();

  void UnsafeArenaSwap(SearchLabelsResults* other);
  void Swap(SearchLabelsResults* other);

  // implements Message ----------------------------------------------

  inline SearchLabelsResults* New() const { return New(NULL); }

  SearchLabelsResults* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SearchLabelsResults& from);
  void MergeFrom(const SearchLabelsResults& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SearchLabelsResults* other);
  protected:
  explicit SearchLabelsResults(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string labels = 1;
  int labels_size() const;
  void clear_labels();
  static const int kLabelsFieldNumber = 1;
  const ::std::string& labels(int index) const;
  ::std::string* mutable_labels(int index);
  void set_labels(int index, const ::std::string& value);
  void set_labels(int index, const char* value);
  void set_labels(int index, const char* value, size_t size);
  ::std::string* add_labels();
  void add_labels(const ::std::string& value);
  void add_labels(const char* value);
  void add_labels(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& labels() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_labels();

  // optional .vqro.rpc.StatusMessage status = 2;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 2;
  private:
  void _slow_mutable_status();
  void _slow_set_allocated_status(
      ::google::protobuf::Arena* message_arena, ::vqro::rpc::StatusMessage** status);
  ::vqro::rpc::StatusMessage* _slow_release_status();
  public:
  const ::vqro::rpc::StatusMessage& status() const;
  ::vqro::rpc::StatusMessage* mutable_status();
  ::vqro::rpc::StatusMessage* release_status();
  void set_allocated_status(::vqro::rpc::StatusMessage* status);
  ::vqro::rpc::StatusMessage* unsafe_arena_release_status();
  void unsafe_arena_set_allocated_status(
      ::vqro::rpc::StatusMessage* status);

  // @@protoc_insertion_point(class_scope:vqro.rpc.SearchLabelsResults)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::std::string> labels_;
  ::vqro::rpc::StatusMessage* status_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_search_2eproto();
  friend void protobuf_AssignDesc_search_2eproto();
  friend void protobuf_ShutdownFile_search_2eproto();

  void InitAsDefaultInstance();
  static SearchLabelsResults* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// SeriesQuery

// repeated .vqro.rpc.LabelConstraint constraints = 1;
inline int SeriesQuery::constraints_size() const {
  return constraints_.size();
}
inline void SeriesQuery::clear_constraints() {
  constraints_.Clear();
}
inline const ::vqro::rpc::LabelConstraint& SeriesQuery::constraints(int index) const {
  // @@protoc_insertion_point(field_get:vqro.rpc.SeriesQuery.constraints)
  return constraints_.Get(index);
}
inline ::vqro::rpc::LabelConstraint* SeriesQuery::mutable_constraints(int index) {
  // @@protoc_insertion_point(field_mutable:vqro.rpc.SeriesQuery.constraints)
  return constraints_.Mutable(index);
}
inline ::vqro::rpc::LabelConstraint* SeriesQuery::add_constraints() {
  // @@protoc_insertion_point(field_add:vqro.rpc.SeriesQuery.constraints)
  return constraints_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::vqro::rpc::LabelConstraint >*
SeriesQuery::mutable_constraints() {
  // @@protoc_insertion_point(field_mutable_list:vqro.rpc.SeriesQuery.constraints)
  return &constraints_;
}
inline const ::google::protobuf::RepeatedPtrField< ::vqro::rpc::LabelConstraint >&
SeriesQuery::constraints() const {
  // @@protoc_insertion_point(field_list:vqro.rpc.SeriesQuery.constraints)
  return constraints_;
}

// optional int64 result_offset = 2;
inline void SeriesQuery::clear_result_offset() {
  result_offset_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 SeriesQuery::result_offset() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.SeriesQuery.result_offset)
  return result_offset_;
}
inline void SeriesQuery::set_result_offset(::google::protobuf::int64 value) {
  
  result_offset_ = value;
  // @@protoc_insertion_point(field_set:vqro.rpc.SeriesQuery.result_offset)
}

// optional int64 result_limit = 3;
inline void SeriesQuery::clear_result_limit() {
  result_limit_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 SeriesQuery::result_limit() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.SeriesQuery.result_limit)
  return result_limit_;
}
inline void SeriesQuery::set_result_limit(::google::protobuf::int64 value) {
  
  result_limit_ = value;
  // @@protoc_insertion_point(field_set:vqro.rpc.SeriesQuery.result_limit)
}

// -------------------------------------------------------------------

// LabelConstraint

// optional string label_name = 1;
inline void LabelConstraint::clear_label_name() {
  label_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& LabelConstraint::label_name() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.LabelConstraint.label_name)
  return label_name_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LabelConstraint::set_label_name(const ::std::string& value) {
  
  label_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:vqro.rpc.LabelConstraint.label_name)
}
inline void LabelConstraint::set_label_name(const char* value) {
  
  label_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:vqro.rpc.LabelConstraint.label_name)
}
inline void LabelConstraint::set_label_name(const char* value,
    size_t size) {
  
  label_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:vqro.rpc.LabelConstraint.label_name)
}
inline ::std::string* LabelConstraint::mutable_label_name() {
  
  // @@protoc_insertion_point(field_mutable:vqro.rpc.LabelConstraint.label_name)
  return label_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* LabelConstraint::release_label_name() {
  
  return label_name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* LabelConstraint::unsafe_arena_release_label_name() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return label_name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void LabelConstraint::set_allocated_label_name(::std::string* label_name) {
  if (label_name != NULL) {
    
  } else {
    
  }
  label_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), label_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:vqro.rpc.LabelConstraint.label_name)
}
inline void LabelConstraint::unsafe_arena_set_allocated_label_name(
    ::std::string* label_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (label_name != NULL) {
    
  } else {
    
  }
  label_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      label_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:vqro.rpc.LabelConstraint.label_name)
}

// optional string exact_value = 2;
inline bool LabelConstraint::has_exact_value() const {
  return predicate_case() == kExactValue;
}
inline void LabelConstraint::set_has_exact_value() {
  _oneof_case_[0] = kExactValue;
}
inline void LabelConstraint::clear_exact_value() {
  if (has_exact_value()) {
    predicate_.exact_value_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        GetArenaNoVirtual());
    clear_has_predicate();
  }
}
inline const ::std::string& LabelConstraint::exact_value() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.LabelConstraint.exact_value)
  if (has_exact_value()) {
    return predicate_.exact_value_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void LabelConstraint::set_exact_value(const ::std::string& value) {
  if (!has_exact_value()) {
    clear_predicate();
    set_has_exact_value();
    predicate_.exact_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  predicate_.exact_value_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:vqro.rpc.LabelConstraint.exact_value)
}
inline void LabelConstraint::set_exact_value(const char* value) {
  if (!has_exact_value()) {
    clear_predicate();
    set_has_exact_value();
    predicate_.exact_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  predicate_.exact_value_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:vqro.rpc.LabelConstraint.exact_value)
}
inline void LabelConstraint::set_exact_value(const char* value,
                             size_t size) {
  if (!has_exact_value()) {
    clear_predicate();
    set_has_exact_value();
    predicate_.exact_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  predicate_.exact_value_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:vqro.rpc.LabelConstraint.exact_value)
}
inline ::std::string* LabelConstraint::mutable_exact_value() {
  if (!has_exact_value()) {
    clear_predicate();
    set_has_exact_value();
    predicate_.exact_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return predicate_.exact_value_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_mutable:vqro.rpc.LabelConstraint.exact_value)
}
inline ::std::string* LabelConstraint::release_exact_value() {
  if (has_exact_value()) {
    clear_has_predicate();
    return predicate_.exact_value_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        GetArenaNoVirtual());
  } else {
    return NULL;
  }
}
inline ::std::string* LabelConstraint::unsafe_arena_release_exact_value() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (has_exact_value()) {
    clear_has_predicate();
    return predicate_.exact_value_.UnsafeArenaRelease(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  } else {
    return NULL;
  }
}
inline void LabelConstraint::set_allocated_exact_value(::std::string* exact_value) {
  if (!has_exact_value()) {
    predicate_.exact_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_predicate();
  if (exact_value != NULL) {
    set_has_exact_value();
    predicate_.exact_value_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exact_value,
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_set_allocated:vqro.rpc.LabelConstraint.exact_value)
}
inline void LabelConstraint::unsafe_arena_set_allocated_exact_value(::std::string* exact_value) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (!has_exact_value()) {
    predicate_.exact_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_predicate();
  if (exact_value) {
    set_has_exact_value();
    predicate_.exact_value_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exact_value, GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_set_allocated:vqro.rpc.LabelConstraint.exact_value)
}

// optional string regex = 3;
inline bool LabelConstraint::has_regex() const {
  return predicate_case() == kRegex;
}
inline void LabelConstraint::set_has_regex() {
  _oneof_case_[0] = kRegex;
}
inline void LabelConstraint::clear_regex() {
  if (has_regex()) {
    predicate_.regex_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        GetArenaNoVirtual());
    clear_has_predicate();
  }
}
inline const ::std::string& LabelConstraint::regex() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.LabelConstraint.regex)
  if (has_regex()) {
    return predicate_.regex_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void LabelConstraint::set_regex(const ::std::string& value) {
  if (!has_regex()) {
    clear_predicate();
    set_has_regex();
    predicate_.regex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  predicate_.regex_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:vqro.rpc.LabelConstraint.regex)
}
inline void LabelConstraint::set_regex(const char* value) {
  if (!has_regex()) {
    clear_predicate();
    set_has_regex();
    predicate_.regex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  predicate_.regex_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:vqro.rpc.LabelConstraint.regex)
}
inline void LabelConstraint::set_regex(const char* value,
                             size_t size) {
  if (!has_regex()) {
    clear_predicate();
    set_has_regex();
    predicate_.regex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  predicate_.regex_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:vqro.rpc.LabelConstraint.regex)
}
inline ::std::string* LabelConstraint::mutable_regex() {
  if (!has_regex()) {
    clear_predicate();
    set_has_regex();
    predicate_.regex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return predicate_.regex_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_mutable:vqro.rpc.LabelConstraint.regex)
}
inline ::std::string* LabelConstraint::release_regex() {
  if (has_regex()) {
    clear_has_predicate();
    return predicate_.regex_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        GetArenaNoVirtual());
  } else {
    return NULL;
  }
}
inline ::std::string* LabelConstraint::unsafe_arena_release_regex() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (has_regex()) {
    clear_has_predicate();
    return predicate_.regex_.UnsafeArenaRelease(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  } else {
    return NULL;
  }
}
inline void LabelConstraint::set_allocated_regex(::std::string* regex) {
  if (!has_regex()) {
    predicate_.regex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_predicate();
  if (regex != NULL) {
    set_has_regex();
    predicate_.regex_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), regex,
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_set_allocated:vqro.rpc.LabelConstraint.regex)
}
inline void LabelConstraint::unsafe_arena_set_allocated_regex(::std::string* regex) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (!has_regex()) {
    predicate_.regex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_predicate();
  if (regex) {
    set_has_regex();
    predicate_.regex_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), regex, GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_set_allocated:vqro.rpc.LabelConstraint.regex)
}

inline bool LabelConstraint::has_predicate() const {
  return predicate_case() != PREDICATE_NOT_SET;
}
inline void LabelConstraint::clear_has_predicate() {
  _oneof_case_[0] = PREDICATE_NOT_SET;
}
inline LabelConstraint::PredicateCase LabelConstraint::predicate_case() const {
  return LabelConstraint::PredicateCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SearchSeriesResults

// repeated .vqro.rpc.Series matches = 1;
inline int SearchSeriesResults::matches_size() const {
  return matches_.size();
}
inline void SearchSeriesResults::clear_matches() {
  matches_.Clear();
}
inline const ::vqro::rpc::Series& SearchSeriesResults::matches(int index) const {
  // @@protoc_insertion_point(field_get:vqro.rpc.SearchSeriesResults.matches)
  return matches_.Get(index);
}
inline ::vqro::rpc::Series* SearchSeriesResults::mutable_matches(int index) {
  // @@protoc_insertion_point(field_mutable:vqro.rpc.SearchSeriesResults.matches)
  return matches_.Mutable(index);
}
inline ::vqro::rpc::Series* SearchSeriesResults::add_matches() {
  // @@protoc_insertion_point(field_add:vqro.rpc.SearchSeriesResults.matches)
  return matches_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::vqro::rpc::Series >*
SearchSeriesResults::mutable_matches() {
  // @@protoc_insertion_point(field_mutable_list:vqro.rpc.SearchSeriesResults.matches)
  return &matches_;
}
inline const ::google::protobuf::RepeatedPtrField< ::vqro::rpc::Series >&
SearchSeriesResults::matches() const {
  // @@protoc_insertion_point(field_list:vqro.rpc.SearchSeriesResults.matches)
  return matches_;
}

// optional .vqro.rpc.StatusMessage status = 2;
inline bool SearchSeriesResults::has_status() const {
  return !_is_default_instance_ && status_ != NULL;
}
inline void SearchSeriesResults::clear_status() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
}
inline const ::vqro::rpc::StatusMessage& SearchSeriesResults::status() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.SearchSeriesResults.status)
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
inline ::vqro::rpc::StatusMessage* SearchSeriesResults::mutable_status() {
  
  if (status_ == NULL) {
    _slow_mutable_status();
  }
  // @@protoc_insertion_point(field_mutable:vqro.rpc.SearchSeriesResults.status)
  return status_;
}
inline ::vqro::rpc::StatusMessage* SearchSeriesResults::release_status() {
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_status();
  } else {
    ::vqro::rpc::StatusMessage* temp = status_;
    status_ = NULL;
    return temp;
  }
}
inline  void SearchSeriesResults::set_allocated_status(::vqro::rpc::StatusMessage* status) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete status_;
  }
  if (status != NULL) {
    _slow_set_allocated_status(message_arena, &status);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:vqro.rpc.SearchSeriesResults.status)
}

// -------------------------------------------------------------------

// LabelsQuery

// optional string regex = 1;
inline void LabelsQuery::clear_regex() {
  regex_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& LabelsQuery::regex() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.LabelsQuery.regex)
  return regex_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LabelsQuery::set_regex(const ::std::string& value) {
  
  regex_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:vqro.rpc.LabelsQuery.regex)
}
inline void LabelsQuery::set_regex(const char* value) {
  
  regex_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:vqro.rpc.LabelsQuery.regex)
}
inline void LabelsQuery::set_regex(const char* value,
    size_t size) {
  
  regex_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:vqro.rpc.LabelsQuery.regex)
}
inline ::std::string* LabelsQuery::mutable_regex() {
  
  // @@protoc_insertion_point(field_mutable:vqro.rpc.LabelsQuery.regex)
  return regex_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* LabelsQuery::release_regex() {
  
  return regex_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* LabelsQuery::unsafe_arena_release_regex() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return regex_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void LabelsQuery::set_allocated_regex(::std::string* regex) {
  if (regex != NULL) {
    
  } else {
    
  }
  regex_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), regex,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:vqro.rpc.LabelsQuery.regex)
}
inline void LabelsQuery::unsafe_arena_set_allocated_regex(
    ::std::string* regex) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (regex != NULL) {
    
  } else {
    
  }
  regex_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      regex, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:vqro.rpc.LabelsQuery.regex)
}

// optional int64 result_offset = 2;
inline void LabelsQuery::clear_result_offset() {
  result_offset_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 LabelsQuery::result_offset() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.LabelsQuery.result_offset)
  return result_offset_;
}
inline void LabelsQuery::set_result_offset(::google::protobuf::int64 value) {
  
  result_offset_ = value;
  // @@protoc_insertion_point(field_set:vqro.rpc.LabelsQuery.result_offset)
}

// optional int64 result_limit = 3;
inline void LabelsQuery::clear_result_limit() {
  result_limit_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 LabelsQuery::result_limit() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.LabelsQuery.result_limit)
  return result_limit_;
}
inline void LabelsQuery::set_result_limit(::google::protobuf::int64 value) {
  
  result_limit_ = value;
  // @@protoc_insertion_point(field_set:vqro.rpc.LabelsQuery.result_limit)
}

// -------------------------------------------------------------------

// SearchLabelsResults

// repeated string labels = 1;
inline int SearchLabelsResults::labels_size() const {
  return labels_.size();
}
inline void SearchLabelsResults::clear_labels() {
  labels_.Clear();
}
inline const ::std::string& SearchLabelsResults::labels(int index) const {
  // @@protoc_insertion_point(field_get:vqro.rpc.SearchLabelsResults.labels)
  return labels_.Get(index);
}
inline ::std::string* SearchLabelsResults::mutable_labels(int index) {
  // @@protoc_insertion_point(field_mutable:vqro.rpc.SearchLabelsResults.labels)
  return labels_.Mutable(index);
}
inline void SearchLabelsResults::set_labels(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:vqro.rpc.SearchLabelsResults.labels)
  labels_.Mutable(index)->assign(value);
}
inline void SearchLabelsResults::set_labels(int index, const char* value) {
  labels_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:vqro.rpc.SearchLabelsResults.labels)
}
inline void SearchLabelsResults::set_labels(int index, const char* value, size_t size) {
  labels_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:vqro.rpc.SearchLabelsResults.labels)
}
inline ::std::string* SearchLabelsResults::add_labels() {
  return labels_.Add();
}
inline void SearchLabelsResults::add_labels(const ::std::string& value) {
  labels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:vqro.rpc.SearchLabelsResults.labels)
}
inline void SearchLabelsResults::add_labels(const char* value) {
  labels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:vqro.rpc.SearchLabelsResults.labels)
}
inline void SearchLabelsResults::add_labels(const char* value, size_t size) {
  labels_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:vqro.rpc.SearchLabelsResults.labels)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SearchLabelsResults::labels() const {
  // @@protoc_insertion_point(field_list:vqro.rpc.SearchLabelsResults.labels)
  return labels_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SearchLabelsResults::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_list:vqro.rpc.SearchLabelsResults.labels)
  return &labels_;
}

// optional .vqro.rpc.StatusMessage status = 2;
inline bool SearchLabelsResults::has_status() const {
  return !_is_default_instance_ && status_ != NULL;
}
inline void SearchLabelsResults::clear_status() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
}
inline const ::vqro::rpc::StatusMessage& SearchLabelsResults::status() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.SearchLabelsResults.status)
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
inline ::vqro::rpc::StatusMessage* SearchLabelsResults::mutable_status() {
  
  if (status_ == NULL) {
    _slow_mutable_status();
  }
  // @@protoc_insertion_point(field_mutable:vqro.rpc.SearchLabelsResults.status)
  return status_;
}
inline ::vqro::rpc::StatusMessage* SearchLabelsResults::release_status() {
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_status();
  } else {
    ::vqro::rpc::StatusMessage* temp = status_;
    status_ = NULL;
    return temp;
  }
}
inline  void SearchLabelsResults::set_allocated_status(::vqro::rpc::StatusMessage* status) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete status_;
  }
  if (status != NULL) {
    _slow_set_allocated_status(message_arena, &status);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:vqro.rpc.SearchLabelsResults.status)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace rpc
}  // namespace vqro

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_search_2eproto__INCLUDED
