// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: vqro.proto

#include "vqro.pb.h"
#include "vqro.grpc.pb.h"

#include <grpc++/channel.h>
#include <grpc++/impl/client_unary_call.h>
#include <grpc++/impl/rpc_service_method.h>
#include <grpc++/impl/service_type.h>
#include <grpc++/support/async_unary_call.h>
#include <grpc++/support/async_stream.h>
#include <grpc++/support/sync_stream.h>
namespace vqro {
namespace rpc {

static const char* VaqueroStorage_method_names[] = {
  "/vqro.rpc.VaqueroStorage/WriteDatapoints",
  "/vqro.rpc.VaqueroStorage/ReadDatapoints",
  "/vqro.rpc.VaqueroStorage/SearchSeries",
  "/vqro.rpc.VaqueroStorage/SearchLabels",
};

std::unique_ptr< VaqueroStorage::Stub> VaqueroStorage::NewStub(const std::shared_ptr< ::grpc::Channel>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< VaqueroStorage::Stub> stub(new VaqueroStorage::Stub(channel));
  return stub;
}

VaqueroStorage::Stub::Stub(const std::shared_ptr< ::grpc::Channel>& channel)
  : channel_(channel), rpcmethod_WriteDatapoints_(VaqueroStorage_method_names[0], ::grpc::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_ReadDatapoints_(VaqueroStorage_method_names[1], ::grpc::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_SearchSeries_(VaqueroStorage_method_names[2], ::grpc::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_SearchLabels_(VaqueroStorage_method_names[3], ::grpc::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::ClientReaderWriter< ::vqro::rpc::WriteOperation, ::vqro::rpc::StatusMessage>* VaqueroStorage::Stub::WriteDatapointsRaw(::grpc::ClientContext* context) {
  return new ::grpc::ClientReaderWriter< ::vqro::rpc::WriteOperation, ::vqro::rpc::StatusMessage>(channel_.get(), rpcmethod_WriteDatapoints_, context);
}

::grpc::ClientAsyncReaderWriter< ::vqro::rpc::WriteOperation, ::vqro::rpc::StatusMessage>* VaqueroStorage::Stub::AsyncWriteDatapointsRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return new ::grpc::ClientAsyncReaderWriter< ::vqro::rpc::WriteOperation, ::vqro::rpc::StatusMessage>(channel_.get(), cq, rpcmethod_WriteDatapoints_, context, tag);
}

::grpc::ClientReader< ::vqro::rpc::ReadResult>* VaqueroStorage::Stub::ReadDatapointsRaw(::grpc::ClientContext* context, const ::vqro::rpc::ReadOperation& request) {
  return new ::grpc::ClientReader< ::vqro::rpc::ReadResult>(channel_.get(), rpcmethod_ReadDatapoints_, context, request);
}

::grpc::ClientAsyncReader< ::vqro::rpc::ReadResult>* VaqueroStorage::Stub::AsyncReadDatapointsRaw(::grpc::ClientContext* context, const ::vqro::rpc::ReadOperation& request, ::grpc::CompletionQueue* cq, void* tag) {
  return new ::grpc::ClientAsyncReader< ::vqro::rpc::ReadResult>(channel_.get(), cq, rpcmethod_ReadDatapoints_, context, request, tag);
}

::grpc::ClientReader< ::vqro::rpc::SearchSeriesResult>* VaqueroStorage::Stub::SearchSeriesRaw(::grpc::ClientContext* context, const ::vqro::rpc::SeriesQuery& request) {
  return new ::grpc::ClientReader< ::vqro::rpc::SearchSeriesResult>(channel_.get(), rpcmethod_SearchSeries_, context, request);
}

::grpc::ClientAsyncReader< ::vqro::rpc::SearchSeriesResult>* VaqueroStorage::Stub::AsyncSearchSeriesRaw(::grpc::ClientContext* context, const ::vqro::rpc::SeriesQuery& request, ::grpc::CompletionQueue* cq, void* tag) {
  return new ::grpc::ClientAsyncReader< ::vqro::rpc::SearchSeriesResult>(channel_.get(), cq, rpcmethod_SearchSeries_, context, request, tag);
}

::grpc::ClientReader< ::vqro::rpc::SearchLabelsResult>* VaqueroStorage::Stub::SearchLabelsRaw(::grpc::ClientContext* context, const ::vqro::rpc::LabelsQuery& request) {
  return new ::grpc::ClientReader< ::vqro::rpc::SearchLabelsResult>(channel_.get(), rpcmethod_SearchLabels_, context, request);
}

::grpc::ClientAsyncReader< ::vqro::rpc::SearchLabelsResult>* VaqueroStorage::Stub::AsyncSearchLabelsRaw(::grpc::ClientContext* context, const ::vqro::rpc::LabelsQuery& request, ::grpc::CompletionQueue* cq, void* tag) {
  return new ::grpc::ClientAsyncReader< ::vqro::rpc::SearchLabelsResult>(channel_.get(), cq, rpcmethod_SearchLabels_, context, request, tag);
}

VaqueroStorage::AsyncService::AsyncService() : ::grpc::AsynchronousService(VaqueroStorage_method_names, 4) {}

VaqueroStorage::Service::~Service() {
  delete service_;
}

::grpc::Status VaqueroStorage::Service::WriteDatapoints(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::vqro::rpc::StatusMessage, ::vqro::rpc::WriteOperation>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

void VaqueroStorage::AsyncService::RequestWriteDatapoints(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::vqro::rpc::StatusMessage, ::vqro::rpc::WriteOperation>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
  AsynchronousService::RequestBidiStreaming(0, context, stream, new_call_cq, notification_cq, tag);
}

::grpc::Status VaqueroStorage::Service::ReadDatapoints(::grpc::ServerContext* context, const ::vqro::rpc::ReadOperation* request, ::grpc::ServerWriter< ::vqro::rpc::ReadResult>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

void VaqueroStorage::AsyncService::RequestReadDatapoints(::grpc::ServerContext* context, ::vqro::rpc::ReadOperation* request, ::grpc::ServerAsyncWriter< ::vqro::rpc::ReadResult>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
  AsynchronousService::RequestServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
}

::grpc::Status VaqueroStorage::Service::SearchSeries(::grpc::ServerContext* context, const ::vqro::rpc::SeriesQuery* request, ::grpc::ServerWriter< ::vqro::rpc::SearchSeriesResult>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

void VaqueroStorage::AsyncService::RequestSearchSeries(::grpc::ServerContext* context, ::vqro::rpc::SeriesQuery* request, ::grpc::ServerAsyncWriter< ::vqro::rpc::SearchSeriesResult>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
  AsynchronousService::RequestServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
}

::grpc::Status VaqueroStorage::Service::SearchLabels(::grpc::ServerContext* context, const ::vqro::rpc::LabelsQuery* request, ::grpc::ServerWriter< ::vqro::rpc::SearchLabelsResult>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

void VaqueroStorage::AsyncService::RequestSearchLabels(::grpc::ServerContext* context, ::vqro::rpc::LabelsQuery* request, ::grpc::ServerAsyncWriter< ::vqro::rpc::SearchLabelsResult>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
  AsynchronousService::RequestServerStreaming(3, context, request, writer, new_call_cq, notification_cq, tag);
}

::grpc::RpcService* VaqueroStorage::Service::service() {
  if (service_ != nullptr) {
    return service_;
  }
  service_ = new ::grpc::RpcService();
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      VaqueroStorage_method_names[0],
      ::grpc::RpcMethod::BIDI_STREAMING,
      new ::grpc::BidiStreamingHandler< VaqueroStorage::Service, ::vqro::rpc::WriteOperation, ::vqro::rpc::StatusMessage>(
          std::mem_fn(&VaqueroStorage::Service::WriteDatapoints), this)));
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      VaqueroStorage_method_names[1],
      ::grpc::RpcMethod::SERVER_STREAMING,
      new ::grpc::ServerStreamingHandler< VaqueroStorage::Service, ::vqro::rpc::ReadOperation, ::vqro::rpc::ReadResult>(
          std::mem_fn(&VaqueroStorage::Service::ReadDatapoints), this)));
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      VaqueroStorage_method_names[2],
      ::grpc::RpcMethod::SERVER_STREAMING,
      new ::grpc::ServerStreamingHandler< VaqueroStorage::Service, ::vqro::rpc::SeriesQuery, ::vqro::rpc::SearchSeriesResult>(
          std::mem_fn(&VaqueroStorage::Service::SearchSeries), this)));
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      VaqueroStorage_method_names[3],
      ::grpc::RpcMethod::SERVER_STREAMING,
      new ::grpc::ServerStreamingHandler< VaqueroStorage::Service, ::vqro::rpc::LabelsQuery, ::vqro::rpc::SearchLabelsResult>(
          std::mem_fn(&VaqueroStorage::Service::SearchLabels), this)));
  return service_;
}


}  // namespace vqro
}  // namespace rpc

