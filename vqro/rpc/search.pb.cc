// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: search.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "search.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace vqro {
namespace rpc {

namespace {

const ::google::protobuf::Descriptor* SeriesQuery_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SeriesQuery_reflection_ = NULL;
const ::google::protobuf::Descriptor* LabelConstraint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LabelConstraint_reflection_ = NULL;
struct LabelConstraintOneofInstance {
  ::google::protobuf::internal::ArenaStringPtr exact_value_;
  ::google::protobuf::internal::ArenaStringPtr regex_;
}* LabelConstraint_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* SearchSeriesResults_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SearchSeriesResults_reflection_ = NULL;
const ::google::protobuf::Descriptor* LabelsQuery_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LabelsQuery_reflection_ = NULL;
const ::google::protobuf::Descriptor* SearchLabelsResults_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SearchLabelsResults_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_search_2eproto() {
  protobuf_AddDesc_search_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "search.proto");
  GOOGLE_CHECK(file != NULL);
  SeriesQuery_descriptor_ = file->message_type(0);
  static const int SeriesQuery_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeriesQuery, constraints_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeriesQuery, result_offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeriesQuery, result_limit_),
  };
  SeriesQuery_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SeriesQuery_descriptor_,
      SeriesQuery::default_instance_,
      SeriesQuery_offsets_,
      -1,
      -1,
      -1,
      sizeof(SeriesQuery),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeriesQuery, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeriesQuery, _is_default_instance_));
  LabelConstraint_descriptor_ = file->message_type(1);
  static const int LabelConstraint_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelConstraint, label_name_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(LabelConstraint_default_oneof_instance_, exact_value_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(LabelConstraint_default_oneof_instance_, regex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelConstraint, predicate_),
  };
  LabelConstraint_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LabelConstraint_descriptor_,
      LabelConstraint::default_instance_,
      LabelConstraint_offsets_,
      -1,
      -1,
      -1,
      LabelConstraint_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelConstraint, _oneof_case_[0]),
      sizeof(LabelConstraint),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelConstraint, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelConstraint, _is_default_instance_));
  SearchSeriesResults_descriptor_ = file->message_type(2);
  static const int SearchSeriesResults_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchSeriesResults, matches_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchSeriesResults, status_),
  };
  SearchSeriesResults_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SearchSeriesResults_descriptor_,
      SearchSeriesResults::default_instance_,
      SearchSeriesResults_offsets_,
      -1,
      -1,
      -1,
      sizeof(SearchSeriesResults),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchSeriesResults, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchSeriesResults, _is_default_instance_));
  LabelsQuery_descriptor_ = file->message_type(3);
  static const int LabelsQuery_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelsQuery, regex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelsQuery, result_offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelsQuery, result_limit_),
  };
  LabelsQuery_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LabelsQuery_descriptor_,
      LabelsQuery::default_instance_,
      LabelsQuery_offsets_,
      -1,
      -1,
      -1,
      sizeof(LabelsQuery),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelsQuery, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelsQuery, _is_default_instance_));
  SearchLabelsResults_descriptor_ = file->message_type(4);
  static const int SearchLabelsResults_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchLabelsResults, labels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchLabelsResults, status_),
  };
  SearchLabelsResults_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SearchLabelsResults_descriptor_,
      SearchLabelsResults::default_instance_,
      SearchLabelsResults_offsets_,
      -1,
      -1,
      -1,
      sizeof(SearchLabelsResults),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchLabelsResults, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchLabelsResults, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_search_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SeriesQuery_descriptor_, &SeriesQuery::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LabelConstraint_descriptor_, &LabelConstraint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SearchSeriesResults_descriptor_, &SearchSeriesResults::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LabelsQuery_descriptor_, &LabelsQuery::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SearchLabelsResults_descriptor_, &SearchLabelsResults::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_search_2eproto() {
  delete SeriesQuery::default_instance_;
  delete SeriesQuery_reflection_;
  delete LabelConstraint::default_instance_;
  delete LabelConstraint_default_oneof_instance_;
  delete LabelConstraint_reflection_;
  delete SearchSeriesResults::default_instance_;
  delete SearchSeriesResults_reflection_;
  delete LabelsQuery::default_instance_;
  delete LabelsQuery_reflection_;
  delete SearchLabelsResults::default_instance_;
  delete SearchLabelsResults_reflection_;
}

void protobuf_AddDesc_search_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::vqro::rpc::protobuf_AddDesc_core_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014search.proto\022\010vqro.rpc\032\ncore.proto\"j\n\013"
    "SeriesQuery\022.\n\013constraints\030\001 \003(\0132\031.vqro."
    "rpc.LabelConstraint\022\025\n\rresult_offset\030\002 \001"
    "(\003\022\024\n\014result_limit\030\003 \001(\003\"Z\n\017LabelConstra"
    "int\022\022\n\nlabel_name\030\001 \001(\t\022\025\n\013exact_value\030\002"
    " \001(\tH\000\022\017\n\005regex\030\003 \001(\tH\000B\013\n\tpredicate\"a\n\023"
    "SearchSeriesResults\022!\n\007matches\030\001 \003(\0132\020.v"
    "qro.rpc.Series\022\'\n\006status\030\002 \001(\0132\027.vqro.rp"
    "c.StatusMessage\"I\n\013LabelsQuery\022\r\n\005regex\030"
    "\001 \001(\t\022\025\n\rresult_offset\030\002 \001(\003\022\024\n\014result_l"
    "imit\030\003 \001(\003\"N\n\023SearchLabelsResults\022\016\n\006lab"
    "els\030\001 \003(\t\022\'\n\006status\030\002 \001(\0132\027.vqro.rpc.Sta"
    "tusMessage2\237\001\n\rVaqueroSearch\022F\n\014SearchSe"
    "ries\022\025.vqro.rpc.SeriesQuery\032\035.vqro.rpc.S"
    "earchSeriesResults0\001\022F\n\014SearchLabels\022\025.v"
    "qro.rpc.LabelsQuery\032\035.vqro.rpc.SearchLab"
    "elsResults0\001B\003\370\001\001b\006proto3", 665);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "search.proto", &protobuf_RegisterTypes);
  SeriesQuery::default_instance_ = new SeriesQuery();
  LabelConstraint::default_instance_ = new LabelConstraint();
  LabelConstraint_default_oneof_instance_ = new LabelConstraintOneofInstance();
  SearchSeriesResults::default_instance_ = new SearchSeriesResults();
  LabelsQuery::default_instance_ = new LabelsQuery();
  SearchLabelsResults::default_instance_ = new SearchLabelsResults();
  SeriesQuery::default_instance_->InitAsDefaultInstance();
  LabelConstraint::default_instance_->InitAsDefaultInstance();
  SearchSeriesResults::default_instance_->InitAsDefaultInstance();
  LabelsQuery::default_instance_->InitAsDefaultInstance();
  SearchLabelsResults::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_search_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_search_2eproto {
  StaticDescriptorInitializer_search_2eproto() {
    protobuf_AddDesc_search_2eproto();
  }
} static_descriptor_initializer_search_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int SeriesQuery::kConstraintsFieldNumber;
const int SeriesQuery::kResultOffsetFieldNumber;
const int SeriesQuery::kResultLimitFieldNumber;
#endif  // !_MSC_VER

SeriesQuery::SeriesQuery()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vqro.rpc.SeriesQuery)
}

SeriesQuery::SeriesQuery(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  constraints_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vqro.rpc.SeriesQuery)
}

void SeriesQuery::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SeriesQuery::SeriesQuery(const SeriesQuery& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vqro.rpc.SeriesQuery)
}

void SeriesQuery::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  result_offset_ = GOOGLE_LONGLONG(0);
  result_limit_ = GOOGLE_LONGLONG(0);
}

SeriesQuery::~SeriesQuery() {
  // @@protoc_insertion_point(destructor:vqro.rpc.SeriesQuery)
  SharedDtor();
}

void SeriesQuery::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  if (this != default_instance_) {
  }
}

void SeriesQuery::ArenaDtor(void* object) {
  SeriesQuery* _this = reinterpret_cast< SeriesQuery* >(object);
  (void)_this;
}
void SeriesQuery::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SeriesQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SeriesQuery::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SeriesQuery_descriptor_;
}

const SeriesQuery& SeriesQuery::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_search_2eproto();
  return *default_instance_;
}

SeriesQuery* SeriesQuery::default_instance_ = NULL;

SeriesQuery* SeriesQuery::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<SeriesQuery>(arena);
}

void SeriesQuery::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SeriesQuery*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(result_offset_, result_limit_);

#undef ZR_HELPER_
#undef ZR_

  constraints_.Clear();
}

bool SeriesQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vqro.rpc.SeriesQuery)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .vqro.rpc.LabelConstraint constraints = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_constraints:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_constraints()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_constraints;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(16)) goto parse_result_offset;
        break;
      }

      // optional int64 result_offset = 2;
      case 2: {
        if (tag == 16) {
         parse_result_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &result_offset_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_result_limit;
        break;
      }

      // optional int64 result_limit = 3;
      case 3: {
        if (tag == 24) {
         parse_result_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &result_limit_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vqro.rpc.SeriesQuery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vqro.rpc.SeriesQuery)
  return false;
#undef DO_
}

void SeriesQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vqro.rpc.SeriesQuery)
  // repeated .vqro.rpc.LabelConstraint constraints = 1;
  for (unsigned int i = 0, n = this->constraints_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->constraints(i), output);
  }

  // optional int64 result_offset = 2;
  if (this->result_offset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->result_offset(), output);
  }

  // optional int64 result_limit = 3;
  if (this->result_limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->result_limit(), output);
  }

  // @@protoc_insertion_point(serialize_end:vqro.rpc.SeriesQuery)
}

::google::protobuf::uint8* SeriesQuery::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vqro.rpc.SeriesQuery)
  // repeated .vqro.rpc.LabelConstraint constraints = 1;
  for (unsigned int i = 0, n = this->constraints_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->constraints(i), target);
  }

  // optional int64 result_offset = 2;
  if (this->result_offset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->result_offset(), target);
  }

  // optional int64 result_limit = 3;
  if (this->result_limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->result_limit(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:vqro.rpc.SeriesQuery)
  return target;
}

int SeriesQuery::ByteSize() const {
  int total_size = 0;

  // optional int64 result_offset = 2;
  if (this->result_offset() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->result_offset());
  }

  // optional int64 result_limit = 3;
  if (this->result_limit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->result_limit());
  }

  // repeated .vqro.rpc.LabelConstraint constraints = 1;
  total_size += 1 * this->constraints_size();
  for (int i = 0; i < this->constraints_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->constraints(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SeriesQuery::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SeriesQuery* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SeriesQuery>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SeriesQuery::MergeFrom(const SeriesQuery& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  constraints_.MergeFrom(from.constraints_);
  if (from.result_offset() != 0) {
    set_result_offset(from.result_offset());
  }
  if (from.result_limit() != 0) {
    set_result_limit(from.result_limit());
  }
}

void SeriesQuery::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SeriesQuery::CopyFrom(const SeriesQuery& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeriesQuery::IsInitialized() const {

  return true;
}

void SeriesQuery::Swap(SeriesQuery* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SeriesQuery temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void SeriesQuery::UnsafeArenaSwap(SeriesQuery* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SeriesQuery::InternalSwap(SeriesQuery* other) {
  constraints_.UnsafeArenaSwap(&other->constraints_);
  std::swap(result_offset_, other->result_offset_);
  std::swap(result_limit_, other->result_limit_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SeriesQuery::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SeriesQuery_descriptor_;
  metadata.reflection = SeriesQuery_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SeriesQuery

// repeated .vqro.rpc.LabelConstraint constraints = 1;
int SeriesQuery::constraints_size() const {
  return constraints_.size();
}
void SeriesQuery::clear_constraints() {
  constraints_.Clear();
}
const ::vqro::rpc::LabelConstraint& SeriesQuery::constraints(int index) const {
  // @@protoc_insertion_point(field_get:vqro.rpc.SeriesQuery.constraints)
  return constraints_.Get(index);
}
::vqro::rpc::LabelConstraint* SeriesQuery::mutable_constraints(int index) {
  // @@protoc_insertion_point(field_mutable:vqro.rpc.SeriesQuery.constraints)
  return constraints_.Mutable(index);
}
::vqro::rpc::LabelConstraint* SeriesQuery::add_constraints() {
  // @@protoc_insertion_point(field_add:vqro.rpc.SeriesQuery.constraints)
  return constraints_.Add();
}
::google::protobuf::RepeatedPtrField< ::vqro::rpc::LabelConstraint >*
SeriesQuery::mutable_constraints() {
  // @@protoc_insertion_point(field_mutable_list:vqro.rpc.SeriesQuery.constraints)
  return &constraints_;
}
const ::google::protobuf::RepeatedPtrField< ::vqro::rpc::LabelConstraint >&
SeriesQuery::constraints() const {
  // @@protoc_insertion_point(field_list:vqro.rpc.SeriesQuery.constraints)
  return constraints_;
}

// optional int64 result_offset = 2;
void SeriesQuery::clear_result_offset() {
  result_offset_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 SeriesQuery::result_offset() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.SeriesQuery.result_offset)
  return result_offset_;
}
 void SeriesQuery::set_result_offset(::google::protobuf::int64 value) {
  
  result_offset_ = value;
  // @@protoc_insertion_point(field_set:vqro.rpc.SeriesQuery.result_offset)
}

// optional int64 result_limit = 3;
void SeriesQuery::clear_result_limit() {
  result_limit_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 SeriesQuery::result_limit() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.SeriesQuery.result_limit)
  return result_limit_;
}
 void SeriesQuery::set_result_limit(::google::protobuf::int64 value) {
  
  result_limit_ = value;
  // @@protoc_insertion_point(field_set:vqro.rpc.SeriesQuery.result_limit)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int LabelConstraint::kLabelNameFieldNumber;
const int LabelConstraint::kExactValueFieldNumber;
const int LabelConstraint::kRegexFieldNumber;
#endif  // !_MSC_VER

LabelConstraint::LabelConstraint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vqro.rpc.LabelConstraint)
}

LabelConstraint::LabelConstraint(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vqro.rpc.LabelConstraint)
}

void LabelConstraint::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  LabelConstraint_default_oneof_instance_->exact_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  LabelConstraint_default_oneof_instance_->regex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

LabelConstraint::LabelConstraint(const LabelConstraint& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vqro.rpc.LabelConstraint)
}

void LabelConstraint::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  label_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_predicate();
}

LabelConstraint::~LabelConstraint() {
  // @@protoc_insertion_point(destructor:vqro.rpc.LabelConstraint)
  SharedDtor();
}

void LabelConstraint::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  label_name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (has_predicate()) {
    clear_predicate();
  }
  if (this != default_instance_) {
  }
}

void LabelConstraint::ArenaDtor(void* object) {
  LabelConstraint* _this = reinterpret_cast< LabelConstraint* >(object);
  (void)_this;
}
void LabelConstraint::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void LabelConstraint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LabelConstraint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LabelConstraint_descriptor_;
}

const LabelConstraint& LabelConstraint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_search_2eproto();
  return *default_instance_;
}

LabelConstraint* LabelConstraint::default_instance_ = NULL;

LabelConstraint* LabelConstraint::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<LabelConstraint>(arena);
}

void LabelConstraint::clear_predicate() {
  switch(predicate_case()) {
    case kExactValue: {
      predicate_.exact_value_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
          GetArenaNoVirtual());
      break;
    }
    case kRegex: {
      predicate_.regex_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
          GetArenaNoVirtual());
      break;
    }
    case PREDICATE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PREDICATE_NOT_SET;
}


void LabelConstraint::Clear() {
  label_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_predicate();
}

bool LabelConstraint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vqro.rpc.LabelConstraint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string label_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_label_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->label_name().data(), this->label_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vqro.rpc.LabelConstraint.label_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_exact_value;
        break;
      }

      // optional string exact_value = 2;
      case 2: {
        if (tag == 18) {
         parse_exact_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exact_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->exact_value().data(), this->exact_value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vqro.rpc.LabelConstraint.exact_value"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_regex;
        break;
      }

      // optional string regex = 3;
      case 3: {
        if (tag == 26) {
         parse_regex:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_regex()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->regex().data(), this->regex().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vqro.rpc.LabelConstraint.regex"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vqro.rpc.LabelConstraint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vqro.rpc.LabelConstraint)
  return false;
#undef DO_
}

void LabelConstraint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vqro.rpc.LabelConstraint)
  // optional string label_name = 1;
  if (this->label_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->label_name().data(), this->label_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vqro.rpc.LabelConstraint.label_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->label_name(), output);
  }

  // optional string exact_value = 2;
  if (has_exact_value()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exact_value().data(), this->exact_value().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vqro.rpc.LabelConstraint.exact_value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->exact_value(), output);
  }

  // optional string regex = 3;
  if (has_regex()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->regex().data(), this->regex().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vqro.rpc.LabelConstraint.regex");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->regex(), output);
  }

  // @@protoc_insertion_point(serialize_end:vqro.rpc.LabelConstraint)
}

::google::protobuf::uint8* LabelConstraint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vqro.rpc.LabelConstraint)
  // optional string label_name = 1;
  if (this->label_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->label_name().data(), this->label_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vqro.rpc.LabelConstraint.label_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->label_name(), target);
  }

  // optional string exact_value = 2;
  if (has_exact_value()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exact_value().data(), this->exact_value().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vqro.rpc.LabelConstraint.exact_value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->exact_value(), target);
  }

  // optional string regex = 3;
  if (has_regex()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->regex().data(), this->regex().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vqro.rpc.LabelConstraint.regex");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->regex(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:vqro.rpc.LabelConstraint)
  return target;
}

int LabelConstraint::ByteSize() const {
  int total_size = 0;

  // optional string label_name = 1;
  if (this->label_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->label_name());
  }

  switch (predicate_case()) {
    // optional string exact_value = 2;
    case kExactValue: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exact_value());
      break;
    }
    // optional string regex = 3;
    case kRegex: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->regex());
      break;
    }
    case PREDICATE_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LabelConstraint::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LabelConstraint* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LabelConstraint>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LabelConstraint::MergeFrom(const LabelConstraint& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  switch (from.predicate_case()) {
    case kExactValue: {
      set_exact_value(from.exact_value());
      break;
    }
    case kRegex: {
      set_regex(from.regex());
      break;
    }
    case PREDICATE_NOT_SET: {
      break;
    }
  }
  if (from.label_name().size() > 0) {
    set_label_name(from.label_name());
  }
}

void LabelConstraint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LabelConstraint::CopyFrom(const LabelConstraint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LabelConstraint::IsInitialized() const {

  return true;
}

void LabelConstraint::Swap(LabelConstraint* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    LabelConstraint temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void LabelConstraint::UnsafeArenaSwap(LabelConstraint* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void LabelConstraint::InternalSwap(LabelConstraint* other) {
  label_name_.Swap(&other->label_name_);
  std::swap(predicate_, other->predicate_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LabelConstraint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LabelConstraint_descriptor_;
  metadata.reflection = LabelConstraint_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LabelConstraint

// optional string label_name = 1;
void LabelConstraint::clear_label_name() {
  label_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& LabelConstraint::label_name() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.LabelConstraint.label_name)
  return label_name_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LabelConstraint::set_label_name(const ::std::string& value) {
  
  label_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:vqro.rpc.LabelConstraint.label_name)
}
 void LabelConstraint::set_label_name(const char* value) {
  
  label_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:vqro.rpc.LabelConstraint.label_name)
}
 void LabelConstraint::set_label_name(const char* value,
    size_t size) {
  
  label_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:vqro.rpc.LabelConstraint.label_name)
}
 ::std::string* LabelConstraint::mutable_label_name() {
  
  // @@protoc_insertion_point(field_mutable:vqro.rpc.LabelConstraint.label_name)
  return label_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* LabelConstraint::release_label_name() {
  
  return label_name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* LabelConstraint::unsafe_arena_release_label_name() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return label_name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void LabelConstraint::set_allocated_label_name(::std::string* label_name) {
  if (label_name != NULL) {
    
  } else {
    
  }
  label_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), label_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:vqro.rpc.LabelConstraint.label_name)
}
 void LabelConstraint::unsafe_arena_set_allocated_label_name(
    ::std::string* label_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (label_name != NULL) {
    
  } else {
    
  }
  label_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      label_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:vqro.rpc.LabelConstraint.label_name)
}

// optional string exact_value = 2;
bool LabelConstraint::has_exact_value() const {
  return predicate_case() == kExactValue;
}
void LabelConstraint::set_has_exact_value() {
  _oneof_case_[0] = kExactValue;
}
void LabelConstraint::clear_exact_value() {
  if (has_exact_value()) {
    predicate_.exact_value_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        GetArenaNoVirtual());
    clear_has_predicate();
  }
}
 const ::std::string& LabelConstraint::exact_value() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.LabelConstraint.exact_value)
  if (has_exact_value()) {
    return predicate_.exact_value_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
 void LabelConstraint::set_exact_value(const ::std::string& value) {
  if (!has_exact_value()) {
    clear_predicate();
    set_has_exact_value();
    predicate_.exact_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  predicate_.exact_value_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:vqro.rpc.LabelConstraint.exact_value)
}
 void LabelConstraint::set_exact_value(const char* value) {
  if (!has_exact_value()) {
    clear_predicate();
    set_has_exact_value();
    predicate_.exact_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  predicate_.exact_value_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:vqro.rpc.LabelConstraint.exact_value)
}
 void LabelConstraint::set_exact_value(const char* value,
                             size_t size) {
  if (!has_exact_value()) {
    clear_predicate();
    set_has_exact_value();
    predicate_.exact_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  predicate_.exact_value_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:vqro.rpc.LabelConstraint.exact_value)
}
 ::std::string* LabelConstraint::mutable_exact_value() {
  if (!has_exact_value()) {
    clear_predicate();
    set_has_exact_value();
    predicate_.exact_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return predicate_.exact_value_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_mutable:vqro.rpc.LabelConstraint.exact_value)
}
 ::std::string* LabelConstraint::release_exact_value() {
  if (has_exact_value()) {
    clear_has_predicate();
    return predicate_.exact_value_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        GetArenaNoVirtual());
  } else {
    return NULL;
  }
}
 ::std::string* LabelConstraint::unsafe_arena_release_exact_value() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (has_exact_value()) {
    clear_has_predicate();
    return predicate_.exact_value_.UnsafeArenaRelease(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  } else {
    return NULL;
  }
}
 void LabelConstraint::set_allocated_exact_value(::std::string* exact_value) {
  if (!has_exact_value()) {
    predicate_.exact_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_predicate();
  if (exact_value != NULL) {
    set_has_exact_value();
    predicate_.exact_value_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exact_value,
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_set_allocated:vqro.rpc.LabelConstraint.exact_value)
}
 void LabelConstraint::unsafe_arena_set_allocated_exact_value(::std::string* exact_value) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (!has_exact_value()) {
    predicate_.exact_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_predicate();
  if (exact_value) {
    set_has_exact_value();
    predicate_.exact_value_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exact_value, GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_set_allocated:vqro.rpc.LabelConstraint.exact_value)
}

// optional string regex = 3;
bool LabelConstraint::has_regex() const {
  return predicate_case() == kRegex;
}
void LabelConstraint::set_has_regex() {
  _oneof_case_[0] = kRegex;
}
void LabelConstraint::clear_regex() {
  if (has_regex()) {
    predicate_.regex_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        GetArenaNoVirtual());
    clear_has_predicate();
  }
}
 const ::std::string& LabelConstraint::regex() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.LabelConstraint.regex)
  if (has_regex()) {
    return predicate_.regex_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
 void LabelConstraint::set_regex(const ::std::string& value) {
  if (!has_regex()) {
    clear_predicate();
    set_has_regex();
    predicate_.regex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  predicate_.regex_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:vqro.rpc.LabelConstraint.regex)
}
 void LabelConstraint::set_regex(const char* value) {
  if (!has_regex()) {
    clear_predicate();
    set_has_regex();
    predicate_.regex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  predicate_.regex_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:vqro.rpc.LabelConstraint.regex)
}
 void LabelConstraint::set_regex(const char* value,
                             size_t size) {
  if (!has_regex()) {
    clear_predicate();
    set_has_regex();
    predicate_.regex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  predicate_.regex_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:vqro.rpc.LabelConstraint.regex)
}
 ::std::string* LabelConstraint::mutable_regex() {
  if (!has_regex()) {
    clear_predicate();
    set_has_regex();
    predicate_.regex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return predicate_.regex_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_mutable:vqro.rpc.LabelConstraint.regex)
}
 ::std::string* LabelConstraint::release_regex() {
  if (has_regex()) {
    clear_has_predicate();
    return predicate_.regex_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        GetArenaNoVirtual());
  } else {
    return NULL;
  }
}
 ::std::string* LabelConstraint::unsafe_arena_release_regex() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (has_regex()) {
    clear_has_predicate();
    return predicate_.regex_.UnsafeArenaRelease(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  } else {
    return NULL;
  }
}
 void LabelConstraint::set_allocated_regex(::std::string* regex) {
  if (!has_regex()) {
    predicate_.regex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_predicate();
  if (regex != NULL) {
    set_has_regex();
    predicate_.regex_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), regex,
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_set_allocated:vqro.rpc.LabelConstraint.regex)
}
 void LabelConstraint::unsafe_arena_set_allocated_regex(::std::string* regex) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (!has_regex()) {
    predicate_.regex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_predicate();
  if (regex) {
    set_has_regex();
    predicate_.regex_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), regex, GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_set_allocated:vqro.rpc.LabelConstraint.regex)
}

bool LabelConstraint::has_predicate() const {
  return predicate_case() != PREDICATE_NOT_SET;
}
void LabelConstraint::clear_has_predicate() {
  _oneof_case_[0] = PREDICATE_NOT_SET;
}
LabelConstraint::PredicateCase LabelConstraint::predicate_case() const {
  return LabelConstraint::PredicateCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void SearchSeriesResults::_slow_mutable_status() {
  status_ = ::google::protobuf::Arena::CreateMessage< ::vqro::rpc::StatusMessage >(
      GetArenaNoVirtual());
}
::vqro::rpc::StatusMessage* SearchSeriesResults::_slow_release_status() {
  if (status_ == NULL) {
    return NULL;
  } else {
    ::vqro::rpc::StatusMessage* temp = new ::vqro::rpc::StatusMessage;
    temp->MergeFrom(*status_);
    status_ = NULL;
    return temp;
  }
}
::vqro::rpc::StatusMessage* SearchSeriesResults::unsafe_arena_release_status() {
  
  ::vqro::rpc::StatusMessage* temp = status_;
  status_ = NULL;
  return temp;
}
void SearchSeriesResults::_slow_set_allocated_status(
    ::google::protobuf::Arena* message_arena, ::vqro::rpc::StatusMessage** status) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*status) == NULL) {
      message_arena->Own(*status);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*status)) {
      ::vqro::rpc::StatusMessage* new_status = 
            ::google::protobuf::Arena::CreateMessage< ::vqro::rpc::StatusMessage >(
            message_arena);
      new_status->CopyFrom(**status);
      *status = new_status;
    }
}
void SearchSeriesResults::unsafe_arena_set_allocated_status(
    ::vqro::rpc::StatusMessage* status) {
  if (GetArenaNoVirtual() == NULL) {
    delete status_;
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vqro.rpc.SearchSeriesResults.status)
}
#ifndef _MSC_VER
const int SearchSeriesResults::kMatchesFieldNumber;
const int SearchSeriesResults::kStatusFieldNumber;
#endif  // !_MSC_VER

SearchSeriesResults::SearchSeriesResults()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vqro.rpc.SearchSeriesResults)
}

SearchSeriesResults::SearchSeriesResults(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  matches_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vqro.rpc.SearchSeriesResults)
}

void SearchSeriesResults::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  status_ = const_cast< ::vqro::rpc::StatusMessage*>(&::vqro::rpc::StatusMessage::default_instance());
}

SearchSeriesResults::SearchSeriesResults(const SearchSeriesResults& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vqro.rpc.SearchSeriesResults)
}

void SearchSeriesResults::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  status_ = NULL;
}

SearchSeriesResults::~SearchSeriesResults() {
  // @@protoc_insertion_point(destructor:vqro.rpc.SearchSeriesResults)
  SharedDtor();
}

void SearchSeriesResults::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  if (this != default_instance_) {
    delete status_;
  }
}

void SearchSeriesResults::ArenaDtor(void* object) {
  SearchSeriesResults* _this = reinterpret_cast< SearchSeriesResults* >(object);
  (void)_this;
}
void SearchSeriesResults::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SearchSeriesResults::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchSeriesResults::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SearchSeriesResults_descriptor_;
}

const SearchSeriesResults& SearchSeriesResults::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_search_2eproto();
  return *default_instance_;
}

SearchSeriesResults* SearchSeriesResults::default_instance_ = NULL;

SearchSeriesResults* SearchSeriesResults::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<SearchSeriesResults>(arena);
}

void SearchSeriesResults::Clear() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
  matches_.Clear();
}

bool SearchSeriesResults::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vqro.rpc.SearchSeriesResults)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .vqro.rpc.Series matches = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_matches:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_matches()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_matches;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(18)) goto parse_status;
        break;
      }

      // optional .vqro.rpc.StatusMessage status = 2;
      case 2: {
        if (tag == 18) {
         parse_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vqro.rpc.SearchSeriesResults)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vqro.rpc.SearchSeriesResults)
  return false;
#undef DO_
}

void SearchSeriesResults::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vqro.rpc.SearchSeriesResults)
  // repeated .vqro.rpc.Series matches = 1;
  for (unsigned int i = 0, n = this->matches_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->matches(i), output);
  }

  // optional .vqro.rpc.StatusMessage status = 2;
  if (this->has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->status_, output);
  }

  // @@protoc_insertion_point(serialize_end:vqro.rpc.SearchSeriesResults)
}

::google::protobuf::uint8* SearchSeriesResults::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vqro.rpc.SearchSeriesResults)
  // repeated .vqro.rpc.Series matches = 1;
  for (unsigned int i = 0, n = this->matches_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->matches(i), target);
  }

  // optional .vqro.rpc.StatusMessage status = 2;
  if (this->has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->status_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:vqro.rpc.SearchSeriesResults)
  return target;
}

int SearchSeriesResults::ByteSize() const {
  int total_size = 0;

  // optional .vqro.rpc.StatusMessage status = 2;
  if (this->has_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->status_);
  }

  // repeated .vqro.rpc.Series matches = 1;
  total_size += 1 * this->matches_size();
  for (int i = 0; i < this->matches_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->matches(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchSeriesResults::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SearchSeriesResults* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SearchSeriesResults>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SearchSeriesResults::MergeFrom(const SearchSeriesResults& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  matches_.MergeFrom(from.matches_);
  if (from.has_status()) {
    mutable_status()->::vqro::rpc::StatusMessage::MergeFrom(from.status());
  }
}

void SearchSeriesResults::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchSeriesResults::CopyFrom(const SearchSeriesResults& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchSeriesResults::IsInitialized() const {

  return true;
}

void SearchSeriesResults::Swap(SearchSeriesResults* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SearchSeriesResults temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void SearchSeriesResults::UnsafeArenaSwap(SearchSeriesResults* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SearchSeriesResults::InternalSwap(SearchSeriesResults* other) {
  matches_.UnsafeArenaSwap(&other->matches_);
  std::swap(status_, other->status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SearchSeriesResults::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SearchSeriesResults_descriptor_;
  metadata.reflection = SearchSeriesResults_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SearchSeriesResults

// repeated .vqro.rpc.Series matches = 1;
int SearchSeriesResults::matches_size() const {
  return matches_.size();
}
void SearchSeriesResults::clear_matches() {
  matches_.Clear();
}
const ::vqro::rpc::Series& SearchSeriesResults::matches(int index) const {
  // @@protoc_insertion_point(field_get:vqro.rpc.SearchSeriesResults.matches)
  return matches_.Get(index);
}
::vqro::rpc::Series* SearchSeriesResults::mutable_matches(int index) {
  // @@protoc_insertion_point(field_mutable:vqro.rpc.SearchSeriesResults.matches)
  return matches_.Mutable(index);
}
::vqro::rpc::Series* SearchSeriesResults::add_matches() {
  // @@protoc_insertion_point(field_add:vqro.rpc.SearchSeriesResults.matches)
  return matches_.Add();
}
::google::protobuf::RepeatedPtrField< ::vqro::rpc::Series >*
SearchSeriesResults::mutable_matches() {
  // @@protoc_insertion_point(field_mutable_list:vqro.rpc.SearchSeriesResults.matches)
  return &matches_;
}
const ::google::protobuf::RepeatedPtrField< ::vqro::rpc::Series >&
SearchSeriesResults::matches() const {
  // @@protoc_insertion_point(field_list:vqro.rpc.SearchSeriesResults.matches)
  return matches_;
}

// optional .vqro.rpc.StatusMessage status = 2;
bool SearchSeriesResults::has_status() const {
  return !_is_default_instance_ && status_ != NULL;
}
void SearchSeriesResults::clear_status() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
}
const ::vqro::rpc::StatusMessage& SearchSeriesResults::status() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.SearchSeriesResults.status)
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
::vqro::rpc::StatusMessage* SearchSeriesResults::mutable_status() {
  
  if (status_ == NULL) {
    _slow_mutable_status();
  }
  // @@protoc_insertion_point(field_mutable:vqro.rpc.SearchSeriesResults.status)
  return status_;
}
::vqro::rpc::StatusMessage* SearchSeriesResults::release_status() {
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_status();
  } else {
    ::vqro::rpc::StatusMessage* temp = status_;
    status_ = NULL;
    return temp;
  }
}
 void SearchSeriesResults::set_allocated_status(::vqro::rpc::StatusMessage* status) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete status_;
  }
  if (status != NULL) {
    _slow_set_allocated_status(message_arena, &status);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:vqro.rpc.SearchSeriesResults.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int LabelsQuery::kRegexFieldNumber;
const int LabelsQuery::kResultOffsetFieldNumber;
const int LabelsQuery::kResultLimitFieldNumber;
#endif  // !_MSC_VER

LabelsQuery::LabelsQuery()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vqro.rpc.LabelsQuery)
}

LabelsQuery::LabelsQuery(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vqro.rpc.LabelsQuery)
}

void LabelsQuery::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

LabelsQuery::LabelsQuery(const LabelsQuery& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vqro.rpc.LabelsQuery)
}

void LabelsQuery::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  regex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  result_offset_ = GOOGLE_LONGLONG(0);
  result_limit_ = GOOGLE_LONGLONG(0);
}

LabelsQuery::~LabelsQuery() {
  // @@protoc_insertion_point(destructor:vqro.rpc.LabelsQuery)
  SharedDtor();
}

void LabelsQuery::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  regex_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (this != default_instance_) {
  }
}

void LabelsQuery::ArenaDtor(void* object) {
  LabelsQuery* _this = reinterpret_cast< LabelsQuery* >(object);
  (void)_this;
}
void LabelsQuery::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void LabelsQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LabelsQuery::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LabelsQuery_descriptor_;
}

const LabelsQuery& LabelsQuery::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_search_2eproto();
  return *default_instance_;
}

LabelsQuery* LabelsQuery::default_instance_ = NULL;

LabelsQuery* LabelsQuery::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<LabelsQuery>(arena);
}

void LabelsQuery::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<LabelsQuery*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(result_offset_, result_limit_);
  regex_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());

#undef ZR_HELPER_
#undef ZR_

}

bool LabelsQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vqro.rpc.LabelsQuery)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string regex = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_regex()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->regex().data(), this->regex().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vqro.rpc.LabelsQuery.regex"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result_offset;
        break;
      }

      // optional int64 result_offset = 2;
      case 2: {
        if (tag == 16) {
         parse_result_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &result_offset_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_result_limit;
        break;
      }

      // optional int64 result_limit = 3;
      case 3: {
        if (tag == 24) {
         parse_result_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &result_limit_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vqro.rpc.LabelsQuery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vqro.rpc.LabelsQuery)
  return false;
#undef DO_
}

void LabelsQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vqro.rpc.LabelsQuery)
  // optional string regex = 1;
  if (this->regex().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->regex().data(), this->regex().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vqro.rpc.LabelsQuery.regex");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->regex(), output);
  }

  // optional int64 result_offset = 2;
  if (this->result_offset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->result_offset(), output);
  }

  // optional int64 result_limit = 3;
  if (this->result_limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->result_limit(), output);
  }

  // @@protoc_insertion_point(serialize_end:vqro.rpc.LabelsQuery)
}

::google::protobuf::uint8* LabelsQuery::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vqro.rpc.LabelsQuery)
  // optional string regex = 1;
  if (this->regex().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->regex().data(), this->regex().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vqro.rpc.LabelsQuery.regex");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->regex(), target);
  }

  // optional int64 result_offset = 2;
  if (this->result_offset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->result_offset(), target);
  }

  // optional int64 result_limit = 3;
  if (this->result_limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->result_limit(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:vqro.rpc.LabelsQuery)
  return target;
}

int LabelsQuery::ByteSize() const {
  int total_size = 0;

  // optional string regex = 1;
  if (this->regex().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->regex());
  }

  // optional int64 result_offset = 2;
  if (this->result_offset() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->result_offset());
  }

  // optional int64 result_limit = 3;
  if (this->result_limit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->result_limit());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LabelsQuery::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LabelsQuery* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LabelsQuery>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LabelsQuery::MergeFrom(const LabelsQuery& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.regex().size() > 0) {
    set_regex(from.regex());
  }
  if (from.result_offset() != 0) {
    set_result_offset(from.result_offset());
  }
  if (from.result_limit() != 0) {
    set_result_limit(from.result_limit());
  }
}

void LabelsQuery::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LabelsQuery::CopyFrom(const LabelsQuery& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LabelsQuery::IsInitialized() const {

  return true;
}

void LabelsQuery::Swap(LabelsQuery* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    LabelsQuery temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void LabelsQuery::UnsafeArenaSwap(LabelsQuery* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void LabelsQuery::InternalSwap(LabelsQuery* other) {
  regex_.Swap(&other->regex_);
  std::swap(result_offset_, other->result_offset_);
  std::swap(result_limit_, other->result_limit_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LabelsQuery::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LabelsQuery_descriptor_;
  metadata.reflection = LabelsQuery_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LabelsQuery

// optional string regex = 1;
void LabelsQuery::clear_regex() {
  regex_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& LabelsQuery::regex() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.LabelsQuery.regex)
  return regex_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LabelsQuery::set_regex(const ::std::string& value) {
  
  regex_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:vqro.rpc.LabelsQuery.regex)
}
 void LabelsQuery::set_regex(const char* value) {
  
  regex_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:vqro.rpc.LabelsQuery.regex)
}
 void LabelsQuery::set_regex(const char* value,
    size_t size) {
  
  regex_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:vqro.rpc.LabelsQuery.regex)
}
 ::std::string* LabelsQuery::mutable_regex() {
  
  // @@protoc_insertion_point(field_mutable:vqro.rpc.LabelsQuery.regex)
  return regex_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* LabelsQuery::release_regex() {
  
  return regex_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* LabelsQuery::unsafe_arena_release_regex() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return regex_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void LabelsQuery::set_allocated_regex(::std::string* regex) {
  if (regex != NULL) {
    
  } else {
    
  }
  regex_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), regex,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:vqro.rpc.LabelsQuery.regex)
}
 void LabelsQuery::unsafe_arena_set_allocated_regex(
    ::std::string* regex) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (regex != NULL) {
    
  } else {
    
  }
  regex_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      regex, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:vqro.rpc.LabelsQuery.regex)
}

// optional int64 result_offset = 2;
void LabelsQuery::clear_result_offset() {
  result_offset_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 LabelsQuery::result_offset() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.LabelsQuery.result_offset)
  return result_offset_;
}
 void LabelsQuery::set_result_offset(::google::protobuf::int64 value) {
  
  result_offset_ = value;
  // @@protoc_insertion_point(field_set:vqro.rpc.LabelsQuery.result_offset)
}

// optional int64 result_limit = 3;
void LabelsQuery::clear_result_limit() {
  result_limit_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 LabelsQuery::result_limit() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.LabelsQuery.result_limit)
  return result_limit_;
}
 void LabelsQuery::set_result_limit(::google::protobuf::int64 value) {
  
  result_limit_ = value;
  // @@protoc_insertion_point(field_set:vqro.rpc.LabelsQuery.result_limit)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void SearchLabelsResults::_slow_mutable_status() {
  status_ = ::google::protobuf::Arena::CreateMessage< ::vqro::rpc::StatusMessage >(
      GetArenaNoVirtual());
}
::vqro::rpc::StatusMessage* SearchLabelsResults::_slow_release_status() {
  if (status_ == NULL) {
    return NULL;
  } else {
    ::vqro::rpc::StatusMessage* temp = new ::vqro::rpc::StatusMessage;
    temp->MergeFrom(*status_);
    status_ = NULL;
    return temp;
  }
}
::vqro::rpc::StatusMessage* SearchLabelsResults::unsafe_arena_release_status() {
  
  ::vqro::rpc::StatusMessage* temp = status_;
  status_ = NULL;
  return temp;
}
void SearchLabelsResults::_slow_set_allocated_status(
    ::google::protobuf::Arena* message_arena, ::vqro::rpc::StatusMessage** status) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*status) == NULL) {
      message_arena->Own(*status);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*status)) {
      ::vqro::rpc::StatusMessage* new_status = 
            ::google::protobuf::Arena::CreateMessage< ::vqro::rpc::StatusMessage >(
            message_arena);
      new_status->CopyFrom(**status);
      *status = new_status;
    }
}
void SearchLabelsResults::unsafe_arena_set_allocated_status(
    ::vqro::rpc::StatusMessage* status) {
  if (GetArenaNoVirtual() == NULL) {
    delete status_;
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vqro.rpc.SearchLabelsResults.status)
}
#ifndef _MSC_VER
const int SearchLabelsResults::kLabelsFieldNumber;
const int SearchLabelsResults::kStatusFieldNumber;
#endif  // !_MSC_VER

SearchLabelsResults::SearchLabelsResults()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vqro.rpc.SearchLabelsResults)
}

SearchLabelsResults::SearchLabelsResults(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  labels_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vqro.rpc.SearchLabelsResults)
}

void SearchLabelsResults::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  status_ = const_cast< ::vqro::rpc::StatusMessage*>(&::vqro::rpc::StatusMessage::default_instance());
}

SearchLabelsResults::SearchLabelsResults(const SearchLabelsResults& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vqro.rpc.SearchLabelsResults)
}

void SearchLabelsResults::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  status_ = NULL;
}

SearchLabelsResults::~SearchLabelsResults() {
  // @@protoc_insertion_point(destructor:vqro.rpc.SearchLabelsResults)
  SharedDtor();
}

void SearchLabelsResults::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  if (this != default_instance_) {
    delete status_;
  }
}

void SearchLabelsResults::ArenaDtor(void* object) {
  SearchLabelsResults* _this = reinterpret_cast< SearchLabelsResults* >(object);
  (void)_this;
}
void SearchLabelsResults::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SearchLabelsResults::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchLabelsResults::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SearchLabelsResults_descriptor_;
}

const SearchLabelsResults& SearchLabelsResults::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_search_2eproto();
  return *default_instance_;
}

SearchLabelsResults* SearchLabelsResults::default_instance_ = NULL;

SearchLabelsResults* SearchLabelsResults::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<SearchLabelsResults>(arena);
}

void SearchLabelsResults::Clear() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
  labels_.Clear();
}

bool SearchLabelsResults::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vqro.rpc.SearchLabelsResults)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string labels = 1;
      case 1: {
        if (tag == 10) {
         parse_labels:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_labels()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->labels(this->labels_size() - 1).data(),
            this->labels(this->labels_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vqro.rpc.SearchLabelsResults.labels"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_labels;
        if (input->ExpectTag(18)) goto parse_status;
        break;
      }

      // optional .vqro.rpc.StatusMessage status = 2;
      case 2: {
        if (tag == 18) {
         parse_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vqro.rpc.SearchLabelsResults)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vqro.rpc.SearchLabelsResults)
  return false;
#undef DO_
}

void SearchLabelsResults::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vqro.rpc.SearchLabelsResults)
  // repeated string labels = 1;
  for (int i = 0; i < this->labels_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->labels(i).data(), this->labels(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vqro.rpc.SearchLabelsResults.labels");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->labels(i), output);
  }

  // optional .vqro.rpc.StatusMessage status = 2;
  if (this->has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->status_, output);
  }

  // @@protoc_insertion_point(serialize_end:vqro.rpc.SearchLabelsResults)
}

::google::protobuf::uint8* SearchLabelsResults::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vqro.rpc.SearchLabelsResults)
  // repeated string labels = 1;
  for (int i = 0; i < this->labels_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->labels(i).data(), this->labels(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vqro.rpc.SearchLabelsResults.labels");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->labels(i), target);
  }

  // optional .vqro.rpc.StatusMessage status = 2;
  if (this->has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->status_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:vqro.rpc.SearchLabelsResults)
  return target;
}

int SearchLabelsResults::ByteSize() const {
  int total_size = 0;

  // optional .vqro.rpc.StatusMessage status = 2;
  if (this->has_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->status_);
  }

  // repeated string labels = 1;
  total_size += 1 * this->labels_size();
  for (int i = 0; i < this->labels_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->labels(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchLabelsResults::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SearchLabelsResults* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SearchLabelsResults>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SearchLabelsResults::MergeFrom(const SearchLabelsResults& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  labels_.MergeFrom(from.labels_);
  if (from.has_status()) {
    mutable_status()->::vqro::rpc::StatusMessage::MergeFrom(from.status());
  }
}

void SearchLabelsResults::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchLabelsResults::CopyFrom(const SearchLabelsResults& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchLabelsResults::IsInitialized() const {

  return true;
}

void SearchLabelsResults::Swap(SearchLabelsResults* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SearchLabelsResults temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void SearchLabelsResults::UnsafeArenaSwap(SearchLabelsResults* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SearchLabelsResults::InternalSwap(SearchLabelsResults* other) {
  labels_.UnsafeArenaSwap(&other->labels_);
  std::swap(status_, other->status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SearchLabelsResults::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SearchLabelsResults_descriptor_;
  metadata.reflection = SearchLabelsResults_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SearchLabelsResults

// repeated string labels = 1;
int SearchLabelsResults::labels_size() const {
  return labels_.size();
}
void SearchLabelsResults::clear_labels() {
  labels_.Clear();
}
 const ::std::string& SearchLabelsResults::labels(int index) const {
  // @@protoc_insertion_point(field_get:vqro.rpc.SearchLabelsResults.labels)
  return labels_.Get(index);
}
 ::std::string* SearchLabelsResults::mutable_labels(int index) {
  // @@protoc_insertion_point(field_mutable:vqro.rpc.SearchLabelsResults.labels)
  return labels_.Mutable(index);
}
 void SearchLabelsResults::set_labels(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:vqro.rpc.SearchLabelsResults.labels)
  labels_.Mutable(index)->assign(value);
}
 void SearchLabelsResults::set_labels(int index, const char* value) {
  labels_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:vqro.rpc.SearchLabelsResults.labels)
}
 void SearchLabelsResults::set_labels(int index, const char* value, size_t size) {
  labels_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:vqro.rpc.SearchLabelsResults.labels)
}
 ::std::string* SearchLabelsResults::add_labels() {
  return labels_.Add();
}
 void SearchLabelsResults::add_labels(const ::std::string& value) {
  labels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:vqro.rpc.SearchLabelsResults.labels)
}
 void SearchLabelsResults::add_labels(const char* value) {
  labels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:vqro.rpc.SearchLabelsResults.labels)
}
 void SearchLabelsResults::add_labels(const char* value, size_t size) {
  labels_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:vqro.rpc.SearchLabelsResults.labels)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
SearchLabelsResults::labels() const {
  // @@protoc_insertion_point(field_list:vqro.rpc.SearchLabelsResults.labels)
  return labels_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
SearchLabelsResults::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_list:vqro.rpc.SearchLabelsResults.labels)
  return &labels_;
}

// optional .vqro.rpc.StatusMessage status = 2;
bool SearchLabelsResults::has_status() const {
  return !_is_default_instance_ && status_ != NULL;
}
void SearchLabelsResults::clear_status() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
}
const ::vqro::rpc::StatusMessage& SearchLabelsResults::status() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.SearchLabelsResults.status)
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
::vqro::rpc::StatusMessage* SearchLabelsResults::mutable_status() {
  
  if (status_ == NULL) {
    _slow_mutable_status();
  }
  // @@protoc_insertion_point(field_mutable:vqro.rpc.SearchLabelsResults.status)
  return status_;
}
::vqro::rpc::StatusMessage* SearchLabelsResults::release_status() {
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_status();
  } else {
    ::vqro::rpc::StatusMessage* temp = status_;
    status_ = NULL;
    return temp;
  }
}
 void SearchLabelsResults::set_allocated_status(::vqro::rpc::StatusMessage* status) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete status_;
  }
  if (status != NULL) {
    _slow_set_allocated_status(message_arena, &status);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:vqro.rpc.SearchLabelsResults.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace rpc
}  // namespace vqro

// @@protoc_insertion_point(global_scope)
