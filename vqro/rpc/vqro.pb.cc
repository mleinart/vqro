// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vqro.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "vqro.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace vqro {
namespace rpc {

namespace {

const ::google::protobuf::Descriptor* Series_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Series_reflection_ = NULL;
const ::google::protobuf::Descriptor* Series_LabelsEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Datapoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Datapoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* StatusMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StatusMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* WriteOperation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WriteOperation_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReadOperation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReadOperation_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReadResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReadResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* SeriesQuery_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SeriesQuery_reflection_ = NULL;
const ::google::protobuf::Descriptor* LabelConstraint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LabelConstraint_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* LabelConstraint_Operator_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SearchSeriesResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SearchSeriesResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* LabelsQuery_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LabelsQuery_reflection_ = NULL;
const ::google::protobuf::Descriptor* SearchLabelsResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SearchLabelsResult_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_vqro_2eproto() {
  protobuf_AddDesc_vqro_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "vqro.proto");
  GOOGLE_CHECK(file != NULL);
  Series_descriptor_ = file->message_type(0);
  static const int Series_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Series, labels_),
  };
  Series_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Series_descriptor_,
      Series::default_instance_,
      Series_offsets_,
      -1,
      -1,
      -1,
      sizeof(Series),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Series, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Series, _is_default_instance_));
  Series_LabelsEntry_descriptor_ = Series_descriptor_->nested_type(0);
  Datapoint_descriptor_ = file->message_type(1);
  static const int Datapoint_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Datapoint, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Datapoint, duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Datapoint, value_),
  };
  Datapoint_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Datapoint_descriptor_,
      Datapoint::default_instance_,
      Datapoint_offsets_,
      -1,
      -1,
      -1,
      sizeof(Datapoint),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Datapoint, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Datapoint, _is_default_instance_));
  StatusMessage_descriptor_ = file->message_type(2);
  static const int StatusMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusMessage, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusMessage, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusMessage, go_away_),
  };
  StatusMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StatusMessage_descriptor_,
      StatusMessage::default_instance_,
      StatusMessage_offsets_,
      -1,
      -1,
      -1,
      sizeof(StatusMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusMessage, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusMessage, _is_default_instance_));
  WriteOperation_descriptor_ = file->message_type(3);
  static const int WriteOperation_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteOperation, series_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteOperation, datapoints_),
  };
  WriteOperation_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      WriteOperation_descriptor_,
      WriteOperation::default_instance_,
      WriteOperation_offsets_,
      -1,
      -1,
      -1,
      sizeof(WriteOperation),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteOperation, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteOperation, _is_default_instance_));
  ReadOperation_descriptor_ = file->message_type(4);
  static const int ReadOperation_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadOperation, query_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadOperation, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadOperation, end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadOperation, datapoint_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadOperation, prefer_latest_),
  };
  ReadOperation_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReadOperation_descriptor_,
      ReadOperation::default_instance_,
      ReadOperation_offsets_,
      -1,
      -1,
      -1,
      sizeof(ReadOperation),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadOperation, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadOperation, _is_default_instance_));
  ReadResult_descriptor_ = file->message_type(5);
  static const int ReadResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadResult, series_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadResult, datapoints_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadResult, status_),
  };
  ReadResult_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReadResult_descriptor_,
      ReadResult::default_instance_,
      ReadResult_offsets_,
      -1,
      -1,
      -1,
      sizeof(ReadResult),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadResult, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadResult, _is_default_instance_));
  SeriesQuery_descriptor_ = file->message_type(6);
  static const int SeriesQuery_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeriesQuery, constraints_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeriesQuery, result_offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeriesQuery, result_limit_),
  };
  SeriesQuery_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SeriesQuery_descriptor_,
      SeriesQuery::default_instance_,
      SeriesQuery_offsets_,
      -1,
      -1,
      -1,
      sizeof(SeriesQuery),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeriesQuery, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeriesQuery, _is_default_instance_));
  LabelConstraint_descriptor_ = file->message_type(7);
  static const int LabelConstraint_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelConstraint, label_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelConstraint, constraint_op_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelConstraint, operand_),
  };
  LabelConstraint_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LabelConstraint_descriptor_,
      LabelConstraint::default_instance_,
      LabelConstraint_offsets_,
      -1,
      -1,
      -1,
      sizeof(LabelConstraint),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelConstraint, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelConstraint, _is_default_instance_));
  LabelConstraint_Operator_descriptor_ = LabelConstraint_descriptor_->enum_type(0);
  SearchSeriesResult_descriptor_ = file->message_type(8);
  static const int SearchSeriesResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchSeriesResult, matching_series_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchSeriesResult, status_),
  };
  SearchSeriesResult_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SearchSeriesResult_descriptor_,
      SearchSeriesResult::default_instance_,
      SearchSeriesResult_offsets_,
      -1,
      -1,
      -1,
      sizeof(SearchSeriesResult),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchSeriesResult, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchSeriesResult, _is_default_instance_));
  LabelsQuery_descriptor_ = file->message_type(9);
  static const int LabelsQuery_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelsQuery, regex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelsQuery, result_offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelsQuery, result_limit_),
  };
  LabelsQuery_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LabelsQuery_descriptor_,
      LabelsQuery::default_instance_,
      LabelsQuery_offsets_,
      -1,
      -1,
      -1,
      sizeof(LabelsQuery),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelsQuery, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelsQuery, _is_default_instance_));
  SearchLabelsResult_descriptor_ = file->message_type(10);
  static const int SearchLabelsResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchLabelsResult, labels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchLabelsResult, status_),
  };
  SearchLabelsResult_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SearchLabelsResult_descriptor_,
      SearchLabelsResult::default_instance_,
      SearchLabelsResult_offsets_,
      -1,
      -1,
      -1,
      sizeof(SearchLabelsResult),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchLabelsResult, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchLabelsResult, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_vqro_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Series_descriptor_, &Series::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        Series_LabelsEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::std::string,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            0>::CreateDefaultInstance(
                Series_LabelsEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Datapoint_descriptor_, &Datapoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StatusMessage_descriptor_, &StatusMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      WriteOperation_descriptor_, &WriteOperation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReadOperation_descriptor_, &ReadOperation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReadResult_descriptor_, &ReadResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SeriesQuery_descriptor_, &SeriesQuery::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LabelConstraint_descriptor_, &LabelConstraint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SearchSeriesResult_descriptor_, &SearchSeriesResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LabelsQuery_descriptor_, &LabelsQuery::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SearchLabelsResult_descriptor_, &SearchLabelsResult::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_vqro_2eproto() {
  delete Series::default_instance_;
  delete Series_reflection_;
  delete Datapoint::default_instance_;
  delete Datapoint_reflection_;
  delete StatusMessage::default_instance_;
  delete StatusMessage_reflection_;
  delete WriteOperation::default_instance_;
  delete WriteOperation_reflection_;
  delete ReadOperation::default_instance_;
  delete ReadOperation_reflection_;
  delete ReadResult::default_instance_;
  delete ReadResult_reflection_;
  delete SeriesQuery::default_instance_;
  delete SeriesQuery_reflection_;
  delete LabelConstraint::default_instance_;
  delete LabelConstraint_reflection_;
  delete SearchSeriesResult::default_instance_;
  delete SearchSeriesResult_reflection_;
  delete LabelsQuery::default_instance_;
  delete LabelsQuery_reflection_;
  delete SearchLabelsResult::default_instance_;
  delete SearchLabelsResult_reflection_;
}

void protobuf_AddDesc_vqro_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nvqro.proto\022\010vqro.rpc\"e\n\006Series\022,\n\006labe"
    "ls\030\001 \003(\0132\034.vqro.rpc.Series.LabelsEntry\032-"
    "\n\013LabelsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001("
    "\t:\0028\001\"\?\n\tDatapoint\022\021\n\ttimestamp\030\001 \001(\003\022\020\n"
    "\010duration\030\002 \001(\003\022\r\n\005value\030\003 \001(\001\"=\n\rStatus"
    "Message\022\014\n\004text\030\001 \001(\t\022\r\n\005error\030\002 \001(\010\022\017\n\007"
    "go_away\030\003 \001(\010\"[\n\016WriteOperation\022 \n\006serie"
    "s\030\001 \001(\0132\020.vqro.rpc.Series\022\'\n\ndatapoints\030"
    "\002 \003(\0132\023.vqro.rpc.Datapoint\"\213\001\n\rReadOpera"
    "tion\022$\n\005query\030\001 \001(\0132\025.vqro.rpc.SeriesQue"
    "ry\022\022\n\nstart_time\030\002 \001(\003\022\020\n\010end_time\030\003 \001(\003"
    "\022\027\n\017datapoint_limit\030\004 \001(\003\022\025\n\rprefer_late"
    "st\030\005 \001(\010\"\200\001\n\nReadResult\022 \n\006series\030\001 \001(\0132"
    "\020.vqro.rpc.Series\022\'\n\ndatapoints\030\002 \003(\0132\023."
    "vqro.rpc.Datapoint\022\'\n\006status\030\003 \001(\0132\027.vqr"
    "o.rpc.StatusMessage\"j\n\013SeriesQuery\022.\n\013co"
    "nstraints\030\001 \003(\0132\031.vqro.rpc.LabelConstrai"
    "nt\022\025\n\rresult_offset\030\002 \001(\005\022\024\n\014result_limi"
    "t\030\003 \001(\005\"\234\001\n\017LabelConstraint\022\022\n\nlabel_nam"
    "e\030\001 \001(\t\0229\n\rconstraint_op\030\002 \001(\0162\".vqro.rp"
    "c.LabelConstraint.Operator\022\017\n\007operand\030\003 "
    "\001(\t\")\n\010Operator\022\n\n\006EQUALS\020\000\022\021\n\rREGEX_MAT"
    "CHES\020\001\"h\n\022SearchSeriesResult\022)\n\017matching"
    "_series\030\001 \003(\0132\020.vqro.rpc.Series\022\'\n\006statu"
    "s\030\002 \001(\0132\027.vqro.rpc.StatusMessage\"I\n\013Labe"
    "lsQuery\022\r\n\005regex\030\001 \001(\t\022\025\n\rresult_offset\030"
    "\002 \001(\005\022\024\n\014result_limit\030\003 \001(\005\"M\n\022SearchLab"
    "elsResult\022\016\n\006labels\030\001 \003(\t\022\'\n\006status\030\002 \001("
    "\0132\027.vqro.rpc.StatusMessage2\263\002\n\016VaqueroSt"
    "orage\022J\n\017WriteDatapoints\022\030.vqro.rpc.Writ"
    "eOperation\032\027.vqro.rpc.StatusMessage\"\000(\0010"
    "\001\022C\n\016ReadDatapoints\022\027.vqro.rpc.ReadOpera"
    "tion\032\024.vqro.rpc.ReadResult\"\0000\001\022G\n\014Search"
    "Series\022\025.vqro.rpc.SeriesQuery\032\034.vqro.rpc"
    ".SearchSeriesResult\"\0000\001\022G\n\014SearchLabels\022"
    "\025.vqro.rpc.LabelsQuery\032\034.vqro.rpc.Search"
    "LabelsResult\"\0000\001B\003\370\001\001b\006proto3", 1469);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "vqro.proto", &protobuf_RegisterTypes);
  Series::default_instance_ = new Series();
  Datapoint::default_instance_ = new Datapoint();
  StatusMessage::default_instance_ = new StatusMessage();
  WriteOperation::default_instance_ = new WriteOperation();
  ReadOperation::default_instance_ = new ReadOperation();
  ReadResult::default_instance_ = new ReadResult();
  SeriesQuery::default_instance_ = new SeriesQuery();
  LabelConstraint::default_instance_ = new LabelConstraint();
  SearchSeriesResult::default_instance_ = new SearchSeriesResult();
  LabelsQuery::default_instance_ = new LabelsQuery();
  SearchLabelsResult::default_instance_ = new SearchLabelsResult();
  Series::default_instance_->InitAsDefaultInstance();
  Datapoint::default_instance_->InitAsDefaultInstance();
  StatusMessage::default_instance_->InitAsDefaultInstance();
  WriteOperation::default_instance_->InitAsDefaultInstance();
  ReadOperation::default_instance_->InitAsDefaultInstance();
  ReadResult::default_instance_->InitAsDefaultInstance();
  SeriesQuery::default_instance_->InitAsDefaultInstance();
  LabelConstraint::default_instance_->InitAsDefaultInstance();
  SearchSeriesResult::default_instance_->InitAsDefaultInstance();
  LabelsQuery::default_instance_->InitAsDefaultInstance();
  SearchLabelsResult::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_vqro_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_vqro_2eproto {
  StaticDescriptorInitializer_vqro_2eproto() {
    protobuf_AddDesc_vqro_2eproto();
  }
} static_descriptor_initializer_vqro_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int Series::kLabelsFieldNumber;
#endif  // !_MSC_VER

Series::Series()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vqro.rpc.Series)
}

Series::Series(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  labels_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vqro.rpc.Series)
}

void Series::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Series::Series(const Series& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vqro.rpc.Series)
}

void Series::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  labels_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  labels_.SetEntryDescriptor(
      &::vqro::rpc::Series_LabelsEntry_descriptor_);
}

Series::~Series() {
  // @@protoc_insertion_point(destructor:vqro.rpc.Series)
  SharedDtor();
}

void Series::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  if (this != default_instance_) {
  }
}

void Series::ArenaDtor(void* object) {
  Series* _this = reinterpret_cast< Series* >(object);
  (void)_this;
}
void Series::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Series::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Series::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Series_descriptor_;
}

const Series& Series::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vqro_2eproto();
  return *default_instance_;
}

Series* Series::default_instance_ = NULL;

Series* Series::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<Series>(arena);
}

void Series::Clear() {
  labels_.Clear();
}

bool Series::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vqro.rpc.Series)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, string> labels = 1;
      case 1: {
        if (tag == 10) {
         parse_labels:
          ::google::protobuf::scoped_ptr<Series_LabelsEntry> entry(labels_.NewEntry());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, entry.get()));
          (*mutable_labels())[entry->key()] = *entry->mutable_value();
          if (entry->GetArena() != NULL) entry.release();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_labels;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vqro.rpc.Series)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vqro.rpc.Series)
  return false;
#undef DO_
}

void Series::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vqro.rpc.Series)
  // map<string, string> labels = 1;
  {
    ::google::protobuf::scoped_ptr<Series_LabelsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = labels().begin(); it != labels().end(); ++it) {
      if (entry.get() != NULL && entry->GetArena() != NULL) {
        entry.release();
      }
      entry.reset(labels_.NewEntryWrapper(it->first, it->second));
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
          1, *entry, output);
    }
    if (entry.get() != NULL && entry->GetArena() != NULL) {
      entry.release();
    }
  }

  // @@protoc_insertion_point(serialize_end:vqro.rpc.Series)
}

::google::protobuf::uint8* Series::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vqro.rpc.Series)
  // map<string, string> labels = 1;
  {
    ::google::protobuf::scoped_ptr<Series_LabelsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = labels().begin(); it != labels().end(); ++it) {
      if (entry.get() != NULL && entry->GetArena() != NULL) {
        entry.release();
      }
      entry.reset(labels_.NewEntryWrapper(it->first, it->second));
      target = ::google::protobuf::internal::WireFormatLite::
          WriteMessageNoVirtualToArray(
              1, *entry, target);
    }
    if (entry.get() != NULL && entry->GetArena() != NULL) {
      entry.release();
    }
  }

  // @@protoc_insertion_point(serialize_to_array_end:vqro.rpc.Series)
  return target;
}

int Series::ByteSize() const {
  int total_size = 0;

  // map<string, string> labels = 1;
  total_size += 1 * this->labels_size();
  {
    ::google::protobuf::scoped_ptr<Series_LabelsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = labels().begin(); it != labels().end(); ++it) {
      if (entry.get() != NULL && entry->GetArena() != NULL) {
        entry.release();
      }
      entry.reset(labels_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
    if (entry.get() != NULL && entry->GetArena() != NULL) {
      entry.release();
    }
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Series::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Series* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Series*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Series::MergeFrom(const Series& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  labels_.MergeFrom(from.labels_);
}

void Series::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Series::CopyFrom(const Series& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Series::IsInitialized() const {

  return true;
}

void Series::Swap(Series* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Series temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void Series::UnsafeArenaSwap(Series* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Series::InternalSwap(Series* other) {
  labels_.Swap(&other->labels_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Series::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Series_descriptor_;
  metadata.reflection = Series_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Series

// map<string, string> labels = 1;
 int Series::labels_size() const {
  return labels_.size();
}
 void Series::clear_labels() {
  labels_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::std::string >&
Series::labels() const {
  // @@protoc_insertion_point(field_map:vqro.rpc.Series.labels)
  return labels_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::std::string >*
Series::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_map:vqro.rpc.Series.labels)
  return labels_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Datapoint::kTimestampFieldNumber;
const int Datapoint::kDurationFieldNumber;
const int Datapoint::kValueFieldNumber;
#endif  // !_MSC_VER

Datapoint::Datapoint()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vqro.rpc.Datapoint)
}

Datapoint::Datapoint(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vqro.rpc.Datapoint)
}

void Datapoint::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Datapoint::Datapoint(const Datapoint& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vqro.rpc.Datapoint)
}

void Datapoint::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  timestamp_ = GOOGLE_LONGLONG(0);
  duration_ = GOOGLE_LONGLONG(0);
  value_ = 0;
}

Datapoint::~Datapoint() {
  // @@protoc_insertion_point(destructor:vqro.rpc.Datapoint)
  SharedDtor();
}

void Datapoint::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  if (this != default_instance_) {
  }
}

void Datapoint::ArenaDtor(void* object) {
  Datapoint* _this = reinterpret_cast< Datapoint* >(object);
  (void)_this;
}
void Datapoint::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Datapoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Datapoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Datapoint_descriptor_;
}

const Datapoint& Datapoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vqro_2eproto();
  return *default_instance_;
}

Datapoint* Datapoint::default_instance_ = NULL;

Datapoint* Datapoint::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<Datapoint>(arena);
}

void Datapoint::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Datapoint*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(timestamp_, value_);

#undef ZR_HELPER_
#undef ZR_

}

bool Datapoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vqro.rpc.Datapoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_duration;
        break;
      }

      // optional int64 duration = 2;
      case 2: {
        if (tag == 16) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &duration_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_value;
        break;
      }

      // optional double value = 3;
      case 3: {
        if (tag == 25) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vqro.rpc.Datapoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vqro.rpc.Datapoint)
  return false;
#undef DO_
}

void Datapoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vqro.rpc.Datapoint)
  // optional int64 timestamp = 1;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }

  // optional int64 duration = 2;
  if (this->duration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->duration(), output);
  }

  // optional double value = 3;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->value(), output);
  }

  // @@protoc_insertion_point(serialize_end:vqro.rpc.Datapoint)
}

::google::protobuf::uint8* Datapoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vqro.rpc.Datapoint)
  // optional int64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp(), target);
  }

  // optional int64 duration = 2;
  if (this->duration() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->duration(), target);
  }

  // optional double value = 3;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:vqro.rpc.Datapoint)
  return target;
}

int Datapoint::ByteSize() const {
  int total_size = 0;

  // optional int64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // optional int64 duration = 2;
  if (this->duration() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->duration());
  }

  // optional double value = 3;
  if (this->value() != 0) {
    total_size += 1 + 8;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Datapoint::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Datapoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Datapoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Datapoint::MergeFrom(const Datapoint& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.duration() != 0) {
    set_duration(from.duration());
  }
  if (from.value() != 0) {
    set_value(from.value());
  }
}

void Datapoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Datapoint::CopyFrom(const Datapoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Datapoint::IsInitialized() const {

  return true;
}

void Datapoint::Swap(Datapoint* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Datapoint temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void Datapoint::UnsafeArenaSwap(Datapoint* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Datapoint::InternalSwap(Datapoint* other) {
  std::swap(timestamp_, other->timestamp_);
  std::swap(duration_, other->duration_);
  std::swap(value_, other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Datapoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Datapoint_descriptor_;
  metadata.reflection = Datapoint_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Datapoint

// optional int64 timestamp = 1;
 void Datapoint::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Datapoint::timestamp() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.Datapoint.timestamp)
  return timestamp_;
}
 void Datapoint::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:vqro.rpc.Datapoint.timestamp)
}

// optional int64 duration = 2;
 void Datapoint::clear_duration() {
  duration_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Datapoint::duration() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.Datapoint.duration)
  return duration_;
}
 void Datapoint::set_duration(::google::protobuf::int64 value) {
  
  duration_ = value;
  // @@protoc_insertion_point(field_set:vqro.rpc.Datapoint.duration)
}

// optional double value = 3;
 void Datapoint::clear_value() {
  value_ = 0;
}
 double Datapoint::value() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.Datapoint.value)
  return value_;
}
 void Datapoint::set_value(double value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:vqro.rpc.Datapoint.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int StatusMessage::kTextFieldNumber;
const int StatusMessage::kErrorFieldNumber;
const int StatusMessage::kGoAwayFieldNumber;
#endif  // !_MSC_VER

StatusMessage::StatusMessage()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vqro.rpc.StatusMessage)
}

StatusMessage::StatusMessage(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vqro.rpc.StatusMessage)
}

void StatusMessage::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

StatusMessage::StatusMessage(const StatusMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vqro.rpc.StatusMessage)
}

void StatusMessage::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_ = false;
  go_away_ = false;
}

StatusMessage::~StatusMessage() {
  // @@protoc_insertion_point(destructor:vqro.rpc.StatusMessage)
  SharedDtor();
}

void StatusMessage::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  text_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (this != default_instance_) {
  }
}

void StatusMessage::ArenaDtor(void* object) {
  StatusMessage* _this = reinterpret_cast< StatusMessage* >(object);
  (void)_this;
}
void StatusMessage::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void StatusMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StatusMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatusMessage_descriptor_;
}

const StatusMessage& StatusMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vqro_2eproto();
  return *default_instance_;
}

StatusMessage* StatusMessage::default_instance_ = NULL;

StatusMessage* StatusMessage::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<StatusMessage>(arena);
}

void StatusMessage::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<StatusMessage*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(error_, go_away_);
  text_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());

#undef ZR_HELPER_
#undef ZR_

}

bool StatusMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vqro.rpc.StatusMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string text = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "vqro.rpc.StatusMessage.text");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_error;
        break;
      }

      // optional bool error = 2;
      case 2: {
        if (tag == 16) {
         parse_error:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &error_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_go_away;
        break;
      }

      // optional bool go_away = 3;
      case 3: {
        if (tag == 24) {
         parse_go_away:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &go_away_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vqro.rpc.StatusMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vqro.rpc.StatusMessage)
  return false;
#undef DO_
}

void StatusMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vqro.rpc.StatusMessage)
  // optional string text = 1;
  if (this->text().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vqro.rpc.StatusMessage.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->text(), output);
  }

  // optional bool error = 2;
  if (this->error() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->error(), output);
  }

  // optional bool go_away = 3;
  if (this->go_away() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->go_away(), output);
  }

  // @@protoc_insertion_point(serialize_end:vqro.rpc.StatusMessage)
}

::google::protobuf::uint8* StatusMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vqro.rpc.StatusMessage)
  // optional string text = 1;
  if (this->text().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vqro.rpc.StatusMessage.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->text(), target);
  }

  // optional bool error = 2;
  if (this->error() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->error(), target);
  }

  // optional bool go_away = 3;
  if (this->go_away() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->go_away(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:vqro.rpc.StatusMessage)
  return target;
}

int StatusMessage::ByteSize() const {
  int total_size = 0;

  // optional string text = 1;
  if (this->text().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->text());
  }

  // optional bool error = 2;
  if (this->error() != 0) {
    total_size += 1 + 1;
  }

  // optional bool go_away = 3;
  if (this->go_away() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatusMessage::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const StatusMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StatusMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StatusMessage::MergeFrom(const StatusMessage& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.text().size() > 0) {
    set_text(from.text());
  }
  if (from.error() != 0) {
    set_error(from.error());
  }
  if (from.go_away() != 0) {
    set_go_away(from.go_away());
  }
}

void StatusMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatusMessage::CopyFrom(const StatusMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusMessage::IsInitialized() const {

  return true;
}

void StatusMessage::Swap(StatusMessage* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    StatusMessage temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void StatusMessage::UnsafeArenaSwap(StatusMessage* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void StatusMessage::InternalSwap(StatusMessage* other) {
  text_.Swap(&other->text_);
  std::swap(error_, other->error_);
  std::swap(go_away_, other->go_away_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StatusMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StatusMessage_descriptor_;
  metadata.reflection = StatusMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StatusMessage

// optional string text = 1;
 void StatusMessage::clear_text() {
  text_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& StatusMessage::text() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.StatusMessage.text)
  return text_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StatusMessage::set_text(const ::std::string& value) {
  
  text_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:vqro.rpc.StatusMessage.text)
}
 void StatusMessage::set_text(const char* value) {
  
  text_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:vqro.rpc.StatusMessage.text)
}
 void StatusMessage::set_text(const char* value,
    size_t size) {
  
  text_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:vqro.rpc.StatusMessage.text)
}
 ::std::string* StatusMessage::mutable_text() {
  
  // @@protoc_insertion_point(field_mutable:vqro.rpc.StatusMessage.text)
  return text_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* StatusMessage::release_text() {
  
  return text_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* StatusMessage::unsafe_arena_release_text() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return text_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void StatusMessage::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    
  } else {
    
  }
  text_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:vqro.rpc.StatusMessage.text)
}
 void StatusMessage::unsafe_arena_set_allocated_text(
    ::std::string* text) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (text != NULL) {
    
  } else {
    
  }
  
  text_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      text, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:vqro.rpc.StatusMessage.text)
}

// optional bool error = 2;
 void StatusMessage::clear_error() {
  error_ = false;
}
 bool StatusMessage::error() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.StatusMessage.error)
  return error_;
}
 void StatusMessage::set_error(bool value) {
  
  error_ = value;
  // @@protoc_insertion_point(field_set:vqro.rpc.StatusMessage.error)
}

// optional bool go_away = 3;
 void StatusMessage::clear_go_away() {
  go_away_ = false;
}
 bool StatusMessage::go_away() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.StatusMessage.go_away)
  return go_away_;
}
 void StatusMessage::set_go_away(bool value) {
  
  go_away_ = value;
  // @@protoc_insertion_point(field_set:vqro.rpc.StatusMessage.go_away)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void WriteOperation::_slow_mutable_series() {
  series_ = ::google::protobuf::Arena::CreateMessage< ::vqro::rpc::Series >(
        GetArenaNoVirtual());
}
::vqro::rpc::Series* WriteOperation::_slow_release_series() {
  if (series_ == NULL) {
    return NULL;
  } else {
    ::vqro::rpc::Series* temp = new ::vqro::rpc::Series;
    temp->MergeFrom(*series_);
    series_ = NULL;
    return temp;
  }
}
::vqro::rpc::Series* WriteOperation::unsafe_arena_release_series() {
  
  ::vqro::rpc::Series* temp = series_;
  series_ = NULL;
  return temp;
}
void WriteOperation::_slow_set_allocated_series(
    ::google::protobuf::Arena* message_arena, ::vqro::rpc::Series** series) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*series) == NULL) {
      message_arena->Own(*series);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*series)) {
      ::vqro::rpc::Series* new_series = 
            ::google::protobuf::Arena::CreateMessage< ::vqro::rpc::Series >(
            message_arena);
      new_series->CopyFrom(**series);
      *series = new_series;
    }
}
void WriteOperation::unsafe_arena_set_allocated_series(
    ::vqro::rpc::Series* series) {
  if (GetArenaNoVirtual() == NULL) {
    delete series_;
  }
  series_ = series;
  if (series) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vqro.rpc.WriteOperation.series)
}
#ifndef _MSC_VER
const int WriteOperation::kSeriesFieldNumber;
const int WriteOperation::kDatapointsFieldNumber;
#endif  // !_MSC_VER

WriteOperation::WriteOperation()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vqro.rpc.WriteOperation)
}

WriteOperation::WriteOperation(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  datapoints_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vqro.rpc.WriteOperation)
}

void WriteOperation::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  series_ = const_cast< ::vqro::rpc::Series*>(&::vqro::rpc::Series::default_instance());
}

WriteOperation::WriteOperation(const WriteOperation& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vqro.rpc.WriteOperation)
}

void WriteOperation::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  series_ = NULL;
}

WriteOperation::~WriteOperation() {
  // @@protoc_insertion_point(destructor:vqro.rpc.WriteOperation)
  SharedDtor();
}

void WriteOperation::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  if (this != default_instance_) {
    delete series_;
  }
}

void WriteOperation::ArenaDtor(void* object) {
  WriteOperation* _this = reinterpret_cast< WriteOperation* >(object);
  (void)_this;
}
void WriteOperation::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void WriteOperation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WriteOperation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WriteOperation_descriptor_;
}

const WriteOperation& WriteOperation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vqro_2eproto();
  return *default_instance_;
}

WriteOperation* WriteOperation::default_instance_ = NULL;

WriteOperation* WriteOperation::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<WriteOperation>(arena);
}

void WriteOperation::Clear() {
  if (series_ != NULL) delete series_;
  series_ = NULL;
  datapoints_.Clear();
}

bool WriteOperation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vqro.rpc.WriteOperation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .vqro.rpc.Series series = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_series()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_datapoints;
        break;
      }

      // repeated .vqro.rpc.Datapoint datapoints = 2;
      case 2: {
        if (tag == 18) {
         parse_datapoints:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_datapoints()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_datapoints;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vqro.rpc.WriteOperation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vqro.rpc.WriteOperation)
  return false;
#undef DO_
}

void WriteOperation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vqro.rpc.WriteOperation)
  // optional .vqro.rpc.Series series = 1;
  if (this->has_series()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->series_, output);
  }

  // repeated .vqro.rpc.Datapoint datapoints = 2;
  for (unsigned int i = 0, n = this->datapoints_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->datapoints(i), output);
  }

  // @@protoc_insertion_point(serialize_end:vqro.rpc.WriteOperation)
}

::google::protobuf::uint8* WriteOperation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vqro.rpc.WriteOperation)
  // optional .vqro.rpc.Series series = 1;
  if (this->has_series()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->series_, target);
  }

  // repeated .vqro.rpc.Datapoint datapoints = 2;
  for (unsigned int i = 0, n = this->datapoints_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->datapoints(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:vqro.rpc.WriteOperation)
  return target;
}

int WriteOperation::ByteSize() const {
  int total_size = 0;

  // optional .vqro.rpc.Series series = 1;
  if (this->has_series()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->series_);
  }

  // repeated .vqro.rpc.Datapoint datapoints = 2;
  total_size += 1 * this->datapoints_size();
  for (int i = 0; i < this->datapoints_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->datapoints(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WriteOperation::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const WriteOperation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WriteOperation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WriteOperation::MergeFrom(const WriteOperation& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  datapoints_.MergeFrom(from.datapoints_);
  if (from.has_series()) {
    mutable_series()->::vqro::rpc::Series::MergeFrom(from.series());
  }
}

void WriteOperation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WriteOperation::CopyFrom(const WriteOperation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteOperation::IsInitialized() const {

  return true;
}

void WriteOperation::Swap(WriteOperation* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    WriteOperation temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void WriteOperation::UnsafeArenaSwap(WriteOperation* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void WriteOperation::InternalSwap(WriteOperation* other) {
  std::swap(series_, other->series_);
  datapoints_.UnsafeArenaSwap(&other->datapoints_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WriteOperation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WriteOperation_descriptor_;
  metadata.reflection = WriteOperation_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WriteOperation

// optional .vqro.rpc.Series series = 1;
 bool WriteOperation::has_series() const {
  return !_is_default_instance_ && series_ != NULL;
}
 void WriteOperation::clear_series() {
  if (series_ != NULL) delete series_;
  series_ = NULL;
}
 const ::vqro::rpc::Series& WriteOperation::series() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.WriteOperation.series)
  return series_ != NULL ? *series_ : *default_instance_->series_;
}
 ::vqro::rpc::Series* WriteOperation::mutable_series() {
  
  if (series_ == NULL) {
    _slow_mutable_series();  }
  // @@protoc_insertion_point(field_mutable:vqro.rpc.WriteOperation.series)
  return series_;
}
 ::vqro::rpc::Series* WriteOperation::release_series() {
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_series();
  } else {
    ::vqro::rpc::Series* temp = series_;
    series_ = NULL;
    return temp;
  }
}
 void WriteOperation::set_allocated_series(::vqro::rpc::Series* series) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete series_;
  }
  if (series != NULL) {
    _slow_set_allocated_series(message_arena, &series);
  }
  series_ = series;
  if (series) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:vqro.rpc.WriteOperation.series)
}

// repeated .vqro.rpc.Datapoint datapoints = 2;
 int WriteOperation::datapoints_size() const {
  return datapoints_.size();
}
 void WriteOperation::clear_datapoints() {
  datapoints_.Clear();
}
 const ::vqro::rpc::Datapoint& WriteOperation::datapoints(int index) const {
  // @@protoc_insertion_point(field_get:vqro.rpc.WriteOperation.datapoints)
  return datapoints_.Get(index);
}
 ::vqro::rpc::Datapoint* WriteOperation::mutable_datapoints(int index) {
  // @@protoc_insertion_point(field_mutable:vqro.rpc.WriteOperation.datapoints)
  return datapoints_.Mutable(index);
}
 ::vqro::rpc::Datapoint* WriteOperation::add_datapoints() {
  // @@protoc_insertion_point(field_add:vqro.rpc.WriteOperation.datapoints)
  return datapoints_.Add();
}
 const ::google::protobuf::RepeatedPtrField< ::vqro::rpc::Datapoint >&
WriteOperation::datapoints() const {
  // @@protoc_insertion_point(field_list:vqro.rpc.WriteOperation.datapoints)
  return datapoints_;
}
 ::google::protobuf::RepeatedPtrField< ::vqro::rpc::Datapoint >*
WriteOperation::mutable_datapoints() {
  // @@protoc_insertion_point(field_mutable_list:vqro.rpc.WriteOperation.datapoints)
  return &datapoints_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void ReadOperation::_slow_mutable_query() {
  query_ = ::google::protobuf::Arena::CreateMessage< ::vqro::rpc::SeriesQuery >(
        GetArenaNoVirtual());
}
::vqro::rpc::SeriesQuery* ReadOperation::_slow_release_query() {
  if (query_ == NULL) {
    return NULL;
  } else {
    ::vqro::rpc::SeriesQuery* temp = new ::vqro::rpc::SeriesQuery;
    temp->MergeFrom(*query_);
    query_ = NULL;
    return temp;
  }
}
::vqro::rpc::SeriesQuery* ReadOperation::unsafe_arena_release_query() {
  
  ::vqro::rpc::SeriesQuery* temp = query_;
  query_ = NULL;
  return temp;
}
void ReadOperation::_slow_set_allocated_query(
    ::google::protobuf::Arena* message_arena, ::vqro::rpc::SeriesQuery** query) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*query) == NULL) {
      message_arena->Own(*query);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*query)) {
      ::vqro::rpc::SeriesQuery* new_query = 
            ::google::protobuf::Arena::CreateMessage< ::vqro::rpc::SeriesQuery >(
            message_arena);
      new_query->CopyFrom(**query);
      *query = new_query;
    }
}
void ReadOperation::unsafe_arena_set_allocated_query(
    ::vqro::rpc::SeriesQuery* query) {
  if (GetArenaNoVirtual() == NULL) {
    delete query_;
  }
  query_ = query;
  if (query) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vqro.rpc.ReadOperation.query)
}
#ifndef _MSC_VER
const int ReadOperation::kQueryFieldNumber;
const int ReadOperation::kStartTimeFieldNumber;
const int ReadOperation::kEndTimeFieldNumber;
const int ReadOperation::kDatapointLimitFieldNumber;
const int ReadOperation::kPreferLatestFieldNumber;
#endif  // !_MSC_VER

ReadOperation::ReadOperation()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vqro.rpc.ReadOperation)
}

ReadOperation::ReadOperation(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vqro.rpc.ReadOperation)
}

void ReadOperation::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  query_ = const_cast< ::vqro::rpc::SeriesQuery*>(&::vqro::rpc::SeriesQuery::default_instance());
}

ReadOperation::ReadOperation(const ReadOperation& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vqro.rpc.ReadOperation)
}

void ReadOperation::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  query_ = NULL;
  start_time_ = GOOGLE_LONGLONG(0);
  end_time_ = GOOGLE_LONGLONG(0);
  datapoint_limit_ = GOOGLE_LONGLONG(0);
  prefer_latest_ = false;
}

ReadOperation::~ReadOperation() {
  // @@protoc_insertion_point(destructor:vqro.rpc.ReadOperation)
  SharedDtor();
}

void ReadOperation::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  if (this != default_instance_) {
    delete query_;
  }
}

void ReadOperation::ArenaDtor(void* object) {
  ReadOperation* _this = reinterpret_cast< ReadOperation* >(object);
  (void)_this;
}
void ReadOperation::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ReadOperation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReadOperation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReadOperation_descriptor_;
}

const ReadOperation& ReadOperation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vqro_2eproto();
  return *default_instance_;
}

ReadOperation* ReadOperation::default_instance_ = NULL;

ReadOperation* ReadOperation::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ReadOperation>(arena);
}

void ReadOperation::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ReadOperation*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(start_time_, prefer_latest_);
  if (query_ != NULL) delete query_;
  query_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool ReadOperation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vqro.rpc.ReadOperation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .vqro.rpc.SeriesQuery query = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_query()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_start_time;
        break;
      }

      // optional int64 start_time = 2;
      case 2: {
        if (tag == 16) {
         parse_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_time_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_end_time;
        break;
      }

      // optional int64 end_time = 3;
      case 3: {
        if (tag == 24) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_time_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_datapoint_limit;
        break;
      }

      // optional int64 datapoint_limit = 4;
      case 4: {
        if (tag == 32) {
         parse_datapoint_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &datapoint_limit_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_prefer_latest;
        break;
      }

      // optional bool prefer_latest = 5;
      case 5: {
        if (tag == 40) {
         parse_prefer_latest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &prefer_latest_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vqro.rpc.ReadOperation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vqro.rpc.ReadOperation)
  return false;
#undef DO_
}

void ReadOperation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vqro.rpc.ReadOperation)
  // optional .vqro.rpc.SeriesQuery query = 1;
  if (this->has_query()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->query_, output);
  }

  // optional int64 start_time = 2;
  if (this->start_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->start_time(), output);
  }

  // optional int64 end_time = 3;
  if (this->end_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->end_time(), output);
  }

  // optional int64 datapoint_limit = 4;
  if (this->datapoint_limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->datapoint_limit(), output);
  }

  // optional bool prefer_latest = 5;
  if (this->prefer_latest() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->prefer_latest(), output);
  }

  // @@protoc_insertion_point(serialize_end:vqro.rpc.ReadOperation)
}

::google::protobuf::uint8* ReadOperation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vqro.rpc.ReadOperation)
  // optional .vqro.rpc.SeriesQuery query = 1;
  if (this->has_query()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->query_, target);
  }

  // optional int64 start_time = 2;
  if (this->start_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->start_time(), target);
  }

  // optional int64 end_time = 3;
  if (this->end_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->end_time(), target);
  }

  // optional int64 datapoint_limit = 4;
  if (this->datapoint_limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->datapoint_limit(), target);
  }

  // optional bool prefer_latest = 5;
  if (this->prefer_latest() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->prefer_latest(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:vqro.rpc.ReadOperation)
  return target;
}

int ReadOperation::ByteSize() const {
  int total_size = 0;

  // optional .vqro.rpc.SeriesQuery query = 1;
  if (this->has_query()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->query_);
  }

  // optional int64 start_time = 2;
  if (this->start_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->start_time());
  }

  // optional int64 end_time = 3;
  if (this->end_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->end_time());
  }

  // optional int64 datapoint_limit = 4;
  if (this->datapoint_limit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->datapoint_limit());
  }

  // optional bool prefer_latest = 5;
  if (this->prefer_latest() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReadOperation::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ReadOperation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReadOperation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReadOperation::MergeFrom(const ReadOperation& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_query()) {
    mutable_query()->::vqro::rpc::SeriesQuery::MergeFrom(from.query());
  }
  if (from.start_time() != 0) {
    set_start_time(from.start_time());
  }
  if (from.end_time() != 0) {
    set_end_time(from.end_time());
  }
  if (from.datapoint_limit() != 0) {
    set_datapoint_limit(from.datapoint_limit());
  }
  if (from.prefer_latest() != 0) {
    set_prefer_latest(from.prefer_latest());
  }
}

void ReadOperation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadOperation::CopyFrom(const ReadOperation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadOperation::IsInitialized() const {

  return true;
}

void ReadOperation::Swap(ReadOperation* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ReadOperation temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void ReadOperation::UnsafeArenaSwap(ReadOperation* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ReadOperation::InternalSwap(ReadOperation* other) {
  std::swap(query_, other->query_);
  std::swap(start_time_, other->start_time_);
  std::swap(end_time_, other->end_time_);
  std::swap(datapoint_limit_, other->datapoint_limit_);
  std::swap(prefer_latest_, other->prefer_latest_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReadOperation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReadOperation_descriptor_;
  metadata.reflection = ReadOperation_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReadOperation

// optional .vqro.rpc.SeriesQuery query = 1;
 bool ReadOperation::has_query() const {
  return !_is_default_instance_ && query_ != NULL;
}
 void ReadOperation::clear_query() {
  if (query_ != NULL) delete query_;
  query_ = NULL;
}
 const ::vqro::rpc::SeriesQuery& ReadOperation::query() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.ReadOperation.query)
  return query_ != NULL ? *query_ : *default_instance_->query_;
}
 ::vqro::rpc::SeriesQuery* ReadOperation::mutable_query() {
  
  if (query_ == NULL) {
    _slow_mutable_query();  }
  // @@protoc_insertion_point(field_mutable:vqro.rpc.ReadOperation.query)
  return query_;
}
 ::vqro::rpc::SeriesQuery* ReadOperation::release_query() {
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_query();
  } else {
    ::vqro::rpc::SeriesQuery* temp = query_;
    query_ = NULL;
    return temp;
  }
}
 void ReadOperation::set_allocated_query(::vqro::rpc::SeriesQuery* query) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete query_;
  }
  if (query != NULL) {
    _slow_set_allocated_query(message_arena, &query);
  }
  query_ = query;
  if (query) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:vqro.rpc.ReadOperation.query)
}

// optional int64 start_time = 2;
 void ReadOperation::clear_start_time() {
  start_time_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 ReadOperation::start_time() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.ReadOperation.start_time)
  return start_time_;
}
 void ReadOperation::set_start_time(::google::protobuf::int64 value) {
  
  start_time_ = value;
  // @@protoc_insertion_point(field_set:vqro.rpc.ReadOperation.start_time)
}

// optional int64 end_time = 3;
 void ReadOperation::clear_end_time() {
  end_time_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 ReadOperation::end_time() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.ReadOperation.end_time)
  return end_time_;
}
 void ReadOperation::set_end_time(::google::protobuf::int64 value) {
  
  end_time_ = value;
  // @@protoc_insertion_point(field_set:vqro.rpc.ReadOperation.end_time)
}

// optional int64 datapoint_limit = 4;
 void ReadOperation::clear_datapoint_limit() {
  datapoint_limit_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 ReadOperation::datapoint_limit() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.ReadOperation.datapoint_limit)
  return datapoint_limit_;
}
 void ReadOperation::set_datapoint_limit(::google::protobuf::int64 value) {
  
  datapoint_limit_ = value;
  // @@protoc_insertion_point(field_set:vqro.rpc.ReadOperation.datapoint_limit)
}

// optional bool prefer_latest = 5;
 void ReadOperation::clear_prefer_latest() {
  prefer_latest_ = false;
}
 bool ReadOperation::prefer_latest() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.ReadOperation.prefer_latest)
  return prefer_latest_;
}
 void ReadOperation::set_prefer_latest(bool value) {
  
  prefer_latest_ = value;
  // @@protoc_insertion_point(field_set:vqro.rpc.ReadOperation.prefer_latest)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void ReadResult::_slow_mutable_series() {
  series_ = ::google::protobuf::Arena::CreateMessage< ::vqro::rpc::Series >(
        GetArenaNoVirtual());
}
::vqro::rpc::Series* ReadResult::_slow_release_series() {
  if (series_ == NULL) {
    return NULL;
  } else {
    ::vqro::rpc::Series* temp = new ::vqro::rpc::Series;
    temp->MergeFrom(*series_);
    series_ = NULL;
    return temp;
  }
}
::vqro::rpc::Series* ReadResult::unsafe_arena_release_series() {
  
  ::vqro::rpc::Series* temp = series_;
  series_ = NULL;
  return temp;
}
void ReadResult::_slow_set_allocated_series(
    ::google::protobuf::Arena* message_arena, ::vqro::rpc::Series** series) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*series) == NULL) {
      message_arena->Own(*series);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*series)) {
      ::vqro::rpc::Series* new_series = 
            ::google::protobuf::Arena::CreateMessage< ::vqro::rpc::Series >(
            message_arena);
      new_series->CopyFrom(**series);
      *series = new_series;
    }
}
void ReadResult::unsafe_arena_set_allocated_series(
    ::vqro::rpc::Series* series) {
  if (GetArenaNoVirtual() == NULL) {
    delete series_;
  }
  series_ = series;
  if (series) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vqro.rpc.ReadResult.series)
}
void ReadResult::_slow_mutable_status() {
  status_ = ::google::protobuf::Arena::CreateMessage< ::vqro::rpc::StatusMessage >(
        GetArenaNoVirtual());
}
::vqro::rpc::StatusMessage* ReadResult::_slow_release_status() {
  if (status_ == NULL) {
    return NULL;
  } else {
    ::vqro::rpc::StatusMessage* temp = new ::vqro::rpc::StatusMessage;
    temp->MergeFrom(*status_);
    status_ = NULL;
    return temp;
  }
}
::vqro::rpc::StatusMessage* ReadResult::unsafe_arena_release_status() {
  
  ::vqro::rpc::StatusMessage* temp = status_;
  status_ = NULL;
  return temp;
}
void ReadResult::_slow_set_allocated_status(
    ::google::protobuf::Arena* message_arena, ::vqro::rpc::StatusMessage** status) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*status) == NULL) {
      message_arena->Own(*status);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*status)) {
      ::vqro::rpc::StatusMessage* new_status = 
            ::google::protobuf::Arena::CreateMessage< ::vqro::rpc::StatusMessage >(
            message_arena);
      new_status->CopyFrom(**status);
      *status = new_status;
    }
}
void ReadResult::unsafe_arena_set_allocated_status(
    ::vqro::rpc::StatusMessage* status) {
  if (GetArenaNoVirtual() == NULL) {
    delete status_;
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vqro.rpc.ReadResult.status)
}
#ifndef _MSC_VER
const int ReadResult::kSeriesFieldNumber;
const int ReadResult::kDatapointsFieldNumber;
const int ReadResult::kStatusFieldNumber;
#endif  // !_MSC_VER

ReadResult::ReadResult()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vqro.rpc.ReadResult)
}

ReadResult::ReadResult(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  datapoints_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vqro.rpc.ReadResult)
}

void ReadResult::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  series_ = const_cast< ::vqro::rpc::Series*>(&::vqro::rpc::Series::default_instance());
  status_ = const_cast< ::vqro::rpc::StatusMessage*>(&::vqro::rpc::StatusMessage::default_instance());
}

ReadResult::ReadResult(const ReadResult& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vqro.rpc.ReadResult)
}

void ReadResult::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  series_ = NULL;
  status_ = NULL;
}

ReadResult::~ReadResult() {
  // @@protoc_insertion_point(destructor:vqro.rpc.ReadResult)
  SharedDtor();
}

void ReadResult::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  if (this != default_instance_) {
    delete series_;
    delete status_;
  }
}

void ReadResult::ArenaDtor(void* object) {
  ReadResult* _this = reinterpret_cast< ReadResult* >(object);
  (void)_this;
}
void ReadResult::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ReadResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReadResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReadResult_descriptor_;
}

const ReadResult& ReadResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vqro_2eproto();
  return *default_instance_;
}

ReadResult* ReadResult::default_instance_ = NULL;

ReadResult* ReadResult::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ReadResult>(arena);
}

void ReadResult::Clear() {
  if (series_ != NULL) delete series_;
  series_ = NULL;
  if (status_ != NULL) delete status_;
  status_ = NULL;
  datapoints_.Clear();
}

bool ReadResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vqro.rpc.ReadResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .vqro.rpc.Series series = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_series()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_datapoints;
        break;
      }

      // repeated .vqro.rpc.Datapoint datapoints = 2;
      case 2: {
        if (tag == 18) {
         parse_datapoints:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_datapoints()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_datapoints;
        if (input->ExpectTag(26)) goto parse_status;
        break;
      }

      // optional .vqro.rpc.StatusMessage status = 3;
      case 3: {
        if (tag == 26) {
         parse_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vqro.rpc.ReadResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vqro.rpc.ReadResult)
  return false;
#undef DO_
}

void ReadResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vqro.rpc.ReadResult)
  // optional .vqro.rpc.Series series = 1;
  if (this->has_series()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->series_, output);
  }

  // repeated .vqro.rpc.Datapoint datapoints = 2;
  for (unsigned int i = 0, n = this->datapoints_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->datapoints(i), output);
  }

  // optional .vqro.rpc.StatusMessage status = 3;
  if (this->has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->status_, output);
  }

  // @@protoc_insertion_point(serialize_end:vqro.rpc.ReadResult)
}

::google::protobuf::uint8* ReadResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vqro.rpc.ReadResult)
  // optional .vqro.rpc.Series series = 1;
  if (this->has_series()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->series_, target);
  }

  // repeated .vqro.rpc.Datapoint datapoints = 2;
  for (unsigned int i = 0, n = this->datapoints_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->datapoints(i), target);
  }

  // optional .vqro.rpc.StatusMessage status = 3;
  if (this->has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->status_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:vqro.rpc.ReadResult)
  return target;
}

int ReadResult::ByteSize() const {
  int total_size = 0;

  // optional .vqro.rpc.Series series = 1;
  if (this->has_series()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->series_);
  }

  // optional .vqro.rpc.StatusMessage status = 3;
  if (this->has_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->status_);
  }

  // repeated .vqro.rpc.Datapoint datapoints = 2;
  total_size += 1 * this->datapoints_size();
  for (int i = 0; i < this->datapoints_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->datapoints(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReadResult::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ReadResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReadResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReadResult::MergeFrom(const ReadResult& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  datapoints_.MergeFrom(from.datapoints_);
  if (from.has_series()) {
    mutable_series()->::vqro::rpc::Series::MergeFrom(from.series());
  }
  if (from.has_status()) {
    mutable_status()->::vqro::rpc::StatusMessage::MergeFrom(from.status());
  }
}

void ReadResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadResult::CopyFrom(const ReadResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadResult::IsInitialized() const {

  return true;
}

void ReadResult::Swap(ReadResult* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ReadResult temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void ReadResult::UnsafeArenaSwap(ReadResult* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ReadResult::InternalSwap(ReadResult* other) {
  std::swap(series_, other->series_);
  datapoints_.UnsafeArenaSwap(&other->datapoints_);
  std::swap(status_, other->status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReadResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReadResult_descriptor_;
  metadata.reflection = ReadResult_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReadResult

// optional .vqro.rpc.Series series = 1;
 bool ReadResult::has_series() const {
  return !_is_default_instance_ && series_ != NULL;
}
 void ReadResult::clear_series() {
  if (series_ != NULL) delete series_;
  series_ = NULL;
}
 const ::vqro::rpc::Series& ReadResult::series() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.ReadResult.series)
  return series_ != NULL ? *series_ : *default_instance_->series_;
}
 ::vqro::rpc::Series* ReadResult::mutable_series() {
  
  if (series_ == NULL) {
    _slow_mutable_series();  }
  // @@protoc_insertion_point(field_mutable:vqro.rpc.ReadResult.series)
  return series_;
}
 ::vqro::rpc::Series* ReadResult::release_series() {
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_series();
  } else {
    ::vqro::rpc::Series* temp = series_;
    series_ = NULL;
    return temp;
  }
}
 void ReadResult::set_allocated_series(::vqro::rpc::Series* series) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete series_;
  }
  if (series != NULL) {
    _slow_set_allocated_series(message_arena, &series);
  }
  series_ = series;
  if (series) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:vqro.rpc.ReadResult.series)
}

// repeated .vqro.rpc.Datapoint datapoints = 2;
 int ReadResult::datapoints_size() const {
  return datapoints_.size();
}
 void ReadResult::clear_datapoints() {
  datapoints_.Clear();
}
 const ::vqro::rpc::Datapoint& ReadResult::datapoints(int index) const {
  // @@protoc_insertion_point(field_get:vqro.rpc.ReadResult.datapoints)
  return datapoints_.Get(index);
}
 ::vqro::rpc::Datapoint* ReadResult::mutable_datapoints(int index) {
  // @@protoc_insertion_point(field_mutable:vqro.rpc.ReadResult.datapoints)
  return datapoints_.Mutable(index);
}
 ::vqro::rpc::Datapoint* ReadResult::add_datapoints() {
  // @@protoc_insertion_point(field_add:vqro.rpc.ReadResult.datapoints)
  return datapoints_.Add();
}
 const ::google::protobuf::RepeatedPtrField< ::vqro::rpc::Datapoint >&
ReadResult::datapoints() const {
  // @@protoc_insertion_point(field_list:vqro.rpc.ReadResult.datapoints)
  return datapoints_;
}
 ::google::protobuf::RepeatedPtrField< ::vqro::rpc::Datapoint >*
ReadResult::mutable_datapoints() {
  // @@protoc_insertion_point(field_mutable_list:vqro.rpc.ReadResult.datapoints)
  return &datapoints_;
}

// optional .vqro.rpc.StatusMessage status = 3;
 bool ReadResult::has_status() const {
  return !_is_default_instance_ && status_ != NULL;
}
 void ReadResult::clear_status() {
  if (status_ != NULL) delete status_;
  status_ = NULL;
}
 const ::vqro::rpc::StatusMessage& ReadResult::status() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.ReadResult.status)
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
 ::vqro::rpc::StatusMessage* ReadResult::mutable_status() {
  
  if (status_ == NULL) {
    _slow_mutable_status();  }
  // @@protoc_insertion_point(field_mutable:vqro.rpc.ReadResult.status)
  return status_;
}
 ::vqro::rpc::StatusMessage* ReadResult::release_status() {
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_status();
  } else {
    ::vqro::rpc::StatusMessage* temp = status_;
    status_ = NULL;
    return temp;
  }
}
 void ReadResult::set_allocated_status(::vqro::rpc::StatusMessage* status) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete status_;
  }
  if (status != NULL) {
    _slow_set_allocated_status(message_arena, &status);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:vqro.rpc.ReadResult.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int SeriesQuery::kConstraintsFieldNumber;
const int SeriesQuery::kResultOffsetFieldNumber;
const int SeriesQuery::kResultLimitFieldNumber;
#endif  // !_MSC_VER

SeriesQuery::SeriesQuery()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vqro.rpc.SeriesQuery)
}

SeriesQuery::SeriesQuery(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  constraints_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vqro.rpc.SeriesQuery)
}

void SeriesQuery::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SeriesQuery::SeriesQuery(const SeriesQuery& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vqro.rpc.SeriesQuery)
}

void SeriesQuery::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  result_offset_ = 0;
  result_limit_ = 0;
}

SeriesQuery::~SeriesQuery() {
  // @@protoc_insertion_point(destructor:vqro.rpc.SeriesQuery)
  SharedDtor();
}

void SeriesQuery::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  if (this != default_instance_) {
  }
}

void SeriesQuery::ArenaDtor(void* object) {
  SeriesQuery* _this = reinterpret_cast< SeriesQuery* >(object);
  (void)_this;
}
void SeriesQuery::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SeriesQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SeriesQuery::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SeriesQuery_descriptor_;
}

const SeriesQuery& SeriesQuery::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vqro_2eproto();
  return *default_instance_;
}

SeriesQuery* SeriesQuery::default_instance_ = NULL;

SeriesQuery* SeriesQuery::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<SeriesQuery>(arena);
}

void SeriesQuery::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SeriesQuery*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(result_offset_, result_limit_);

#undef ZR_HELPER_
#undef ZR_

  constraints_.Clear();
}

bool SeriesQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vqro.rpc.SeriesQuery)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .vqro.rpc.LabelConstraint constraints = 1;
      case 1: {
        if (tag == 10) {
         parse_constraints:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_constraints()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_constraints;
        if (input->ExpectTag(16)) goto parse_result_offset;
        break;
      }

      // optional int32 result_offset = 2;
      case 2: {
        if (tag == 16) {
         parse_result_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_offset_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_result_limit;
        break;
      }

      // optional int32 result_limit = 3;
      case 3: {
        if (tag == 24) {
         parse_result_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_limit_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vqro.rpc.SeriesQuery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vqro.rpc.SeriesQuery)
  return false;
#undef DO_
}

void SeriesQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vqro.rpc.SeriesQuery)
  // repeated .vqro.rpc.LabelConstraint constraints = 1;
  for (unsigned int i = 0, n = this->constraints_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->constraints(i), output);
  }

  // optional int32 result_offset = 2;
  if (this->result_offset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result_offset(), output);
  }

  // optional int32 result_limit = 3;
  if (this->result_limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->result_limit(), output);
  }

  // @@protoc_insertion_point(serialize_end:vqro.rpc.SeriesQuery)
}

::google::protobuf::uint8* SeriesQuery::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vqro.rpc.SeriesQuery)
  // repeated .vqro.rpc.LabelConstraint constraints = 1;
  for (unsigned int i = 0, n = this->constraints_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->constraints(i), target);
  }

  // optional int32 result_offset = 2;
  if (this->result_offset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result_offset(), target);
  }

  // optional int32 result_limit = 3;
  if (this->result_limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->result_limit(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:vqro.rpc.SeriesQuery)
  return target;
}

int SeriesQuery::ByteSize() const {
  int total_size = 0;

  // optional int32 result_offset = 2;
  if (this->result_offset() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result_offset());
  }

  // optional int32 result_limit = 3;
  if (this->result_limit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result_limit());
  }

  // repeated .vqro.rpc.LabelConstraint constraints = 1;
  total_size += 1 * this->constraints_size();
  for (int i = 0; i < this->constraints_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->constraints(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SeriesQuery::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SeriesQuery* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SeriesQuery*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SeriesQuery::MergeFrom(const SeriesQuery& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  constraints_.MergeFrom(from.constraints_);
  if (from.result_offset() != 0) {
    set_result_offset(from.result_offset());
  }
  if (from.result_limit() != 0) {
    set_result_limit(from.result_limit());
  }
}

void SeriesQuery::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SeriesQuery::CopyFrom(const SeriesQuery& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeriesQuery::IsInitialized() const {

  return true;
}

void SeriesQuery::Swap(SeriesQuery* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SeriesQuery temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void SeriesQuery::UnsafeArenaSwap(SeriesQuery* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SeriesQuery::InternalSwap(SeriesQuery* other) {
  constraints_.UnsafeArenaSwap(&other->constraints_);
  std::swap(result_offset_, other->result_offset_);
  std::swap(result_limit_, other->result_limit_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SeriesQuery::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SeriesQuery_descriptor_;
  metadata.reflection = SeriesQuery_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SeriesQuery

// repeated .vqro.rpc.LabelConstraint constraints = 1;
 int SeriesQuery::constraints_size() const {
  return constraints_.size();
}
 void SeriesQuery::clear_constraints() {
  constraints_.Clear();
}
 const ::vqro::rpc::LabelConstraint& SeriesQuery::constraints(int index) const {
  // @@protoc_insertion_point(field_get:vqro.rpc.SeriesQuery.constraints)
  return constraints_.Get(index);
}
 ::vqro::rpc::LabelConstraint* SeriesQuery::mutable_constraints(int index) {
  // @@protoc_insertion_point(field_mutable:vqro.rpc.SeriesQuery.constraints)
  return constraints_.Mutable(index);
}
 ::vqro::rpc::LabelConstraint* SeriesQuery::add_constraints() {
  // @@protoc_insertion_point(field_add:vqro.rpc.SeriesQuery.constraints)
  return constraints_.Add();
}
 const ::google::protobuf::RepeatedPtrField< ::vqro::rpc::LabelConstraint >&
SeriesQuery::constraints() const {
  // @@protoc_insertion_point(field_list:vqro.rpc.SeriesQuery.constraints)
  return constraints_;
}
 ::google::protobuf::RepeatedPtrField< ::vqro::rpc::LabelConstraint >*
SeriesQuery::mutable_constraints() {
  // @@protoc_insertion_point(field_mutable_list:vqro.rpc.SeriesQuery.constraints)
  return &constraints_;
}

// optional int32 result_offset = 2;
 void SeriesQuery::clear_result_offset() {
  result_offset_ = 0;
}
 ::google::protobuf::int32 SeriesQuery::result_offset() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.SeriesQuery.result_offset)
  return result_offset_;
}
 void SeriesQuery::set_result_offset(::google::protobuf::int32 value) {
  
  result_offset_ = value;
  // @@protoc_insertion_point(field_set:vqro.rpc.SeriesQuery.result_offset)
}

// optional int32 result_limit = 3;
 void SeriesQuery::clear_result_limit() {
  result_limit_ = 0;
}
 ::google::protobuf::int32 SeriesQuery::result_limit() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.SeriesQuery.result_limit)
  return result_limit_;
}
 void SeriesQuery::set_result_limit(::google::protobuf::int32 value) {
  
  result_limit_ = value;
  // @@protoc_insertion_point(field_set:vqro.rpc.SeriesQuery.result_limit)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* LabelConstraint_Operator_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LabelConstraint_Operator_descriptor_;
}
bool LabelConstraint_Operator_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const LabelConstraint_Operator LabelConstraint::EQUALS;
const LabelConstraint_Operator LabelConstraint::REGEX_MATCHES;
const LabelConstraint_Operator LabelConstraint::Operator_MIN;
const LabelConstraint_Operator LabelConstraint::Operator_MAX;
const int LabelConstraint::Operator_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int LabelConstraint::kLabelNameFieldNumber;
const int LabelConstraint::kConstraintOpFieldNumber;
const int LabelConstraint::kOperandFieldNumber;
#endif  // !_MSC_VER

LabelConstraint::LabelConstraint()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vqro.rpc.LabelConstraint)
}

LabelConstraint::LabelConstraint(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vqro.rpc.LabelConstraint)
}

void LabelConstraint::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

LabelConstraint::LabelConstraint(const LabelConstraint& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vqro.rpc.LabelConstraint)
}

void LabelConstraint::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  label_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  constraint_op_ = 0;
  operand_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

LabelConstraint::~LabelConstraint() {
  // @@protoc_insertion_point(destructor:vqro.rpc.LabelConstraint)
  SharedDtor();
}

void LabelConstraint::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  label_name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  operand_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (this != default_instance_) {
  }
}

void LabelConstraint::ArenaDtor(void* object) {
  LabelConstraint* _this = reinterpret_cast< LabelConstraint* >(object);
  (void)_this;
}
void LabelConstraint::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void LabelConstraint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LabelConstraint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LabelConstraint_descriptor_;
}

const LabelConstraint& LabelConstraint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vqro_2eproto();
  return *default_instance_;
}

LabelConstraint* LabelConstraint::default_instance_ = NULL;

LabelConstraint* LabelConstraint::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<LabelConstraint>(arena);
}

void LabelConstraint::Clear() {
  label_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  constraint_op_ = 0;
  operand_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool LabelConstraint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vqro.rpc.LabelConstraint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string label_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_label_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->label_name().data(), this->label_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "vqro.rpc.LabelConstraint.label_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_constraint_op;
        break;
      }

      // optional .vqro.rpc.LabelConstraint.Operator constraint_op = 2;
      case 2: {
        if (tag == 16) {
         parse_constraint_op:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_constraint_op(static_cast< ::vqro::rpc::LabelConstraint_Operator >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_operand;
        break;
      }

      // optional string operand = 3;
      case 3: {
        if (tag == 26) {
         parse_operand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_operand()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->operand().data(), this->operand().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "vqro.rpc.LabelConstraint.operand");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vqro.rpc.LabelConstraint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vqro.rpc.LabelConstraint)
  return false;
#undef DO_
}

void LabelConstraint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vqro.rpc.LabelConstraint)
  // optional string label_name = 1;
  if (this->label_name().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->label_name().data(), this->label_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vqro.rpc.LabelConstraint.label_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->label_name(), output);
  }

  // optional .vqro.rpc.LabelConstraint.Operator constraint_op = 2;
  if (this->constraint_op() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->constraint_op(), output);
  }

  // optional string operand = 3;
  if (this->operand().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->operand().data(), this->operand().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vqro.rpc.LabelConstraint.operand");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->operand(), output);
  }

  // @@protoc_insertion_point(serialize_end:vqro.rpc.LabelConstraint)
}

::google::protobuf::uint8* LabelConstraint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vqro.rpc.LabelConstraint)
  // optional string label_name = 1;
  if (this->label_name().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->label_name().data(), this->label_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vqro.rpc.LabelConstraint.label_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->label_name(), target);
  }

  // optional .vqro.rpc.LabelConstraint.Operator constraint_op = 2;
  if (this->constraint_op() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->constraint_op(), target);
  }

  // optional string operand = 3;
  if (this->operand().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->operand().data(), this->operand().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vqro.rpc.LabelConstraint.operand");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->operand(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:vqro.rpc.LabelConstraint)
  return target;
}

int LabelConstraint::ByteSize() const {
  int total_size = 0;

  // optional string label_name = 1;
  if (this->label_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->label_name());
  }

  // optional .vqro.rpc.LabelConstraint.Operator constraint_op = 2;
  if (this->constraint_op() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->constraint_op());
  }

  // optional string operand = 3;
  if (this->operand().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->operand());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LabelConstraint::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LabelConstraint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LabelConstraint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LabelConstraint::MergeFrom(const LabelConstraint& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.label_name().size() > 0) {
    set_label_name(from.label_name());
  }
  if (from.constraint_op() != 0) {
    set_constraint_op(from.constraint_op());
  }
  if (from.operand().size() > 0) {
    set_operand(from.operand());
  }
}

void LabelConstraint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LabelConstraint::CopyFrom(const LabelConstraint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LabelConstraint::IsInitialized() const {

  return true;
}

void LabelConstraint::Swap(LabelConstraint* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    LabelConstraint temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void LabelConstraint::UnsafeArenaSwap(LabelConstraint* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void LabelConstraint::InternalSwap(LabelConstraint* other) {
  label_name_.Swap(&other->label_name_);
  std::swap(constraint_op_, other->constraint_op_);
  operand_.Swap(&other->operand_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LabelConstraint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LabelConstraint_descriptor_;
  metadata.reflection = LabelConstraint_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LabelConstraint

// optional string label_name = 1;
 void LabelConstraint::clear_label_name() {
  label_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& LabelConstraint::label_name() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.LabelConstraint.label_name)
  return label_name_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LabelConstraint::set_label_name(const ::std::string& value) {
  
  label_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:vqro.rpc.LabelConstraint.label_name)
}
 void LabelConstraint::set_label_name(const char* value) {
  
  label_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:vqro.rpc.LabelConstraint.label_name)
}
 void LabelConstraint::set_label_name(const char* value,
    size_t size) {
  
  label_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:vqro.rpc.LabelConstraint.label_name)
}
 ::std::string* LabelConstraint::mutable_label_name() {
  
  // @@protoc_insertion_point(field_mutable:vqro.rpc.LabelConstraint.label_name)
  return label_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* LabelConstraint::release_label_name() {
  
  return label_name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* LabelConstraint::unsafe_arena_release_label_name() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return label_name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void LabelConstraint::set_allocated_label_name(::std::string* label_name) {
  if (label_name != NULL) {
    
  } else {
    
  }
  label_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), label_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:vqro.rpc.LabelConstraint.label_name)
}
 void LabelConstraint::unsafe_arena_set_allocated_label_name(
    ::std::string* label_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (label_name != NULL) {
    
  } else {
    
  }
  
  label_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      label_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:vqro.rpc.LabelConstraint.label_name)
}

// optional .vqro.rpc.LabelConstraint.Operator constraint_op = 2;
 void LabelConstraint::clear_constraint_op() {
  constraint_op_ = 0;
}
 ::vqro::rpc::LabelConstraint_Operator LabelConstraint::constraint_op() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.LabelConstraint.constraint_op)
  return static_cast< ::vqro::rpc::LabelConstraint_Operator >(constraint_op_);
}
 void LabelConstraint::set_constraint_op(::vqro::rpc::LabelConstraint_Operator value) {
  
  constraint_op_ = value;
  // @@protoc_insertion_point(field_set:vqro.rpc.LabelConstraint.constraint_op)
}

// optional string operand = 3;
 void LabelConstraint::clear_operand() {
  operand_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& LabelConstraint::operand() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.LabelConstraint.operand)
  return operand_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LabelConstraint::set_operand(const ::std::string& value) {
  
  operand_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:vqro.rpc.LabelConstraint.operand)
}
 void LabelConstraint::set_operand(const char* value) {
  
  operand_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:vqro.rpc.LabelConstraint.operand)
}
 void LabelConstraint::set_operand(const char* value,
    size_t size) {
  
  operand_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:vqro.rpc.LabelConstraint.operand)
}
 ::std::string* LabelConstraint::mutable_operand() {
  
  // @@protoc_insertion_point(field_mutable:vqro.rpc.LabelConstraint.operand)
  return operand_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* LabelConstraint::release_operand() {
  
  return operand_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* LabelConstraint::unsafe_arena_release_operand() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return operand_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void LabelConstraint::set_allocated_operand(::std::string* operand) {
  if (operand != NULL) {
    
  } else {
    
  }
  operand_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), operand,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:vqro.rpc.LabelConstraint.operand)
}
 void LabelConstraint::unsafe_arena_set_allocated_operand(
    ::std::string* operand) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (operand != NULL) {
    
  } else {
    
  }
  
  operand_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      operand, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:vqro.rpc.LabelConstraint.operand)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void SearchSeriesResult::_slow_mutable_status() {
  status_ = ::google::protobuf::Arena::CreateMessage< ::vqro::rpc::StatusMessage >(
        GetArenaNoVirtual());
}
::vqro::rpc::StatusMessage* SearchSeriesResult::_slow_release_status() {
  if (status_ == NULL) {
    return NULL;
  } else {
    ::vqro::rpc::StatusMessage* temp = new ::vqro::rpc::StatusMessage;
    temp->MergeFrom(*status_);
    status_ = NULL;
    return temp;
  }
}
::vqro::rpc::StatusMessage* SearchSeriesResult::unsafe_arena_release_status() {
  
  ::vqro::rpc::StatusMessage* temp = status_;
  status_ = NULL;
  return temp;
}
void SearchSeriesResult::_slow_set_allocated_status(
    ::google::protobuf::Arena* message_arena, ::vqro::rpc::StatusMessage** status) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*status) == NULL) {
      message_arena->Own(*status);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*status)) {
      ::vqro::rpc::StatusMessage* new_status = 
            ::google::protobuf::Arena::CreateMessage< ::vqro::rpc::StatusMessage >(
            message_arena);
      new_status->CopyFrom(**status);
      *status = new_status;
    }
}
void SearchSeriesResult::unsafe_arena_set_allocated_status(
    ::vqro::rpc::StatusMessage* status) {
  if (GetArenaNoVirtual() == NULL) {
    delete status_;
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vqro.rpc.SearchSeriesResult.status)
}
#ifndef _MSC_VER
const int SearchSeriesResult::kMatchingSeriesFieldNumber;
const int SearchSeriesResult::kStatusFieldNumber;
#endif  // !_MSC_VER

SearchSeriesResult::SearchSeriesResult()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vqro.rpc.SearchSeriesResult)
}

SearchSeriesResult::SearchSeriesResult(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  matching_series_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vqro.rpc.SearchSeriesResult)
}

void SearchSeriesResult::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  status_ = const_cast< ::vqro::rpc::StatusMessage*>(&::vqro::rpc::StatusMessage::default_instance());
}

SearchSeriesResult::SearchSeriesResult(const SearchSeriesResult& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vqro.rpc.SearchSeriesResult)
}

void SearchSeriesResult::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  status_ = NULL;
}

SearchSeriesResult::~SearchSeriesResult() {
  // @@protoc_insertion_point(destructor:vqro.rpc.SearchSeriesResult)
  SharedDtor();
}

void SearchSeriesResult::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  if (this != default_instance_) {
    delete status_;
  }
}

void SearchSeriesResult::ArenaDtor(void* object) {
  SearchSeriesResult* _this = reinterpret_cast< SearchSeriesResult* >(object);
  (void)_this;
}
void SearchSeriesResult::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SearchSeriesResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchSeriesResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SearchSeriesResult_descriptor_;
}

const SearchSeriesResult& SearchSeriesResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vqro_2eproto();
  return *default_instance_;
}

SearchSeriesResult* SearchSeriesResult::default_instance_ = NULL;

SearchSeriesResult* SearchSeriesResult::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<SearchSeriesResult>(arena);
}

void SearchSeriesResult::Clear() {
  if (status_ != NULL) delete status_;
  status_ = NULL;
  matching_series_.Clear();
}

bool SearchSeriesResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vqro.rpc.SearchSeriesResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .vqro.rpc.Series matching_series = 1;
      case 1: {
        if (tag == 10) {
         parse_matching_series:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_matching_series()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_matching_series;
        if (input->ExpectTag(18)) goto parse_status;
        break;
      }

      // optional .vqro.rpc.StatusMessage status = 2;
      case 2: {
        if (tag == 18) {
         parse_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vqro.rpc.SearchSeriesResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vqro.rpc.SearchSeriesResult)
  return false;
#undef DO_
}

void SearchSeriesResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vqro.rpc.SearchSeriesResult)
  // repeated .vqro.rpc.Series matching_series = 1;
  for (unsigned int i = 0, n = this->matching_series_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->matching_series(i), output);
  }

  // optional .vqro.rpc.StatusMessage status = 2;
  if (this->has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->status_, output);
  }

  // @@protoc_insertion_point(serialize_end:vqro.rpc.SearchSeriesResult)
}

::google::protobuf::uint8* SearchSeriesResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vqro.rpc.SearchSeriesResult)
  // repeated .vqro.rpc.Series matching_series = 1;
  for (unsigned int i = 0, n = this->matching_series_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->matching_series(i), target);
  }

  // optional .vqro.rpc.StatusMessage status = 2;
  if (this->has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->status_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:vqro.rpc.SearchSeriesResult)
  return target;
}

int SearchSeriesResult::ByteSize() const {
  int total_size = 0;

  // optional .vqro.rpc.StatusMessage status = 2;
  if (this->has_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->status_);
  }

  // repeated .vqro.rpc.Series matching_series = 1;
  total_size += 1 * this->matching_series_size();
  for (int i = 0; i < this->matching_series_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->matching_series(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchSeriesResult::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SearchSeriesResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SearchSeriesResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SearchSeriesResult::MergeFrom(const SearchSeriesResult& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  matching_series_.MergeFrom(from.matching_series_);
  if (from.has_status()) {
    mutable_status()->::vqro::rpc::StatusMessage::MergeFrom(from.status());
  }
}

void SearchSeriesResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchSeriesResult::CopyFrom(const SearchSeriesResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchSeriesResult::IsInitialized() const {

  return true;
}

void SearchSeriesResult::Swap(SearchSeriesResult* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SearchSeriesResult temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void SearchSeriesResult::UnsafeArenaSwap(SearchSeriesResult* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SearchSeriesResult::InternalSwap(SearchSeriesResult* other) {
  matching_series_.UnsafeArenaSwap(&other->matching_series_);
  std::swap(status_, other->status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SearchSeriesResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SearchSeriesResult_descriptor_;
  metadata.reflection = SearchSeriesResult_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SearchSeriesResult

// repeated .vqro.rpc.Series matching_series = 1;
 int SearchSeriesResult::matching_series_size() const {
  return matching_series_.size();
}
 void SearchSeriesResult::clear_matching_series() {
  matching_series_.Clear();
}
 const ::vqro::rpc::Series& SearchSeriesResult::matching_series(int index) const {
  // @@protoc_insertion_point(field_get:vqro.rpc.SearchSeriesResult.matching_series)
  return matching_series_.Get(index);
}
 ::vqro::rpc::Series* SearchSeriesResult::mutable_matching_series(int index) {
  // @@protoc_insertion_point(field_mutable:vqro.rpc.SearchSeriesResult.matching_series)
  return matching_series_.Mutable(index);
}
 ::vqro::rpc::Series* SearchSeriesResult::add_matching_series() {
  // @@protoc_insertion_point(field_add:vqro.rpc.SearchSeriesResult.matching_series)
  return matching_series_.Add();
}
 const ::google::protobuf::RepeatedPtrField< ::vqro::rpc::Series >&
SearchSeriesResult::matching_series() const {
  // @@protoc_insertion_point(field_list:vqro.rpc.SearchSeriesResult.matching_series)
  return matching_series_;
}
 ::google::protobuf::RepeatedPtrField< ::vqro::rpc::Series >*
SearchSeriesResult::mutable_matching_series() {
  // @@protoc_insertion_point(field_mutable_list:vqro.rpc.SearchSeriesResult.matching_series)
  return &matching_series_;
}

// optional .vqro.rpc.StatusMessage status = 2;
 bool SearchSeriesResult::has_status() const {
  return !_is_default_instance_ && status_ != NULL;
}
 void SearchSeriesResult::clear_status() {
  if (status_ != NULL) delete status_;
  status_ = NULL;
}
 const ::vqro::rpc::StatusMessage& SearchSeriesResult::status() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.SearchSeriesResult.status)
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
 ::vqro::rpc::StatusMessage* SearchSeriesResult::mutable_status() {
  
  if (status_ == NULL) {
    _slow_mutable_status();  }
  // @@protoc_insertion_point(field_mutable:vqro.rpc.SearchSeriesResult.status)
  return status_;
}
 ::vqro::rpc::StatusMessage* SearchSeriesResult::release_status() {
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_status();
  } else {
    ::vqro::rpc::StatusMessage* temp = status_;
    status_ = NULL;
    return temp;
  }
}
 void SearchSeriesResult::set_allocated_status(::vqro::rpc::StatusMessage* status) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete status_;
  }
  if (status != NULL) {
    _slow_set_allocated_status(message_arena, &status);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:vqro.rpc.SearchSeriesResult.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int LabelsQuery::kRegexFieldNumber;
const int LabelsQuery::kResultOffsetFieldNumber;
const int LabelsQuery::kResultLimitFieldNumber;
#endif  // !_MSC_VER

LabelsQuery::LabelsQuery()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vqro.rpc.LabelsQuery)
}

LabelsQuery::LabelsQuery(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vqro.rpc.LabelsQuery)
}

void LabelsQuery::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

LabelsQuery::LabelsQuery(const LabelsQuery& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vqro.rpc.LabelsQuery)
}

void LabelsQuery::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  regex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  result_offset_ = 0;
  result_limit_ = 0;
}

LabelsQuery::~LabelsQuery() {
  // @@protoc_insertion_point(destructor:vqro.rpc.LabelsQuery)
  SharedDtor();
}

void LabelsQuery::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  regex_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (this != default_instance_) {
  }
}

void LabelsQuery::ArenaDtor(void* object) {
  LabelsQuery* _this = reinterpret_cast< LabelsQuery* >(object);
  (void)_this;
}
void LabelsQuery::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void LabelsQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LabelsQuery::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LabelsQuery_descriptor_;
}

const LabelsQuery& LabelsQuery::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vqro_2eproto();
  return *default_instance_;
}

LabelsQuery* LabelsQuery::default_instance_ = NULL;

LabelsQuery* LabelsQuery::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<LabelsQuery>(arena);
}

void LabelsQuery::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<LabelsQuery*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(result_offset_, result_limit_);
  regex_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());

#undef ZR_HELPER_
#undef ZR_

}

bool LabelsQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vqro.rpc.LabelsQuery)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string regex = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_regex()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->regex().data(), this->regex().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "vqro.rpc.LabelsQuery.regex");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result_offset;
        break;
      }

      // optional int32 result_offset = 2;
      case 2: {
        if (tag == 16) {
         parse_result_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_offset_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_result_limit;
        break;
      }

      // optional int32 result_limit = 3;
      case 3: {
        if (tag == 24) {
         parse_result_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_limit_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vqro.rpc.LabelsQuery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vqro.rpc.LabelsQuery)
  return false;
#undef DO_
}

void LabelsQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vqro.rpc.LabelsQuery)
  // optional string regex = 1;
  if (this->regex().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->regex().data(), this->regex().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vqro.rpc.LabelsQuery.regex");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->regex(), output);
  }

  // optional int32 result_offset = 2;
  if (this->result_offset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result_offset(), output);
  }

  // optional int32 result_limit = 3;
  if (this->result_limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->result_limit(), output);
  }

  // @@protoc_insertion_point(serialize_end:vqro.rpc.LabelsQuery)
}

::google::protobuf::uint8* LabelsQuery::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vqro.rpc.LabelsQuery)
  // optional string regex = 1;
  if (this->regex().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->regex().data(), this->regex().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vqro.rpc.LabelsQuery.regex");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->regex(), target);
  }

  // optional int32 result_offset = 2;
  if (this->result_offset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result_offset(), target);
  }

  // optional int32 result_limit = 3;
  if (this->result_limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->result_limit(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:vqro.rpc.LabelsQuery)
  return target;
}

int LabelsQuery::ByteSize() const {
  int total_size = 0;

  // optional string regex = 1;
  if (this->regex().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->regex());
  }

  // optional int32 result_offset = 2;
  if (this->result_offset() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result_offset());
  }

  // optional int32 result_limit = 3;
  if (this->result_limit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result_limit());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LabelsQuery::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LabelsQuery* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LabelsQuery*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LabelsQuery::MergeFrom(const LabelsQuery& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.regex().size() > 0) {
    set_regex(from.regex());
  }
  if (from.result_offset() != 0) {
    set_result_offset(from.result_offset());
  }
  if (from.result_limit() != 0) {
    set_result_limit(from.result_limit());
  }
}

void LabelsQuery::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LabelsQuery::CopyFrom(const LabelsQuery& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LabelsQuery::IsInitialized() const {

  return true;
}

void LabelsQuery::Swap(LabelsQuery* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    LabelsQuery temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void LabelsQuery::UnsafeArenaSwap(LabelsQuery* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void LabelsQuery::InternalSwap(LabelsQuery* other) {
  regex_.Swap(&other->regex_);
  std::swap(result_offset_, other->result_offset_);
  std::swap(result_limit_, other->result_limit_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LabelsQuery::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LabelsQuery_descriptor_;
  metadata.reflection = LabelsQuery_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LabelsQuery

// optional string regex = 1;
 void LabelsQuery::clear_regex() {
  regex_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& LabelsQuery::regex() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.LabelsQuery.regex)
  return regex_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LabelsQuery::set_regex(const ::std::string& value) {
  
  regex_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:vqro.rpc.LabelsQuery.regex)
}
 void LabelsQuery::set_regex(const char* value) {
  
  regex_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:vqro.rpc.LabelsQuery.regex)
}
 void LabelsQuery::set_regex(const char* value,
    size_t size) {
  
  regex_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:vqro.rpc.LabelsQuery.regex)
}
 ::std::string* LabelsQuery::mutable_regex() {
  
  // @@protoc_insertion_point(field_mutable:vqro.rpc.LabelsQuery.regex)
  return regex_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* LabelsQuery::release_regex() {
  
  return regex_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* LabelsQuery::unsafe_arena_release_regex() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return regex_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void LabelsQuery::set_allocated_regex(::std::string* regex) {
  if (regex != NULL) {
    
  } else {
    
  }
  regex_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), regex,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:vqro.rpc.LabelsQuery.regex)
}
 void LabelsQuery::unsafe_arena_set_allocated_regex(
    ::std::string* regex) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (regex != NULL) {
    
  } else {
    
  }
  
  regex_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      regex, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:vqro.rpc.LabelsQuery.regex)
}

// optional int32 result_offset = 2;
 void LabelsQuery::clear_result_offset() {
  result_offset_ = 0;
}
 ::google::protobuf::int32 LabelsQuery::result_offset() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.LabelsQuery.result_offset)
  return result_offset_;
}
 void LabelsQuery::set_result_offset(::google::protobuf::int32 value) {
  
  result_offset_ = value;
  // @@protoc_insertion_point(field_set:vqro.rpc.LabelsQuery.result_offset)
}

// optional int32 result_limit = 3;
 void LabelsQuery::clear_result_limit() {
  result_limit_ = 0;
}
 ::google::protobuf::int32 LabelsQuery::result_limit() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.LabelsQuery.result_limit)
  return result_limit_;
}
 void LabelsQuery::set_result_limit(::google::protobuf::int32 value) {
  
  result_limit_ = value;
  // @@protoc_insertion_point(field_set:vqro.rpc.LabelsQuery.result_limit)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void SearchLabelsResult::_slow_mutable_status() {
  status_ = ::google::protobuf::Arena::CreateMessage< ::vqro::rpc::StatusMessage >(
        GetArenaNoVirtual());
}
::vqro::rpc::StatusMessage* SearchLabelsResult::_slow_release_status() {
  if (status_ == NULL) {
    return NULL;
  } else {
    ::vqro::rpc::StatusMessage* temp = new ::vqro::rpc::StatusMessage;
    temp->MergeFrom(*status_);
    status_ = NULL;
    return temp;
  }
}
::vqro::rpc::StatusMessage* SearchLabelsResult::unsafe_arena_release_status() {
  
  ::vqro::rpc::StatusMessage* temp = status_;
  status_ = NULL;
  return temp;
}
void SearchLabelsResult::_slow_set_allocated_status(
    ::google::protobuf::Arena* message_arena, ::vqro::rpc::StatusMessage** status) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*status) == NULL) {
      message_arena->Own(*status);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*status)) {
      ::vqro::rpc::StatusMessage* new_status = 
            ::google::protobuf::Arena::CreateMessage< ::vqro::rpc::StatusMessage >(
            message_arena);
      new_status->CopyFrom(**status);
      *status = new_status;
    }
}
void SearchLabelsResult::unsafe_arena_set_allocated_status(
    ::vqro::rpc::StatusMessage* status) {
  if (GetArenaNoVirtual() == NULL) {
    delete status_;
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vqro.rpc.SearchLabelsResult.status)
}
#ifndef _MSC_VER
const int SearchLabelsResult::kLabelsFieldNumber;
const int SearchLabelsResult::kStatusFieldNumber;
#endif  // !_MSC_VER

SearchLabelsResult::SearchLabelsResult()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vqro.rpc.SearchLabelsResult)
}

SearchLabelsResult::SearchLabelsResult(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  labels_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vqro.rpc.SearchLabelsResult)
}

void SearchLabelsResult::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  status_ = const_cast< ::vqro::rpc::StatusMessage*>(&::vqro::rpc::StatusMessage::default_instance());
}

SearchLabelsResult::SearchLabelsResult(const SearchLabelsResult& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vqro.rpc.SearchLabelsResult)
}

void SearchLabelsResult::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  status_ = NULL;
}

SearchLabelsResult::~SearchLabelsResult() {
  // @@protoc_insertion_point(destructor:vqro.rpc.SearchLabelsResult)
  SharedDtor();
}

void SearchLabelsResult::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  if (this != default_instance_) {
    delete status_;
  }
}

void SearchLabelsResult::ArenaDtor(void* object) {
  SearchLabelsResult* _this = reinterpret_cast< SearchLabelsResult* >(object);
  (void)_this;
}
void SearchLabelsResult::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SearchLabelsResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchLabelsResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SearchLabelsResult_descriptor_;
}

const SearchLabelsResult& SearchLabelsResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vqro_2eproto();
  return *default_instance_;
}

SearchLabelsResult* SearchLabelsResult::default_instance_ = NULL;

SearchLabelsResult* SearchLabelsResult::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<SearchLabelsResult>(arena);
}

void SearchLabelsResult::Clear() {
  if (status_ != NULL) delete status_;
  status_ = NULL;
  labels_.Clear();
}

bool SearchLabelsResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vqro.rpc.SearchLabelsResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string labels = 1;
      case 1: {
        if (tag == 10) {
         parse_labels:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_labels()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->labels(this->labels_size() - 1).data(),
            this->labels(this->labels_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "vqro.rpc.SearchLabelsResult.labels");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_labels;
        if (input->ExpectTag(18)) goto parse_status;
        break;
      }

      // optional .vqro.rpc.StatusMessage status = 2;
      case 2: {
        if (tag == 18) {
         parse_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vqro.rpc.SearchLabelsResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vqro.rpc.SearchLabelsResult)
  return false;
#undef DO_
}

void SearchLabelsResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vqro.rpc.SearchLabelsResult)
  // repeated string labels = 1;
  for (int i = 0; i < this->labels_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->labels(i).data(), this->labels(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "vqro.rpc.SearchLabelsResult.labels");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->labels(i), output);
  }

  // optional .vqro.rpc.StatusMessage status = 2;
  if (this->has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->status_, output);
  }

  // @@protoc_insertion_point(serialize_end:vqro.rpc.SearchLabelsResult)
}

::google::protobuf::uint8* SearchLabelsResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vqro.rpc.SearchLabelsResult)
  // repeated string labels = 1;
  for (int i = 0; i < this->labels_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->labels(i).data(), this->labels(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vqro.rpc.SearchLabelsResult.labels");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->labels(i), target);
  }

  // optional .vqro.rpc.StatusMessage status = 2;
  if (this->has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->status_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:vqro.rpc.SearchLabelsResult)
  return target;
}

int SearchLabelsResult::ByteSize() const {
  int total_size = 0;

  // optional .vqro.rpc.StatusMessage status = 2;
  if (this->has_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->status_);
  }

  // repeated string labels = 1;
  total_size += 1 * this->labels_size();
  for (int i = 0; i < this->labels_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->labels(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchLabelsResult::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SearchLabelsResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SearchLabelsResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SearchLabelsResult::MergeFrom(const SearchLabelsResult& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  labels_.MergeFrom(from.labels_);
  if (from.has_status()) {
    mutable_status()->::vqro::rpc::StatusMessage::MergeFrom(from.status());
  }
}

void SearchLabelsResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchLabelsResult::CopyFrom(const SearchLabelsResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchLabelsResult::IsInitialized() const {

  return true;
}

void SearchLabelsResult::Swap(SearchLabelsResult* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SearchLabelsResult temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void SearchLabelsResult::UnsafeArenaSwap(SearchLabelsResult* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SearchLabelsResult::InternalSwap(SearchLabelsResult* other) {
  labels_.UnsafeArenaSwap(&other->labels_);
  std::swap(status_, other->status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SearchLabelsResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SearchLabelsResult_descriptor_;
  metadata.reflection = SearchLabelsResult_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SearchLabelsResult

// repeated string labels = 1;
 int SearchLabelsResult::labels_size() const {
  return labels_.size();
}
 void SearchLabelsResult::clear_labels() {
  labels_.Clear();
}
 const ::std::string& SearchLabelsResult::labels(int index) const {
  // @@protoc_insertion_point(field_get:vqro.rpc.SearchLabelsResult.labels)
  return labels_.Get(index);
}
 ::std::string* SearchLabelsResult::mutable_labels(int index) {
  // @@protoc_insertion_point(field_mutable:vqro.rpc.SearchLabelsResult.labels)
  return labels_.Mutable(index);
}
 void SearchLabelsResult::set_labels(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:vqro.rpc.SearchLabelsResult.labels)
  labels_.Mutable(index)->assign(value);
}
 void SearchLabelsResult::set_labels(int index, const char* value) {
  labels_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:vqro.rpc.SearchLabelsResult.labels)
}
 void SearchLabelsResult::set_labels(int index, const char* value, size_t size) {
  labels_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:vqro.rpc.SearchLabelsResult.labels)
}
 ::std::string* SearchLabelsResult::add_labels() {
  return labels_.Add();
}
 void SearchLabelsResult::add_labels(const ::std::string& value) {
  labels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:vqro.rpc.SearchLabelsResult.labels)
}
 void SearchLabelsResult::add_labels(const char* value) {
  labels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:vqro.rpc.SearchLabelsResult.labels)
}
 void SearchLabelsResult::add_labels(const char* value, size_t size) {
  labels_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:vqro.rpc.SearchLabelsResult.labels)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
SearchLabelsResult::labels() const {
  // @@protoc_insertion_point(field_list:vqro.rpc.SearchLabelsResult.labels)
  return labels_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
SearchLabelsResult::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_list:vqro.rpc.SearchLabelsResult.labels)
  return &labels_;
}

// optional .vqro.rpc.StatusMessage status = 2;
 bool SearchLabelsResult::has_status() const {
  return !_is_default_instance_ && status_ != NULL;
}
 void SearchLabelsResult::clear_status() {
  if (status_ != NULL) delete status_;
  status_ = NULL;
}
 const ::vqro::rpc::StatusMessage& SearchLabelsResult::status() const {
  // @@protoc_insertion_point(field_get:vqro.rpc.SearchLabelsResult.status)
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
 ::vqro::rpc::StatusMessage* SearchLabelsResult::mutable_status() {
  
  if (status_ == NULL) {
    _slow_mutable_status();  }
  // @@protoc_insertion_point(field_mutable:vqro.rpc.SearchLabelsResult.status)
  return status_;
}
 ::vqro::rpc::StatusMessage* SearchLabelsResult::release_status() {
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_status();
  } else {
    ::vqro::rpc::StatusMessage* temp = status_;
    status_ = NULL;
    return temp;
  }
}
 void SearchLabelsResult::set_allocated_status(::vqro::rpc::StatusMessage* status) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete status_;
  }
  if (status != NULL) {
    _slow_set_allocated_status(message_arena, &status);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:vqro.rpc.SearchLabelsResult.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace rpc
}  // namespace vqro

// @@protoc_insertion_point(global_scope)
